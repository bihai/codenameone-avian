/* DO NOT EDIT THIS FILE - it is machine generated */
#import "com_codename1_impl_ios_IOSNative.h"
#import "CodenameOne_GLViewController.h"

extern void deinitVMImpl();
extern int isPainted();
extern int Java_com_codename1_impl_ios_IOSImplementation_getDisplayWidthImpl();
extern int Java_com_codename1_impl_ios_IOSImplementation_getDisplayHeightImpl();
extern void Java_com_codename1_impl_ios_IOSImplementation_flushBufferImpl
(void* peer, int x, int y, int width, int height);

extern void Java_com_codename1_impl_ios_IOSImplementation_setNativeClippingMutableImpl
(int x, int y, int width, int height, int clipApplied);

extern void Java_com_codename1_impl_ios_IOSImplementation_setNativeClippingGlobalImpl
(int x, int y, int width, int height, int clipApplied);

extern void Java_com_codename1_impl_ios_IOSImplementation_nativeDrawLineGlobalImpl
(int color, int alpha, int x1, int y1, int x2, int y2);

extern void Java_com_codename1_impl_ios_IOSImplementation_nativeDrawLineMutableImpl
(int color, int alpha, int x1, int y1, int x2, int y2);

extern void Java_com_codename1_impl_ios_IOSImplementation_nativeFillRectMutableImpl
(int color, int alpha, int x, int y, int width, int height);

extern void Java_com_codename1_impl_ios_IOSImplementation_nativeFillRectGlobalImpl
(int color, int alpha, int x, int y, int width, int height);

extern void Java_com_codename1_impl_ios_IOSImplementation_nativeDrawRectMutableImpl
(int color, int alpha, int x, int y, int width, int height);

extern void Java_com_codename1_impl_ios_IOSImplementation_nativeDrawRectGlobalImpl
(int color, int alpha, int x, int y, int width, int height);

extern void Java_com_codename1_impl_ios_IOSImplementation_nativeDrawStringGlobalImpl
(int color, int alpha, void* fontPeer, const char* str, int strLen, int x, int y);

extern void Java_com_codename1_impl_ios_IOSImplementation_nativeDrawStringMutableImpl
(int color, int alpha, void* fontPeer, const char* str, int strLen, int x, int y);


extern void* Java_com_codename1_impl_ios_IOSImplementation_createNativeMutableImageImpl
(int width, int height, int argb);

extern void Java_com_codename1_impl_ios_IOSImplementation_startDrawingOnImageImpl
(int width, int height, void *peer);

extern void* Java_com_codename1_impl_ios_IOSImplementation_finishDrawingOnImageImpl
();

extern void Java_com_codename1_impl_ios_IOSImplementation_deleteNativePeerImpl
(void* peer);

extern void Java_com_codename1_impl_ios_IOSImplementation_deleteNativeFontPeerImpl
(void* peer);

extern void* Java_com_codename1_impl_ios_IOSImplementation_createImageImpl
(void* data, int dataLength, int* widthAndHeightReturnValue);

extern void* Java_com_codename1_impl_ios_IOSImplementation_scaleImpl
(void* peer, int width, int height);

extern void Java_com_codename1_impl_ios_IOSImplementation_nativeDrawRoundRectGlobalImpl
(int color, int alpha, int x, int y, int width, int height, int arcWidth, int arcHeight);

extern void Java_com_codename1_impl_ios_IOSImplementation_nativeFillRoundRectGlobalImpl
(int color, int alpha, int x, int y, int width, int height, int arcWidth, int arcHeight);

extern void Java_com_codename1_impl_ios_IOSImplementation_nativeDrawRoundRectMutableImpl
(int color, int alpha, int x, int y, int width, int height, int arcWidth, int arcHeight);

extern void Java_com_codename1_impl_ios_IOSImplementation_nativeFillRoundRectMutableImpl
(int color, int alpha, int x, int y, int width, int height, int arcWidth, int arcHeight);

extern void Java_com_codename1_impl_ios_IOSImplementation_nativeFillArcMutableImpl
(int color, int alpha, int x, int y, int width, int height, int startAngle, int angle);

extern void Java_com_codename1_impl_ios_IOSImplementation_nativeDrawArcMutableImpl
(int color, int alpha, int x, int y, int width, int height, int startAngle, int angle);

extern void Java_com_codename1_impl_ios_IOSImplementation_nativeFillArcGlobalImpl
(int color, int alpha, int x, int y, int width, int height, int startAngle, int angle);

extern void Java_com_codename1_impl_ios_IOSImplementation_nativeDrawArcGlobalImpl
(int color, int alpha, int x, int y, int width, int height, int startAngle, int angle);

extern void Java_com_codename1_impl_ios_IOSImplementation_nativeDrawImageMutableImpl
(void* peer, int alpha, int x, int y, int width, int height);

extern void Java_com_codename1_impl_ios_IOSImplementation_nativeDrawImageGlobalImpl
(void* peer, int alpha, int x, int y, int width, int height);

extern void Java_com_codename1_impl_ios_IOSImplementation_nativeTileImageGlobalImpl
(void* peer, int alpha, int x, int y, int width, int height);

extern signed int Java_com_codename1_impl_ios_IOSImplementation_stringWidthNativeImpl
(void* peer, const char* str, int len);


extern int Java_com_codename1_impl_ios_IOSImplementation_charWidthNativeImpl
(void* peer, int chr);


extern int Java_com_codename1_impl_ios_IOSImplementation_getFontHeightNativeImpl
(void* peer);


extern void* Java_com_codename1_impl_ios_IOSImplementation_createSystemFontImpl
(int face, int style, int size);

extern void loadResourceFile(const char* name, int nameLen, const char* type, int typeLen, void* data);

extern int getResourceSize(const char* name, int nameLen, const char* type, int typeLen);

extern int isPainted();

extern void Java_com_codename1_impl_ios_IOSImplementation_imageRgbToIntArrayImpl
(void* peer, int* arr, int x, int y, int width, int height);

extern void* Java_com_codename1_impl_ios_IOSImplementation_createImageFromARGBImpl
(int* arr, int width, int height);

extern void Java_com_codename1_impl_ios_IOSImplementation_editStringAtImpl
(int x, int y, int w, int h, void* peer, int isSingleLine, int rows, int maxSize, int constraint, const char* str, int len);

extern void Java_com_codename1_impl_ios_IOSImplementation_resetAffineGlobal();

extern void Java_com_codename1_impl_ios_IOSImplementation_scale(float x, float y);

extern int isIPad();


/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    initVM
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_initVM
  (JNIEnv *env, jclass cls)
{
	NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    int retVal = UIApplicationMain(0, nil, nil, @"CodenameOne_GLAppDelegate");
    [pool release];

}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    deinitializeVM
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_deinitializeVM
  (JNIEnv *env, jclass cls)
{
	deinitVMImpl();
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    isPainted
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_codename1_impl_ios_IOSNative_isPainted
  (JNIEnv *env, jclass cls)
{
    return isPainted();

}
/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getDisplayWidth
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_codename1_impl_ios_IOSNative_getDisplayWidth
  (JNIEnv *env, jclass cls)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    jint i = Java_com_codename1_impl_ios_IOSImplementation_getDisplayWidthImpl();
    [pool release];
    return i;

}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getDisplayHeight
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_com_codename1_impl_ios_IOSNative_getDisplayHeight
  (JNIEnv *env, jclass cls)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    jint i = Java_com_codename1_impl_ios_IOSImplementation_getDisplayHeightImpl();
    return i;

}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    editStringAt
 * Signature: (IIIIJZIIILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_editStringAt
  (JNIEnv *env, jclass cls, jint n1, jint n2, jint n3, jint n4, jlong n5, jboolean n6, jint n7, jint n8, jint n9, jstring n10)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    const char* utf = (*env)->GetStringUTFChars(env, n10, 0);
    Java_com_codename1_impl_ios_IOSImplementation_editStringAtImpl(n1, n2, n3, n4, n5, n6, n7, n8, n9, utf, 0);
    (*env)->ReleaseStringUTFChars(env, n10, utf);
    [pool release];
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    flushBuffer
 * Signature: (JIIII)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_flushBuffer
  (JNIEnv *env, jclass cls, jlong n1, jint n2, jint n3, jint n4, jint n5)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    Java_com_codename1_impl_ios_IOSImplementation_flushBufferImpl(n1, n2, n3, n4, n5);
    [pool release];

}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    imageRgbToIntArray
 * Signature: (J[IIIII)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_imageRgbToIntArray
  (JNIEnv *env, jclass cls, jlong n1, jintArray n2, jint n3, jint n4, jint n5, jint n6)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    jboolean isCopy = NULL;
    int* data = (*env)->GetIntArrayElements(env, n2, &isCopy);
    Java_com_codename1_impl_ios_IOSImplementation_imageRgbToIntArrayImpl(n1, data, n3, n4, n5, n6);
    (*env)->ReleaseIntArrayElements(env, n2, data, 0);
    [pool release];
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    createImageFromARGB
 * Signature: ([III)J
 */
JNIEXPORT jlong JNICALL Java_com_codename1_impl_ios_IOSNative_createImageFromARGB
  (JNIEnv *env, jclass cls, jintArray n1, jint n2, jint n3)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    jboolean isCopy = NULL;
    int* data = (*env)->GetIntArrayElements(env, n1, &isCopy);
    jlong i = Java_com_codename1_impl_ios_IOSImplementation_createImageFromARGBImpl(data, n2, n3);
    (*env)->ReleaseIntArrayElements(env, n2, data, 0);
    [pool release];
    return i;

}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    createImage
 * Signature: ([B[I)J
 */
JNIEXPORT jlong JNICALL Java_com_codename1_impl_ios_IOSNative_createImage
  (JNIEnv *env, jclass cls, jbyteArray n1, jintArray n2)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    jboolean isCopy = NULL;
    char* data = (*env)->GetByteArrayElements(env, n1, &isCopy);
    int* data2 = (*env)->GetIntArrayElements(env, n2, &isCopy);
    jsize len = (*env)->GetArrayLength(env, n1);
    
    jlong i = Java_com_codename1_impl_ios_IOSImplementation_createImageImpl(data, len, data2);
    (*env)->ReleaseByteArrayElements(env, n1, data, 0);
    (*env)->ReleaseIntArrayElements(env, n2, data2, 0);
    [pool release];
    return i;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    scale
 * Signature: (JII)J
 */
JNIEXPORT jlong JNICALL Java_com_codename1_impl_ios_IOSNative_scale
  (JNIEnv *env, jclass cls, jlong n1, jint n2, jint n3)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    jlong i = Java_com_codename1_impl_ios_IOSImplementation_scaleImpl(n1, n2, n3);
    [pool release];
    return i;
    
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    setNativeClippingMutable
 * Signature: (IIIIZ)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_setNativeClippingMutable
  (JNIEnv *env, jclass cls, jint n1, jint n2, jint n3, jint n4, jboolean n5)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    Java_com_codename1_impl_ios_IOSImplementation_setNativeClippingMutableImpl(n1, n2, n3, n4, n5);
    [pool release];
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    setNativeClippingGlobal
 * Signature: (IIIIZ)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_setNativeClippingGlobal
  (JNIEnv *env, jclass cls, jint n1, jint n2, jint n3, jint n4, jboolean n5)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    Java_com_codename1_impl_ios_IOSImplementation_setNativeClippingGlobalImpl(n1, n2, n3, n4, n5);
    [pool release];
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    nativeDrawLineMutable
 * Signature: (IIIIII)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_nativeDrawLineMutable
  (JNIEnv *env, jclass cls, jint n1, jint n2, jint n3, jint n4, jint n5, jint n6)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    Java_com_codename1_impl_ios_IOSImplementation_nativeDrawLineMutableImpl(n1, n2, n3, n4, n5, n6);
    [pool release];

}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    nativeDrawLineGlobal
 * Signature: (IIIIII)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_nativeDrawLineGlobal
  (JNIEnv *env, jclass cls, jint n1, jint n2, jint n3, jint n4, jint n5, jint n6)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    Java_com_codename1_impl_ios_IOSImplementation_nativeDrawLineGlobalImpl(n1, n2, n3, n4, n5, n6);
    [pool release];

}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    nativeFillRectMutable
 * Signature: (IIIIII)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_nativeFillRectMutable
  (JNIEnv *env, jclass cls, jint n1, jint n2, jint n3, jint n4, jint n5, jint n6)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    Java_com_codename1_impl_ios_IOSImplementation_nativeFillRectMutableImpl(n1, n2, n3, n4, n5, n6);
    [pool release];
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    nativeFillRectGlobal
 * Signature: (IIIIII)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_nativeFillRectGlobal
  (JNIEnv *env, jclass cls, jint n1, jint n2, jint n3, jint n4, jint n5, jint n6)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    Java_com_codename1_impl_ios_IOSImplementation_nativeFillRectGlobalImpl(n1, n2, n3, n4, n5, n6);
    [pool release];
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    nativeDrawRectMutable
 * Signature: (IIIIII)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_nativeDrawRectMutable
  (JNIEnv *env, jclass cls, jint n1, jint n2, jint n3, jint n4, jint n5, jint n6)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    Java_com_codename1_impl_ios_IOSImplementation_nativeDrawRectMutableImpl(n1, n2, n3, n4, n5, n6);
    [pool release];

}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    nativeDrawRectGlobal
 * Signature: (IIIIII)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_nativeDrawRectGlobal
  (JNIEnv *env, jclass cls, jint n1, jint n2, jint n3, jint n4, jint n5, jint n6)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    Java_com_codename1_impl_ios_IOSImplementation_nativeDrawRectGlobalImpl(n1, n2, n3, n4, n5, n6);
    [pool release];

}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    nativeDrawRoundRectMutable
 * Signature: (IIIIIIII)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_nativeDrawRoundRectMutable
  (JNIEnv * env, jclass cls, jint n1, jint n2, jint n3, jint n4, jint n5, jint n6, jint n7, jint n8)
{
    
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    Java_com_codename1_impl_ios_IOSImplementation_nativeDrawRoundRectMutableImpl(n1, n2, n3, n4, n5, n6, n7, n8);
    [pool release];

}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    nativeDrawRoundRectGlobal
 * Signature: (IIIIIIII)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_nativeDrawRoundRectGlobal
  (JNIEnv *env, jclass cls, jint n1, jint n2, jint n3, jint n4, jint n5, jint n6, jint n7, jint n8)
{
    
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    Java_com_codename1_impl_ios_IOSImplementation_nativeDrawRoundRectGlobalImpl(n1, n2, n3, n4, n5, n6, n7, n8);
    [pool release];
    
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    nativeFillRoundRectMutable
 * Signature: (IIIIIIII)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_nativeFillRoundRectMutable
  (JNIEnv *env, jclass cls, jint n1, jint n2, jint n3, jint n4, jint n5, jint n6, jint n7, jint n8)
{
    
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    Java_com_codename1_impl_ios_IOSImplementation_nativeFillRoundRectMutableImpl(n1, n2, n3, n4, n5, n6, n7, n8);
    [pool release];
    
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    nativeFillRoundRectGlobal
 * Signature: (IIIIIIII)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_nativeFillRoundRectGlobal
  (JNIEnv *env, jclass cls, jint n1, jint n2, jint n3, jint n4, jint n5, jint n6, jint n7, jint n8)
{
   
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    Java_com_codename1_impl_ios_IOSImplementation_nativeFillRoundRectGlobalImpl(n1, n2, n3, n4, n5, n6, n7, n8);
    [pool release];
    
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    nativeFillArcMutable
 * Signature: (IIIIIIII)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_nativeFillArcMutable
  (JNIEnv *env, jclass cls, jint n1, jint n2, jint n3, jint n4, jint n5, jint n6, jint n7, jint n8)
{
    
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    Java_com_codename1_impl_ios_IOSImplementation_nativeFillArcMutableImpl(n1, n2, n3, n4, n5, n6, n7, n8);
    [pool release];
    
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    nativeDrawArcMutable
 * Signature: (IIIIIIII)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_nativeDrawArcMutable
  (JNIEnv *env, jclass cls, jint n1, jint n2, jint n3, jint n4, jint n5, jint n6, jint n7, jint n8)
{
    
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    Java_com_codename1_impl_ios_IOSImplementation_nativeDrawArcMutableImpl(n1, n2, n3, n4, n5, n6, n7, n8);
    [pool release];
   
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    nativeFillArcGlobal
 * Signature: (IIIIIIII)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_nativeFillArcGlobal
  (JNIEnv *env, jclass cls, jint n1, jint n2, jint n3, jint n4, jint n5, jint n6, jint n7, jint n8)
{
   
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    Java_com_codename1_impl_ios_IOSImplementation_nativeFillArcGlobalImpl(n1, n2, n3, n4, n5, n6, n7, n8);
    [pool release];
    
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    nativeDrawArcGlobal
 * Signature: (IIIIIIII)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_nativeDrawArcGlobal
  (JNIEnv *env, jclass cls, jint n1, jint n2, jint n3, jint n4, jint n5, jint n6, jint n7, jint n8)
{
   
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    Java_com_codename1_impl_ios_IOSImplementation_nativeDrawArcGlobalImpl(n1, n2, n3, n4, n5, n6, n7, n8);
    [pool release];
   
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    nativeDrawStringMutable
 * Signature: (IIJLjava/lang/String;II)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_nativeDrawStringMutable
  (JNIEnv *env, jclass cls, jint n1, jint n2, jlong n3, jstring n4, jint n5, jint n6)
{
    
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    const char* chr = (*env)->GetStringUTFChars(env, n4, 0);
    Java_com_codename1_impl_ios_IOSImplementation_nativeDrawStringMutableImpl(n1, n2, n3, chr, strlen(chr), n5, n6);
    (*env)->ReleaseStringUTFChars(env, n4, chr);
    [pool release];
  
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    nativeDrawStringGlobal
 * Signature: (IIJLjava/lang/String;II)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_nativeDrawStringGlobal
  (JNIEnv *env, jclass cls, jint n1, jint n2, jlong n3, jstring n4, jint n5, jint n6)
{
   
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    const char* chr = (*env)->GetStringUTFChars(env, n4, 0);
    Java_com_codename1_impl_ios_IOSImplementation_nativeDrawStringGlobalImpl(n1, n2, n3, chr, strlen(chr), n5, n6);
    (*env)->ReleaseStringUTFChars(env, n4, chr);
    [pool release];
 
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    nativeDrawImageMutable
 * Signature: (JIIIII)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_nativeDrawImageMutable
  (JNIEnv *env, jclass cls, jlong n1, jint alpha, jint n2, jint n3, jint n4, jint n5)
{
    
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    Java_com_codename1_impl_ios_IOSImplementation_nativeDrawImageMutableImpl(n1, alpha, n2, n3, n4, n5);
    [pool release];
   
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    nativeDrawImageGlobal
 * Signature: (JIIIII)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_nativeDrawImageGlobal
  (JNIEnv *env, jclass cls, jlong n1, jint alpha, jint n2, jint n3, jint n4, jint n5)
{
    
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    Java_com_codename1_impl_ios_IOSImplementation_nativeDrawImageGlobalImpl(n1, alpha, n2, n3, n4, n5);
    [pool release];
    
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    nativeTileImageGlobal
 * Signature: (JIIIII)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_nativeTileImageGlobal
  (JNIEnv *env, jclass cls, jlong n1, jint alpha, jint n2, jint n3, jint n4, jint n5)
{
   
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    Java_com_codename1_impl_ios_IOSImplementation_nativeTileImageGlobalImpl(n1, alpha, n2, n3, n4, n5);
    [pool release];
    
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    stringWidthNative
 * Signature: (JLjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_codename1_impl_ios_IOSNative_stringWidthNative
  (JNIEnv *env, jclass cls, jlong n1, jstring n2)
{
    
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    const char* chr = (*env)->GetStringUTFChars(env, n2, 0);
    jint i = Java_com_codename1_impl_ios_IOSImplementation_stringWidthNativeImpl(n1, chr, strlen(chr));
    (*env)->ReleaseStringUTFChars(env, n2, chr);
    [pool release];
    return i;

}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    charWidthNative
 * Signature: (JC)I
 */
JNIEXPORT jint JNICALL Java_com_codename1_impl_ios_IOSNative_charWidthNative
  (JNIEnv *env, jclass cls, jlong n1, jchar n2)
{
    
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    jint i = Java_com_codename1_impl_ios_IOSImplementation_charWidthNativeImpl(n1, n2);
    [pool release];
    return i;
    
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getFontHeightNative
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_codename1_impl_ios_IOSNative_getFontHeightNative
  (JNIEnv *env, jclass cls, jlong n1)
{
    
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    jint i = Java_com_codename1_impl_ios_IOSImplementation_getFontHeightNativeImpl(n1);
    [pool release];
    return i;
   
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    createSystemFont
 * Signature: (III)J
 */
JNIEXPORT jlong JNICALL Java_com_codename1_impl_ios_IOSNative_createSystemFont
  (JNIEnv *env, jclass cls, jint n1, jint n2, jint n3)
{
    
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    jlong i = Java_com_codename1_impl_ios_IOSImplementation_createSystemFontImpl(n1, n2, n3);
    [pool release];
    return i;

}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getResourceSize
 * Signature: (Ljava/lang/String;Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_codename1_impl_ios_IOSNative_getResourceSize
  (JNIEnv *env, jclass cls, jstring n1, jstring n2)
{
        NSLog(@"Getting Resource Size resource");
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    const char* chr = (*env)->GetStringUTFChars(env, n1, 0);
    const char* chr2 = (*env)->GetStringUTFChars(env, n2, 0);
    NSLog(@"Resource %s", chr);
    jint i = getResourceSize(chr, 0, chr2, 0);
    NSLog(@"Size is %li", i);
    (*env)->ReleaseStringUTFChars(env, n1, chr);
    (*env)->ReleaseStringUTFChars(env, n2, chr2);
    [pool release];
    return i;
 
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    loadResource
 * Signature: (Ljava/lang/String;Ljava/lang/String;[B)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_loadResource
  (JNIEnv *env, jclass cls, jstring n1, jstring n2, jbyteArray n3)
{
    NSLog(@"Loading resource");
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    const char* chr = (*env)->GetStringUTFChars(env, n1, 0);
    const char* chr2 = (*env)->GetStringUTFChars(env, n2, 0);
   
    jboolean isCopy = NULL;
    char* data = (*env)->GetByteArrayElements(env, n3, &isCopy);
    loadResourceFile(chr, 0, chr2, 0, data);
    
    (*env)->ReleaseStringUTFChars(env, n1, chr);
    (*env)->ReleaseStringUTFChars(env, n2, chr2);
    (*env)->ReleaseByteArrayElements(env, n3, data, 0);
    [pool release];
   
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    createNativeMutableImage
 * Signature: (III)J
 */
JNIEXPORT jlong JNICALL Java_com_codename1_impl_ios_IOSNative_createNativeMutableImage
  (JNIEnv *env, jclass cls, jint n1, jint n2, jint n3)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    jlong i = Java_com_codename1_impl_ios_IOSImplementation_createNativeMutableImageImpl(n1, n2, n3);
    [pool release];
    return i;
   
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    startDrawingOnImage
 * Signature: (IIJ)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_startDrawingOnImage
  (JNIEnv *env, jclass cls, jint n1, jint n2, jlong n3)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    Java_com_codename1_impl_ios_IOSImplementation_startDrawingOnImageImpl(n1, n2, n3);
    [pool release];
    
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    finishDrawingOnImage
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_com_codename1_impl_ios_IOSNative_finishDrawingOnImage
  (JNIEnv *env, jclass cls)
{
    
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    jlong i = Java_com_codename1_impl_ios_IOSImplementation_finishDrawingOnImageImpl();
    [pool release];
    return i;
    
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    deleteNativePeer
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_deleteNativePeer
  (JNIEnv *env, jclass cls, jlong n1)
{
    
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    Java_com_codename1_impl_ios_IOSImplementation_deleteNativePeerImpl(n1);
    [pool release];
   
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    deleteNativeFontPeer
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_deleteNativeFontPeer
  (JNIEnv *env, jclass cls, jlong n1)
{
    
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    Java_com_codename1_impl_ios_IOSImplementation_deleteNativeFontPeerImpl(n1);
    [pool release];

}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    resetAffineGlobal
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_resetAffineGlobal
  (JNIEnv *env, jclass cls)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    Java_com_codename1_impl_ios_IOSImplementation_resetAffineGlobal();
    [pool release];
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    scaleGlobal
 * Signature: (FF)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_scaleGlobal
  (JNIEnv *env, jclass cls, jfloat x, jfloat y)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    Java_com_codename1_impl_ios_IOSImplementation_scale(x, y);
    [pool release];
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    rotateGlobal
 * Signature: (F)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_rotateGlobal__F
  (JNIEnv *env, jclass cls, jfloat n1)
{
 	// No implementation found in original IOSNative.m 
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    rotateGlobal
 * Signature: (FII)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_rotateGlobal__FII
  (JNIEnv *env, jclass cls, jfloat n1, jint n2, jint n3)
{
 	// No implementation found in original IOSNative.m 
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    shearGlobal
 * Signature: (FF)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_shearGlobal
  (JNIEnv *env, jclass cls, jfloat n1, jfloat n2)
{
 	// No implementation found in original IOSNative.m 
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    fillRectRadialGradientGlobal
 * Signature: (IIIIIIFFF)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_fillRectRadialGradientGlobal
  (JNIEnv *env, jclass cls, jint n1, jint n2, jint n3, jint n4, jint n5, jint n6, jfloat n7, jfloat n8, jfloat n9)
{
 	NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    DrawGradient* d = [[DrawGradient alloc] initWithArgs:1 startColorA:n1 endColorA:n2 xA:n3 yA:n4 widthA:n5 heightA:n6 relativeXA:n7 relativeYA:n8 relativeSizeA:n9];
    [CodenameOne_GLViewController upcoming:d];
    [d release];
    [pool release];
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    fillLinearGradientGlobal
 * Signature: (IIIIIIZ)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_fillLinearGradientGlobal
  (JNIEnv *env, jclass cls, jint n1, jint n2, jint n3, jint n4, jint n5, jint n6, jboolean n7)
{
	NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    int horizontal = 2;
    if(n7) {
        horizontal = 3;
    }
    DrawGradient* d = [[DrawGradient alloc] initWithArgs:horizontal startColorA:n1 endColorA:n2 xA:n3 yA:n4 widthA:n5 heightA:n6 relativeXA:0 relativeYA:0 relativeSizeA:0];
    [CodenameOne_GLViewController upcoming:d];
    [d release];
    [pool release];
}


/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    fillRectRadialGradientMutable
 * Signature: (IIIIIIFFF)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_fillRectRadialGradientMutable
  (JNIEnv *env, jclass cls, jint n1, jint n2, jint n3, jint n4, jint width, jint height, jfloat relativeX, jfloat relativeY, jfloat relativeSize)
{
	NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    
    CGFloat components[8] = { 
        ((float)((n1 & 0xFF0000) >> 16))/255.0, 
        ((float)(n1 & 0xff00 >> 8))/255.0,
        ((float)(n1 & 0xff))/255.0, 
        1.0, 
        ((float)((n2 & 0xFF0000) >> 16))/255.0, 
        ((float)(n2 & 0xff00 >> 8))/255.0,
        ((float)(n2 & 0xff))/255.0, 
        1.0 };
    size_t num_locations = 2;
    CGFloat locations[2] = { 0.0, 1.0 };
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGGradientRef myGradient = CGGradientCreateWithColorComponents (colorSpace, components, locations, num_locations);
    [UIColorFromRGB(n2, 255) set];
    CGContextFillRect(UIGraphicsGetCurrentContext(), CGRectMake(0, 0, width, height));
    CGPoint myCentrePoint = CGPointMake(relativeX * width, relativeY * height);
    float myRadius = MIN(width, height) * relativeSize;
    CGContextDrawRadialGradient (UIGraphicsGetCurrentContext(), myGradient, myCentrePoint,
                                 0, myCentrePoint, myRadius,
                                 kCGGradientDrawsAfterEndLocation);
    CGColorSpaceRelease(colorSpace);
    [pool release];
}


/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    fillLinearGradientMutable
 * Signature: (IIIIIIZ)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_fillLinearGradientMutable
  (JNIEnv *env, jclass cls, jint n1, jint n2, jint n3, jint n4, jint width, jint height, jboolean n7)
{
	NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    CGFloat components[8] = { 
        ((float)((n1 & 0xFF0000) >> 16))/255.0, 
        ((float)(n1 & 0xff00 >> 8))/255.0,
        ((float)(n1 & 0xff))/255.0, 
        1.0, 
        ((float)((n2 & 0xFF0000) >> 16))/255.0, 
        ((float)(n2 & 0xff00 >> 8))/255.0,
        ((float)(n2 & 0xff))/255.0, 
        1.0 };
    size_t num_locations = 2;
    CGFloat locations[2] = { 0.0, 1.0 };
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGGradientRef myGradient = CGGradientCreateWithColorComponents (colorSpace, components, locations, num_locations);
    
    if(n7) {
        CGContextDrawLinearGradient(UIGraphicsGetCurrentContext(), myGradient, 
                                    CGPointMake(0, 0), CGPointMake(0, width), kCGGradientDrawsBeforeStartLocation | kCGGradientDrawsAfterEndLocation);
    } else {
        CGContextDrawLinearGradient(UIGraphicsGetCurrentContext(), myGradient, 
                                    CGPointMake(0, 0), CGPointMake(height, 0), kCGGradientDrawsBeforeStartLocation | kCGGradientDrawsAfterEndLocation);                        
    }
    CGColorSpaceRelease(colorSpace);
    [pool release];
}


/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    isTablet
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_codename1_impl_ios_IOSNative_isTablet
  (JNIEnv *env, jclass cls)
{
   
    return isIPad();
    
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    setImageName
 * Signature: (JLjava/lang/String;)V
 *
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_setImageName
  (JNIEnv *env, jclass cls, jlong nativeImage, jstring name)
{
    if ( name == NULL ) return;
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    const char* chrs = (*env)->GetStringUTFChars(env, name, 0);
    Java_com_codename1_impl_ios_IOSImplementation_setImageName(nativeImage, chrs);
    (*env)->ReleaseStringUTFChars(env, name, chrs);
    [pool release];    
}
/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    execute
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_execute
  (JNIEnv *env, jclass cls, jstring n1)
{
        const char* chrs = (*env)->GetStringUTFChars(env, n1, 0);
    NSString* ns = [NSString stringWithUTF8String:chrs];
    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:ns]];
    (*env)->ReleaseStringUTFChars(env, n1, chrs);
   }

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    flashBacklight
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_flashBacklight
  (JNIEnv *env, jclass cls, jint n1)
{
   
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    isMinimized
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_codename1_impl_ios_IOSNative_isMinimized
  (JNIEnv *env, jclass cls)
{
        return false;

}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    minimizeApplication
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_codename1_impl_ios_IOSNative_minimizeApplication
  (JNIEnv *env, jclass cls)
{
    return 0;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    restoreMinimizedApplication
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_restoreMinimizedApplication
  (JNIEnv *env, jclass cls)
{
 
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    lockOrientation
 * Signature: (Z)V
 */
 extern int orientationLock;
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_lockOrientation
  (JNIEnv *env, jclass cls, jboolean n1)
{
    
    if(n1) {
        orientationLock = 1;
    } else {
        orientationLock = 2;
    }

}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    vibrate
 * Signature: (I)V
 */
extern void vibrateDevice();
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_vibrate
  (JNIEnv *env, jclass cls, jint n1)
{
    vibrateDevice();
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getAudioDuration
 * Signature: (J)I
 */
int com_codename1_impl_ios_IOSNative_getAudioDuration = 0;
JNIEXPORT jint JNICALL Java_com_codename1_impl_ios_IOSNative_getAudioDuration
  (JNIEnv *env, jclass cls, jlong peer)
{
    __block AudioPlayer* pl = (AudioPlayer*)peer;
    dispatch_sync(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        
        com_codename1_impl_ios_IOSNative_getAudioDuration = [pl getAudioDuration];
        [pool release];
    });
    return com_codename1_impl_ios_IOSNative_getAudioDuration;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    playAudio
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_playAudio
  (JNIEnv *env, jclass cls, jlong peer)
{
    __block AudioPlayer* pl = (AudioPlayer*)peer;
    dispatch_async(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        
        [pl playAudio];
        [pool release];
    });
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getAudioTime
 * Signature: (J)I
 */

int com_codename1_impl_ios_IOSNative_getAudioTime = 0;
JNIEXPORT jint JNICALL Java_com_codename1_impl_ios_IOSNative_getAudioTime
  (JNIEnv *env, jclass cls, jlong peer)
{
    __block AudioPlayer* pl = (AudioPlayer*)peer;
    dispatch_sync(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        
        com_codename1_impl_ios_IOSNative_getAudioTime = [pl getAudioTime];
        [pool release];
    });
    return com_codename1_impl_ios_IOSNative_getAudioTime;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    pauseAudio
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_pauseAudio
  (JNIEnv *env, jclass cls, jlong peer)
{
    __block AudioPlayer* pl = (AudioPlayer*)peer;
    dispatch_async(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
       
        [pl pauseAudio];
        [pool release];
    });
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    setAudioTime
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_setAudioTime
  (JNIEnv *env, jclass cls, jlong peer, jint time)
{
    __block AudioPlayer* pl = (AudioPlayer*)peer;
    __block int iTime = time;
    dispatch_async(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        
        [pl setAudioTime:iTime];
        [pool release];
    });
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    isAudioPlaying
 * Signature: (J)Z
 */
int com_codename1_impl_ios_IOSNative_isAudioPlaying = 0;
JNIEXPORT jboolean JNICALL Java_com_codename1_impl_ios_IOSNative_isAudioPlaying
  (JNIEnv *env, jclass cls, jlong peer)
{
    __block AudioPlayer* pl = (AudioPlayer*)peer;
    dispatch_sync(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        
        com_codename1_impl_ios_IOSNative_isAudioPlaying = [pl isPlaying];
        [pool release];
    });
    return com_codename1_impl_ios_IOSNative_isAudioPlaying;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    cleanupAudio
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_cleanupAudio
  (JNIEnv *env, jclass cls, jlong peer)
{
    __block AudioPlayer* pl = (AudioPlayer*)peer;
    dispatch_async(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        
        [pl release];
        [pool release];
    });
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    createAudio
 * Signature: (Ljava/lang/String;Ljava/lang/Runnable;)J
 */
void* com_codename1_impl_ios_IOSNative_createAudio=0;
JNIEXPORT jlong JNICALL Java_com_codename1_impl_ios_IOSNative_createAudio__Ljava_lang_String_2Ljava_lang_Runnable_2
  (JNIEnv *env, jclass cls, jstring uri, jobject onCompletion)
{
    const char* chrs = (*env)->GetStringUTFChars(env, uri, 0);
    __block NSString* ns = [NSString stringWithUTF8String:chrs];
    dispatch_sync(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        
        com_codename1_impl_ios_IOSNative_createAudio = [[AudioPlayer alloc] initWithURL:uri callback:onCompletion];
        
        [pool release];
    });
    (*env)->ReleaseStringUTFChars(env, uri, chrs);
    return (jlong)com_codename1_impl_ios_IOSNative_createAudio;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    createAudio
 * Signature: ([BLjava/lang/Runnable;)J
 */

JNIEXPORT jlong JNICALL Java_com_codename1_impl_ios_IOSNative_createAudio___3BLjava_lang_Runnable_2
  (JNIEnv *env, jclass cls, jbyteArray b, jobject onCompletion)
{
    (*env)->NewGlobalRef(env, b);
    char* data = (*env)->GetByteArrayElements(env, b, 0);
    
    __block NSData* d = [NSData dataWithBytes:data length:(*env)->GetArrayLength(env, b)];
    dispatch_sync(dispatch_get_main_queue(), ^{
        [CodenameOne_GLAppDelegate jniEnv];
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
       
        com_codename1_impl_ios_IOSNative_createAudio = [[AudioPlayer alloc] initWithNSData:d callback:onCompletion];
        
        [pool release];
    });
    (*env)->ReleaseByteArrayElements(env, b, data, 0);
    (*env)->DeleteGlobalRef(env, b);
    return com_codename1_impl_ios_IOSNative_createAudio;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getVolume
 * Signature: ()F
 */
JNIEXPORT jfloat JNICALL Java_com_codename1_impl_ios_IOSNative_getVolume
  (JNIEnv *env, jclass cls)
{
    return [AudioPlayer getVolume];    
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    setVolume
 * Signature: (F)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_setVolume
  (JNIEnv *env, jclass cls, jfloat vol)
{
    [AudioPlayer setVolume:vol];    
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    calcPreferredSize
 * Signature: (JII[I)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_calcPreferredSize
  (JNIEnv *env, jclass cls, jlong peer, jint w, jint h, jintArray response)
{
    __block UIView* v = (UIView*)peer;
    __block CGSize s = [v sizeThatFits:CGSizeMake(w, h)];
    __block int* data = (*env)->GetIntArrayElements(env, response, 0);
    dispatch_async(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        
        
        
        data[0] = (int)s.width;
        data[1] = (int)s.height;
        
        [pool release];
    });
    (*env)->ReleaseIntArrayElements(env, response, data, 0);
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    updatePeerPositionSize
 * Signature: (JIIII)V
 */
extern float scaleValue;
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_updatePeerPositionSize
  (JNIEnv *env, jclass cls, jlong peer, jint x, jint y, jint w, jint h)
{
    __block float scale = scaleValue;
    __block float xpos = x / scale;
    __block float ypos = y / scale;
    __block float wpos = w / scale;
    __block float hpos = h / scale;
    dispatch_async(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        UIView* v = (UIView*)peer;
        
        [v setFrame:CGRectMake(xpos, ypos, wpos, hpos)];
        [v setNeedsDisplay]; 
        [pool release];    
    });
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    peerInitialized
 * Signature: (JIIII)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_peerInitialized
  (JNIEnv *env, jclass cls, jlong peer, jint x, jint y, jint w, jint h)
{
    __block float scale = scaleValue;
    __block float xpos = x / scale;
    __block float ypos = y / scale;
    __block float wpos = w / scale;
    __block float hpos = h / scale;
    dispatch_async(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        UIView* v = (UIView*)peer;
        if([v superview] == nil) {
            [[CodenameOne_GLViewController instance].view addSubview:v];
        }
        if(w > 0 && h > 0) {
            
            [v setFrame:CGRectMake(xpos, ypos, wpos, hpos)];
            [v setNeedsDisplay]; 
        } else {
            [v setFrame:CGRectMake(3000, 0, 300, 300)];
        }
        [pool release];    
    });
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    peerDeinitialized
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_peerDeinitialized
  (JNIEnv *env, jclass cls, jlong peer)
{
    dispatch_async(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        UIView* v = (UIView*)peer;
        if(v.superview != nil) {
            [v removeFromSuperview];
            repaintUI();
        } 
        [pool release];    
    });
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    peerSetVisible
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_peerSetVisible
  (JNIEnv *env, jclass cls, jlong peer, jboolean b)
{
    dispatch_async(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        UIView* v = (UIView*)peer;
        if(!b) {
            if([v superview] != nil) {
                [v removeFromSuperview];
            }
        } else {
            if([v superview] == nil) {
                [[CodenameOne_GLViewController instance].view addSubview:v];
            }
        }
        [pool release];    
    });
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    releasePeer
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_releasePeer
  (JNIEnv *env, jclass cls, jlong peer)
{
    dispatch_sync(dispatch_get_main_queue(), ^{
        NSObject* o = (NSObject*)peer;
        [o release];
    });
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    retainPeer
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_retainPeer
  (JNIEnv *env, jclass cls, jlong peer)
{
    dispatch_sync(dispatch_get_main_queue(), ^{
        NSObject* o = (NSObject*)peer;
        [o retain];
    });
}

void repaintUI() {
    JNIEnv *env = [CodenameOne_GLAppDelegate jniEnv];
    jclass Display = (*env)->FindClass(env, "com/codename1/ui/Display");
    jmethodID getInstance = (*env)->GetStaticMethodID(env, Display, "getInstance", "()V)");
    
    jobject d = (*env)->CallStaticObjectMethod(env, Display, getInstance);
    jclass Component = (*env)->FindClass(env, "com/codename1/ui/Component");
    jmethodID getCurrent = (*env)->GetMethodID(env, Display, "getCurrent", "()Lcom/codename1/ui/Form;");
    jobject f = (*env)->CallObjectMethod(env, d, getCurrent);
    jmethodID repaint = (*env)->GetMethodID(env, Component, "repaint", "()V");
    (*env)->CallVoidMethod(env, f, repaint);
    
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    createBrowserComponent
 * Signature: (Ljava/lang/Object;)J
 */
UIWebView* com_codename1_impl_ios_IOSNative_createBrowserComponent = nil;
JNIEXPORT jlong JNICALL Java_com_codename1_impl_ios_IOSNative_createBrowserComponent
  (JNIEnv *env, jclass cls, jobject obj)
{
	// TODO:  We need to figure out how to pass the Runnable callback object as a callback
	// to the webview.  I suspect that XMLVM does something special to convert Runnables
	// to something callable, but this probably won't work in JNI
	
    dispatch_sync(dispatch_get_main_queue(), ^{
        com_codename1_impl_ios_IOSNative_createBrowserComponent = [[UIWebView alloc] initWithFrame:CGRectMake(3000, 0, 200, 200)];
        com_codename1_impl_ios_IOSNative_createBrowserComponent.backgroundColor = [UIColor whiteColor];
        com_codename1_impl_ios_IOSNative_createBrowserComponent.autoresizesSubviews = YES;
        UIWebViewEventDelegate *del = [[UIWebViewEventDelegate alloc] initWithCallback:obj];
        com_codename1_impl_ios_IOSNative_createBrowserComponent.delegate = del;
        com_codename1_impl_ios_IOSNative_createBrowserComponent.autoresizingMask=(UIViewAutoresizingFlexibleHeight | UIViewAutoresizingFlexibleWidth);
        [com_codename1_impl_ios_IOSNative_createBrowserComponent setAllowsInlineMediaPlayback:YES];
        [com_codename1_impl_ios_IOSNative_createBrowserComponent retain];
    });
    UIWebView* r = com_codename1_impl_ios_IOSNative_createBrowserComponent;
    com_codename1_impl_ios_IOSNative_createBrowserComponent = nil;
    return r;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    setBrowserPage
 * Signature: (JLjava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_setBrowserPage
  (JNIEnv *env, jclass cls, jlong peer, jstring html, jstring baseUrl)
{
	__block UIWebView* w = (UIWebView*)peer;
	__block NSString* htmlStr = toNSString(env, html);
    dispatch_sync(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        
        //[w loadHTMLString:toNSString(html) baseURL:toNSString(baseUrl)];
        
        // passing anything other than nil crashes the app, no idea why???
        [w loadHTMLString:htmlStr baseURL:nil];
        [pool release];
    });
}
NSString* toNSString(JNIEnv *env, jstring str) {
    if(str == 0) {
        return 0;
    }
    const char* chrs = (*env)->GetStringUTFChars(env, str, 0);
    NSString *str2 = [NSString stringWithUTF8String:chrs];
    (*env)->ReleaseStringUTFChars(env, str, chrs);
    return str2;
}

jstring fromNSString(JNIEnv *env,  NSString *str){
	return (*env)->NewStringUTF(env, str.UTF8String);
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    setBrowserURL
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_setBrowserURL
  (JNIEnv *env, jclass cls, jlong peer, jstring url)
{

	__block UIWebView* w = (UIWebView*)peer;
	__block NSString *str = toNSString(env, url);
    dispatch_sync(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        
        
        NSURL* nu = [NSURL URLWithString:str];
        NSURLRequest* r = [NSURLRequest requestWithURL:nu];
        [w loadRequest:r];
        [pool release];
    });
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    browserBack
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_browserBack
  (JNIEnv *env, jclass cls, jlong peer)
{
	__block UIWebView* w = (UIWebView*)peer;
    dispatch_sync(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        
        [w goBack];
        [pool release];
    });
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    browserStop
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_browserStop
  (JNIEnv *env, jclass cls, jlong peer)
{

	__block UIWebView* w = (UIWebView*)peer;
    dispatch_sync(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        
        [w stopLoading];
        [pool release];
    });
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    browserClearHistory
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_browserClearHistory
  (JNIEnv *env, jclass cls, jlong peer){}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    browserExecute
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_browserExecute
  (JNIEnv *env, jclass cls, jlong peer, jstring javascript)
{
	__block UIWebView* w = (UIWebView*)peer;
	__block NSString *js = toNSString(env, javascript);
    dispatch_sync(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        
        [w stringByEvaluatingJavaScriptFromString:js];
        [pool release];
    });
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    browserForward
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_browserForward
  (JNIEnv *env, jclass cls, jlong peer)
{
	__block UIWebView* w = (UIWebView*)peer;
    dispatch_sync(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        
        [w goForward];
        [pool release];
    });
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    browserHasBack
 * Signature: (J)Z
 */
jboolean booleanResponse = 0;
JNIEXPORT jboolean JNICALL Java_com_codename1_impl_ios_IOSNative_browserHasBack
  (JNIEnv *env, jclass cls, jlong peer)
{
	__block UIWebView* w = (UIWebView*)peer;
    dispatch_sync(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        
        booleanResponse = [w canGoBack];
        [pool release];
    });
    return booleanResponse;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    browserHasForward
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_com_codename1_impl_ios_IOSNative_browserHasForward
  (JNIEnv *env, jclass cls, jlong peer)
{
	__block UIWebView* w = (UIWebView*)peer;
    dispatch_sync(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        
        booleanResponse = [w canGoForward];
        [pool release];
    });
    return booleanResponse;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    browserReload
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_browserReload
  (JNIEnv *env, jclass cls, jlong peer)
{
	__block UIWebView* w = (UIWebView*)peer;
    dispatch_sync(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        [w reload];
        [pool release];
    });
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getBrowserTitle
 * Signature: (J)Ljava/lang/String;
 */
jstring returnString = NULL;
JNIEXPORT jstring JNICALL Java_com_codename1_impl_ios_IOSNative_getBrowserTitle
  (JNIEnv *env, jclass cls, jlong peer)
{
	// NOTE: We need to make sure that we don't use any JNI variables
	// outside of the thread where the JNIEnvironment was obtained.
	__block NSString* theTitle = Nil;
	__block UIWebView* w = (UIWebView*)peer;
    dispatch_sync(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        theTitle = [w stringByEvaluatingJavaScriptFromString:@"document.title"];
        returnString = (*env)->NewStringUTF(env, theTitle.UTF8String);
        [pool release];
    });
    
    return returnString;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getBrowserURL
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_codename1_impl_ios_IOSNative_getBrowserURL
  (JNIEnv *env, jclass cls, jlong peer)
{
	__block UIWebView* w = (UIWebView*)peer;
	
    dispatch_sync(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        
        returnString = (*env)->NewStringUTF(env, w.request.URL.absoluteString.UTF8String);
        [pool release];
    });
    return returnString;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    createVideoComponent
 * Signature: (Ljava/lang/String;)J
 */
MPMoviePlayerController* moviePlayerInstance;
JNIEXPORT jlong JNICALL Java_com_codename1_impl_ios_IOSNative_createVideoComponent__Ljava_lang_String_2
  (JNIEnv *env, jclass cls, jstring str)
{
	__block NSURL* u = [NSURL URLWithString:toNSString(env, str)];
	dispatch_sync(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        
        moviePlayerInstance = [[MPMoviePlayerController alloc] initWithContentURL:u];
        [pool release];
    });
    MPMoviePlayerController* mp = moviePlayerInstance;
    moviePlayerInstance = nil;
    return mp;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    createVideoComponent
 * Signature: ([B)J
 */
JNIEXPORT jlong JNICALL Java_com_codename1_impl_ios_IOSNative_createVideoComponent___3B
  (JNIEnv *env, jclass cls, jbyteArray dataObject)
{
	
	char *data = (*env)->GetByteArrayElements(env, dataObject, 0);
	int len = (*env)->GetArrayLength(env, dataObject);
	__block NSData* d = [NSData dataWithBytes:data length:len];
	
    dispatch_sync(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        
        
        NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
        NSString *documentsDirectory = [paths objectAtIndex:0];
        NSString *path = [documentsDirectory stringByAppendingPathComponent:@"temp_movie.mp4"];
        
        [d writeToFile:path atomically:YES];
        NSURL *u = [NSURL fileURLWithPath:path];        
        
        moviePlayerInstance = [[MPMoviePlayerController alloc] initWithContentURL:u];
        moviePlayerInstance.useApplicationAudioSession = NO;
        [moviePlayerInstance retain];
        [moviePlayerInstance prepareToPlay];
        [moviePlayerInstance play];
        [pool release];
    });
    MPMoviePlayerController* mp = moviePlayerInstance;
    moviePlayerInstance = nil;
    (*env)->ReleaseByteArrayElements(env, dataObject, data, 0);
    return mp;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    startVideoComponent
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_startVideoComponent
  (JNIEnv *env, jclass cls, jlong peer)
{
	__block MPMoviePlayerController* m = (MPMoviePlayerController*) peer;
    dispatch_sync(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        
        [m play];
        [pool release];
    });
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    stopVideoComponent
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_stopVideoComponent
  (JNIEnv *env, jclass cls, jlong peer)
{
	__block MPMoviePlayerController* m = (MPMoviePlayerController*) peer;
    dispatch_sync(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        
        [m stop];
        [pool release];
    });
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getMediaTimeMS
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_codename1_impl_ios_IOSNative_getMediaTimeMS
  (JNIEnv *env, jclass cls, jlong peer)
{
    // unsupported by API for some reason???
    return 0;
}
  

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    setMediaTimeMS
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_com_codename1_impl_ios_IOSNative_setMediaTimeMS
  (JNIEnv *env, jclass cls, jlong peer, jint time)
{
    // unsupported by API for some reason???
    return 0;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getMediaDuration
 * Signature: (J)I
 */
int responseGetMediaDuration = 0;
JNIEXPORT jint JNICALL Java_com_codename1_impl_ios_IOSNative_getMediaDuration
  (JNIEnv *env, jclass cls, jlong peer)
{
	__block MPMoviePlayerController* m = (MPMoviePlayerController*) peer;
    dispatch_sync(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        
        responseGetMediaDuration = (int)m.duration * 1000;
        [pool release];
    });
    return responseGetMediaDuration;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    isVideoPlaying
 * Signature: (J)Z
 */
int responseIsVideoPlaying = 0;
JNIEXPORT jboolean JNICALL Java_com_codename1_impl_ios_IOSNative_isVideoPlaying
  (JNIEnv *env, jclass cls, jlong peer)
{
	__block MPMoviePlayerController* m = (MPMoviePlayerController*) peer;
    dispatch_sync(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        
        responseIsVideoPlaying = m.playbackState == MPMoviePlaybackStatePlaying;
        [pool release];
    });
    return responseIsVideoPlaying;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    setVideoFullScreen
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_setVideoFullScreen
  (JNIEnv *env, jclass cls, jlong peer, jboolean fullscreen)
{
	__block MPMoviePlayerController* m = (MPMoviePlayerController*) peer;
	__block int iFullscreen = fullscreen;
    dispatch_sync(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        
        [m setFullscreen:iFullscreen];
        [pool release];
    });
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    isVideoFullScreen
 * Signature: (J)Z
 */
responseIsVideoFullScreen = 0;
JNIEXPORT jboolean JNICALL Java_com_codename1_impl_ios_IOSNative_isVideoFullScreen
  (JNIEnv *env, jclass cls, jlong peer)
{
    responseIsVideoFullScreen = 0;
    __block MPMoviePlayerController* m = (MPMoviePlayerController*) peer;
    dispatch_sync(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        
        responseIsVideoFullScreen = [m isFullscreen];
        [pool release];
    });
    return responseIsVideoFullScreen;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getVideoViewPeer
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_codename1_impl_ios_IOSNative_getVideoViewPeer
  (JNIEnv *env, jclass cls, jlong peer)
{
    MPMoviePlayerController* m = (MPMoviePlayerController*) peer;
    return m.view;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    showNativePlayerController
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_showNativePlayerController
  (JNIEnv *env, jclass cls, jlong peer)
{
	__block MPMoviePlayerController* m = (MPMoviePlayerController*) peer;
    dispatch_sync(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
       
        [[CodenameOne_GLViewController instance] presentModalViewController:m animated:YES];
        [pool release];
    });
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    writeToFile
 * Signature: ([BLjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_codename1_impl_ios_IOSNative_writeToFile
  (JNIEnv *env, jclass cls, jbyteArray n1, jstring path)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    const char* chrs = (*env)->GetStringUTFChars(env, path, 0);
    NSString* ns = [NSString stringWithUTF8String:chrs];
    char* data = (*env)->GetByteArrayElements(env, n1, 0);  
    int len = (*env)->GetArrayLength(env, n1);
    
    NSData* d = [NSData dataWithBytes:data length:len];
    [d writeToFile:ns atomically:YES];
    [pool release];
    (*env)->ReleaseByteArrayElements(env, n1, data, 0);
    (*env)->ReleaseStringUTFChars(env, path, chrs);
    return 0;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getFileSize
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_codename1_impl_ios_IOSNative_getFileSize
  (JNIEnv *env, jclass cls, jstring path)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    const char* chrs = (*env)->GetStringUTFChars(env, path, 0);
    
    NSString* ns = [NSString stringWithUTF8String:chrs];
    NSFileManager *man = [[NSFileManager alloc] init];
    NSError *error = nil;
    NSDictionary *attrs = [man attributesOfItemAtPath:ns error:&error];
    if(error != nil) {  
        NSLog(@"Error getFileSize: %@", [error localizedDescription]);        
    }
    UInt32 result = [attrs fileSize];
    [man release];
    [pool release];
    (*env)->ReleaseStringUTFChars(env, path, chrs);
    return result;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    readFile
 * Signature: (Ljava/lang/String;[B)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_readFile
  (JNIEnv *env, jclass cls, jstring path, jbyteArray n1)
 {
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    const char* chrs = (*env)->GetStringUTFChars(env, path, 0);
    NSString* ns = [NSString stringWithUTF8String:chrs];
    NSData* d = [NSData dataWithContentsOfFile:ns];
   
    char* data = (*env)->GetByteArrayElements(env, n1, 0);
        
    memcpy(data, d.bytes, d.length);
    
    [pool release];
    (*env)->ReleaseStringUTFChars(env, path, chrs);
    (*env)->ReleaseByteArrayElements(env, n1, data, 0);
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getDocumentsDir
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_codename1_impl_ios_IOSNative_getDocumentsDir
  (JNIEnv *env, jclass cls)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NSArray *writablePaths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    NSString *documentsPath = [writablePaths lastObject];    
    jstring str = (*env)->NewStringUTF(env,documentsPath.UTF8String);
    [pool release];
    return str;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getCachesDir
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_codename1_impl_ios_IOSNative_getCachesDir
  (JNIEnv *env, jclass cls)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NSArray *writablePaths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);
    NSString *documentsPath = [writablePaths lastObject];    
    jstring str = (*env)->NewStringUTF(env, documentsPath.UTF8String);
    [pool release];
    return str;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getResourcesDir
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_codename1_impl_ios_IOSNative_getResourcesDir
  (JNIEnv *env, jclass cls)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NSBundle *bundle = [NSBundle mainBundle];
    NSString *bundlePath = [bundle bundlePath];
    jstring str = (*env)->NewStringUTF(env, bundlePath.UTF8String);
    [pool release];
    return str;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    deleteFile
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_deleteFile
  (JNIEnv *env, jclass cls, jstring file)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NSFileManager* fm = [[NSFileManager alloc] init];
    const char* chrs = (*env)->GetStringUTFChars(env, file, 0);
    NSString* ns = [NSString stringWithUTF8String:chrs];
    NSError *error = nil;
    [fm removeItemAtPath:ns error:&error];
    if(error != nil) {  
        NSLog(@"Error in deleteFile: %@", [error localizedDescription]);        
    }
    [fm release];
    [pool release];
    (*env)->ReleaseStringUTFChars(env, file, chrs);
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    fileExists
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_codename1_impl_ios_IOSNative_fileExists
  (JNIEnv *env, jclass cls, jstring file)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NSFileManager* fm = [[NSFileManager alloc] init];
    const char* chrs = (*env)->GetStringUTFChars(env, file, 0);
    NSString* ns = [NSString stringWithUTF8String:chrs];
    jboolean b = [fm fileExistsAtPath:ns];
    [fm release];
    [pool release];
    (*env)->ReleaseStringUTFChars(env, file, chrs);
    return b;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    isDirectory
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_codename1_impl_ios_IOSNative_isDirectory
  (JNIEnv *env, jclass cls, jstring file)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NSFileManager* fm = [[NSFileManager alloc] init];
    const char* chrs = (*env)->GetStringUTFChars(env, file, 0);
    NSString* ns = [NSString stringWithUTF8String:chrs];
    BOOL b = NO;
    BOOL* isDir = (&b);
    [fm fileExistsAtPath:ns isDirectory:isDir];
    [fm release];
    [pool release];
    (*env)->ReleaseStringUTFChars(env, file, chrs);
    return b;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    fileCountInDir
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_codename1_impl_ios_IOSNative_fileCountInDir
  (JNIEnv *env, jclass cls, jstring dir)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NSFileManager* fm = [[NSFileManager alloc] init];
    const char* chrs = (*env)->GetStringUTFChars(env, dir, 0);
    NSString* ns = [NSString stringWithUTF8String:chrs];
    NSError *error = nil;
    NSArray* nsArr = [fm contentsOfDirectoryAtPath:ns error:&error];
    if(error != nil) {  
        NSLog(@"Error in recording: %@", [error localizedDescription]);        
    }
    int i = nsArr.count;
    [fm release];
    [pool release];
    (*env)->ReleaseStringUTFChars(env, dir, chrs);
    return i;   
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    listFilesInDir
 * Signature: (Ljava/lang/String;[Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_listFilesInDir
  (JNIEnv *env, jclass cls, jstring dir, jobjectArray files)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NSFileManager* fm = [[NSFileManager alloc] init];
    const char* chrs = (*env)->GetStringUTFChars(env, dir, 0);
    NSString* ns = [NSString stringWithUTF8String:chrs];
    NSError *error = nil;
    NSArray* nsArr = [fm contentsOfDirectoryAtPath:ns error:&error];
    if(error != nil) {  
        NSLog(@"Error in listing files: %@", [error localizedDescription]);        
    }
    
    
    int count = nsArr.count;
    for(int iter = 0 ; iter < count ; iter++) {
        NSString* currentString = [nsArr objectAtIndex:iter];
        jstring str = (*env)->NewStringUTF(env, currentString.UTF8String);
        (*env)->SetObjectArrayElement(env, files, iter, str);
        
    }
    [fm release];
    [pool release];
    (*env)->ReleaseStringUTFChars(env, dir, chrs);
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    createDirectory
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_createDirectory
  (JNIEnv *env, jclass cls, jstring dir)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NSFileManager* fm = [[NSFileManager alloc] init];
    const char* chrs = (*env)->GetStringUTFChars(env, dir, 0);
    NSString* ns = [NSString stringWithUTF8String:chrs];
    [fm createDirectoryAtPath:ns attributes:nil];
    [fm release];
    [pool release];
    (*env)->ReleaseStringUTFChars(env, dir, chrs);
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    moveFile
 * Signature: (Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_moveFile
  (JNIEnv *env, jclass cls, jstring src, jstring dest)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NSFileManager* fm = [[NSFileManager alloc] init];
    const char* chrs = (*env)->GetStringUTFChars(env, src, 0);
    NSString* nsSrc = [NSString stringWithUTF8String:chrs];
    const char* chrsDest = (*env)->GetStringUTFChars(env, dest, 0);
    NSString* nsDst = [NSString stringWithUTF8String:chrsDest];
    NSError *error = nil;
    [fm moveItemAtPath:nsSrc toPath:nsDst error:&error];
    if(error != nil) {  
        NSLog(@"Error in moving file: %@", [error localizedDescription]);        
    }
    [fm release];
    [pool release]; 
    (*env)->ReleaseStringUTFChars(env, src, chrs);
    (*env)->ReleaseStringUTFChars(env, dest, chrsDest); 
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    openConnection
 * Signature: (Ljava/lang/String;I)J
 */
JNIEXPORT jlong JNICALL Java_com_codename1_impl_ios_IOSNative_openConnection
  (JNIEnv *env, jclass cls, jstring url, jint timeout)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NetworkConnectionImpl* impl = [[NetworkConnectionImpl alloc] init];
    const char* chrs = (*env)->GetStringUTFChars(env, url, 0);
    NSString* nsSrc = [NSString stringWithUTF8String:chrs];
    void* response = [impl openConnection:nsSrc timeout:timeout];
    [pool release]; 
    (*env)->ReleaseStringUTFChars(env, url, chrs);   
    return response;
}


/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    connect
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_connect
  (JNIEnv *env, jclass cls, jlong peer)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NetworkConnectionImpl* impl = (NetworkConnectionImpl*)peer;
    [impl connect];
    [pool release];    
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    setMethod
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_setMethod
  (JNIEnv *env, jclass cls, jlong peer, jstring mtd)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NetworkConnectionImpl* impl = (NetworkConnectionImpl*)peer;
    const char* chrs = (*env)->GetStringUTFChars(env, mtd, 0);
    NSString* nsSrc = [NSString stringWithUTF8String:chrs];
    [impl setMethod:nsSrc];
    [pool release];  
    (*env)->ReleaseStringUTFChars(env, mtd, chrs);  
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getResponseCode
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_codename1_impl_ios_IOSNative_getResponseCode
  (JNIEnv *env, jclass cls, jlong peer)
{
    NetworkConnectionImpl* impl = (NetworkConnectionImpl*)peer;
    return [impl getResponseCode];
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getResponseMessage
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_codename1_impl_ios_IOSNative_getResponseMessage
  (JNIEnv *env, jclass cls, jlong peer)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NetworkConnectionImpl* impl = (NetworkConnectionImpl*)peer;
    jstring str = (*env)->NewStringUTF(env, [impl getResponseMessage].UTF8String);
    [pool release];    
    return str;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getContentLength
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_codename1_impl_ios_IOSNative_getContentLength
  (JNIEnv *env, jclass cls, jlong peer)
{
    NetworkConnectionImpl* impl = (NetworkConnectionImpl*)peer;
    return [impl getContentLength];
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getResponseHeader
 * Signature: (JLjava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_codename1_impl_ios_IOSNative_getResponseHeader
  (JNIEnv *env, jclass cls, jlong peer, jstring name)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NetworkConnectionImpl* impl = (NetworkConnectionImpl*)peer;
    const char* chrs = (*env)->GetStringUTFChars(env, name, 0);
    NSString* nsSrc = [NSString stringWithUTF8String:chrs];
    jstring str = fromNSString(env, [impl getResponseHeader:nsSrc]);
    [pool release]; 
    (*env)->ReleaseStringUTFChars(env, name, chrs);   
    return str;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getResponseHeaderCount
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_codename1_impl_ios_IOSNative_getResponseHeaderCount
  (JNIEnv *env, jclass cls, jlong peer)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NetworkConnectionImpl* impl = (NetworkConnectionImpl*)peer;
    jint i = [impl getResponseHeaderCount];
    [pool release];    
    return i;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getResponseHeaderName
 * Signature: (JI)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_codename1_impl_ios_IOSNative_getResponseHeaderName
  (JNIEnv *env, jclass cls, jlong peer, jint offset)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NetworkConnectionImpl* impl = (NetworkConnectionImpl*)peer;
    jstring j = fromNSString(env, [impl getResponseHeaderName:offset]);
    [pool release];    
    return j;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    addHeader
 * Signature: (JLjava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_addHeader
  (JNIEnv *env, jclass cls, jlong peer, jstring key, jstring value)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NetworkConnectionImpl* impl = (NetworkConnectionImpl*)peer;
    const char* chrs = (*env)->GetStringUTFChars(env, key, 0);
    NSString* nsKey = [NSString stringWithUTF8String:chrs];
    (*env)->ReleaseStringUTFChars(env, key, chrs);
    chrs = (*env)->GetStringUTFChars(env, value, 0);
    NSString* nsValue = [NSString stringWithUTF8String:chrs];
    (*env)->ReleaseStringUTFChars(env, key, chrs);
    [impl addHeader:nsKey value:nsValue];
    [pool release];    
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    setBody
 * Signature: (J[B)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_setBody
  (JNIEnv *env, jclass cls, jlong peer, jbyteArray arr)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NetworkConnectionImpl* impl = (NetworkConnectionImpl*)peer;
    char* data = (*env)->GetByteArrayElements(env, arr, 0);
    
    [impl setBody:data size:(*env)->GetArrayLength(env, arr)];
    [pool release];    
    (*env)->ReleaseByteArrayElements(env, arr, data, 0);
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    closeConnection
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_closeConnection
  (JNIEnv *env, jclass cls, jlong peer)
{
    NetworkConnectionImpl* impl = (NetworkConnectionImpl*)peer;
    [impl release];
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getUDID
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_codename1_impl_ios_IOSNative_getUDID
  (JNIEnv *env, jclass cls)
{
    return fromNSString(env, [OpenUDID value]);
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    createCLLocation
 * Signature: ()J
 */
CLLocationManager* com_codename1_impl_ios_IOSNative_createCLLocation = nil;
JNIEXPORT jlong JNICALL Java_com_codename1_impl_ios_IOSNative_createCLLocation
  (JNIEnv *env, jclass cls)
{
    dispatch_sync(dispatch_get_main_queue(), ^{
        com_codename1_impl_ios_IOSNative_createCLLocation = [[CLLocationManager alloc] init];
    });
    CLLocationManager* c = com_codename1_impl_ios_IOSNative_createCLLocation;
    com_codename1_impl_ios_IOSNative_createCLLocation = nil;
    return c;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    isGoodLocation
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_com_codename1_impl_ios_IOSNative_isGoodLocation
  (JNIEnv *env, jclass cls, jlong peer)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    CLLocationManager* l = (CLLocationManager*)peer;
    CLLocation* loc = l.location;
    if(loc == nil) {
        [pool release];
        return 0;
    }
    
    // Filter out points by invalid accuracy
    if (loc.horizontalAccuracy < 0) {
        [pool release];
        return 0;
    }
    
    [pool release];
    // The newLocation is good to use
    return 1;    
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getCurrentLocationObject
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_codename1_impl_ios_IOSNative_getCurrentLocationObject
  (JNIEnv *env, jclass cls, jlong peer)
{
    dispatch_sync(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        CLLocationManager* l = (CLLocationManager*)peer;
        com_codename1_impl_ios_IOSNative_createCLLocation = l.location;
        [com_codename1_impl_ios_IOSNative_createCLLocation retain];
        [pool release];
    });
    CLLocationManager* c = com_codename1_impl_ios_IOSNative_createCLLocation;
    com_codename1_impl_ios_IOSNative_createCLLocation = nil;
    return c;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getLocationLatitude
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_com_codename1_impl_ios_IOSNative_getLocationLatitude
  (JNIEnv *env, jclass cls, jlong peer)
{
    CLLocation* loc = (CLLocation*)peer;
    return loc.coordinate.latitude;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getLocationAltitude
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_com_codename1_impl_ios_IOSNative_getLocationAltitude
  (JNIEnv *env, jclass cls, jlong peer)
 {
    CLLocation* loc = (CLLocation*)peer;
    return loc.altitude;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getLocationLongtitude
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_com_codename1_impl_ios_IOSNative_getLocationLongtitude
  (JNIEnv *env, jclass cls, jlong peer)
{
    CLLocation* loc = (CLLocation*)peer;
    return loc.coordinate.longitude;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getLocationAccuracy
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_com_codename1_impl_ios_IOSNative_getLocationAccuracy
  (JNIEnv *env, jclass cls, jlong peer)
{
    CLLocation* loc = (CLLocation*)peer;
    return loc.horizontalAccuracy;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getLocationDirection
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_com_codename1_impl_ios_IOSNative_getLocationDirection
  (JNIEnv *env, jclass cls, jlong peer)
{
    CLLocation* loc = (CLLocation*)peer;
    return loc.course;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getLocationVelocity
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_com_codename1_impl_ios_IOSNative_getLocationVelocity
  (JNIEnv *env, jclass cls, jlong peer)
{
    CLLocation* loc = (CLLocation*)peer;
    return loc.speed;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getLocationTimeStamp
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_codename1_impl_ios_IOSNative_getLocationTimeStamp
  (JNIEnv *env, jclass cls, jlong peer)
{
    CLLocation* loc = (CLLocation*)peer;
    NSTimeInterval t = [loc.timestamp timeIntervalSince1970];
    return (jlong)(t * 1000.0);
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    startUpdatingLocation
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_startUpdatingLocation
  (JNIEnv *env, jclass cls, jlong peer)
{
    CLLocationManager* l = (CLLocationManager*)peer;
    l.delegate = [CodenameOne_GLViewController instance];
    [l startUpdatingLocation];
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    stopUpdatingLocation
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_stopUpdatingLocation
  (JNIEnv *env , jclass cls, jlong peer)
{
    CLLocationManager* l = (CLLocationManager*)peer;
    [l stopUpdatingLocation];    
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    captureCamera
 * Signature: (Z)V
 */
UIPopoverController* popoverController;
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_captureCamera
  (JNIEnv *env, jclass cls, jboolean movie)
{
    dispatch_sync(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        UIImagePickerControllerSourceType sourceType = UIImagePickerControllerSourceTypeCamera; // default
        popoverController = nil;
        
        bool hasCamera = [UIImagePickerController isSourceTypeAvailable:sourceType];
        if (hasCamera) {
            UIImagePickerController* pickerController = [[[UIImagePickerController alloc] init] autorelease];
            
            pickerController.delegate = [CodenameOne_GLViewController instance];
            pickerController.sourceType = sourceType;
            
            if(movie) {
                pickerController.mediaTypes = [NSArray arrayWithObjects:@"public.movie", nil];
            } else {
                pickerController.mediaTypes = [NSArray arrayWithObjects:@"public.image", nil];
            }
            
            if(popoverSupported() && sourceType != UIImagePickerControllerSourceTypeCamera)
            {
                popoverController = [[[NSClassFromString(@"UIPopoverController") alloc] 
                                      initWithContentViewController:pickerController] autorelease]; 
                popoverController.delegate = [CodenameOne_GLViewController instance];
                [popoverController presentPopoverFromRect:CGRectMake(0,32,320,480)
                                                   inView:[CodenameOne_GLViewController instance]
                                 permittedArrowDirections:UIPopoverArrowDirectionAny 
                                                 animated:YES]; 
            }
            else 
            { 
                [[CodenameOne_GLViewController instance] presentModalViewController:pickerController animated:YES]; 
            }
            [pool release];
        }
    });
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    createAudioRecorder
 * Signature: (Ljava/lang/String;)J
 */
AVAudioRecorder* recorder = nil;
JNIEXPORT jlong JNICALL Java_com_codename1_impl_ios_IOSNative_createAudioRecorder
  (JNIEnv *env, jclass cls, jstring destinationFile)
{
	__block NSString * filePath = toNSString(env, destinationFile);
    dispatch_sync(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        
        NSLog(@"Recording audio to: %@", filePath);
        NSDictionary *recordSettings = [[NSDictionary alloc] initWithObjectsAndKeys:
        [NSNumber numberWithFloat: 44100.0], AVSampleRateKey,
        [NSNumber numberWithInt: kAudioFormatMPEG4AAC],AVFormatIDKey,
        [NSNumber numberWithInt: 1], AVNumberOfChannelsKey,
        [NSNumber numberWithInt: AVAudioQualityMax], AVEncoderAudioQualityKey,nil];
        NSError *error = nil;
        recorder = [[AVAudioRecorder alloc] initWithURL: [NSURL fileURLWithPath:filePath]
             settings: recordSettings
             error: &error];
        if(error != nil) {  
            NSLog(@"Error in recording: %@", [error localizedDescription]);        
        }
        [pool release];
    });
    AVAudioRecorder* r = recorder;
    recorder = nil;
    return r;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    startAudioRecord
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_startAudioRecord
  (JNIEnv *env, jclass cls, jlong peer)
{
    __block AVAudioRecorder* recorder = (AVAudioRecorder*)peer;
    dispatch_async(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        [recorder prepareToRecord];
        [recorder record];
        [recorder retain];
        [pool release];
    });
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    pauseAudioRecord
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_pauseAudioRecord
  (JNIEnv *env, jclass cls, jlong peer)
{
    __block AVAudioRecorder* recorder = (AVAudioRecorder*)peer;
    dispatch_async(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        [recorder pause];
        [pool release];
    });
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    cleanupAudioRecord
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_cleanupAudioRecord
  (JNIEnv *env, jclass cls, jlong peer)
{
    __block AVAudioRecorder* recorder = (AVAudioRecorder*)peer;
    dispatch_async(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        [recorder stop];
        [recorder release];
        [pool release];
    });
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    sendEmailMessage
 * Signature: (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_sendEmailMessage
  (JNIEnv *env, jclass cls, jstring recipients, jstring subject, jstring content, jstring attachment, jstring attachmentMimeType)
{

	__block NSString *recipient = toNSString(env, recipients);
	__block NSString *nSubject = toNSString(env, subject);
	__block NSString *emailBody = toNSString(env, content);
    dispatch_async(dispatch_get_main_queue(), ^{
        MFMailComposeViewController *picker = [[MFMailComposeViewController alloc] init];
        if(picker == nil || ![MFMailComposeViewController canSendMail]) {
            return;
        }
        picker.mailComposeDelegate = [CodenameOne_GLViewController instance];
        
        // Recipient.
        
        NSArray *recipientsArray = [NSArray arrayWithObject:recipient];
        [picker setToRecipients:recipientsArray];
        
        // Subject.
        [picker setSubject:nSubject];
        
        // Body.
        
        [picker setMessageBody:emailBody isHTML:NO];
        
        [[CodenameOne_GLViewController instance] presentModalViewController:picker animated:YES];
        
        [picker release];
    });
}


ABAddressBookRef globalAddressBook = nil;
ABAddressBookRef getAddressBook() {
    if(globalAddressBook == nil) {
        globalAddressBook = ABAddressBookCreate();
    }
    return globalAddressBook;
}



/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getContactCount
 * Signature: (Z)I
 */
JNIEXPORT jint JNICALL Java_com_codename1_impl_ios_IOSNative_getContactCount
  (JNIEnv *env, jclass cls, jboolean includeNumbers)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    ABAddressBookRef addressBook = getAddressBook();
    CFIndex nPeople = ABAddressBookGetPersonCount(addressBook);
    [pool release];
    return nPeople;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getContactRefIds
 * Signature: ([IZ)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_getContactRefIds
  (JNIEnv *env, jclass cls, jintArray intArray, jboolean includeNumbers)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    int *data = (*env)->GetIntArrayElements(env, intArray, 0);   
    int size = (*env)->GetArrayLength(env, intArray);
    ABAddressBookRef addressBook = getAddressBook();
    CFArrayRef allPeople = ABAddressBookCopyArrayOfAllPeople(addressBook);
    for(int iter = 0 ; iter < size ; iter++) {
        ABRecordRef ref = CFArrayGetValueAtIndex(allPeople, iter);
        data[iter] = ABRecordGetRecordID(ref);
    }
    [pool release];
    (*env)->ReleaseIntArrayElements(env, intArray, data, 0);
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getPersonWithRecordID
 * Signature: (I)J
 */
JNIEXPORT jlong JNICALL Java_com_codename1_impl_ios_IOSNative_getPersonWithRecordID
  (JNIEnv *env, jclass cls, jint recId)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    ABRecordRef i = ABAddressBookGetPersonWithRecordID(getAddressBook(), recId);
    [i retain];
    [pool release];
    return i;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getPersonFirstName
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_codename1_impl_ios_IOSNative_getPersonFirstName
  (JNIEnv *env, jclass cls, jlong peer)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    ABRecordRef i = (ABRecordRef)peer;
    NSString* k = (NSString*)ABRecordCopyValue(i,kABPersonFirstNameProperty);    
    jstring ret = fromNSString(env, k);
    [pool release];
    return ret;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getPersonSurnameName
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_codename1_impl_ios_IOSNative_getPersonSurnameName
  (JNIEnv *env, jclass cls, jlong peer)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    ABRecordRef i = (ABRecordRef)peer;
    NSString* k = (NSString*)ABRecordCopyValue(i,kABPersonLastNameProperty);    
    jstring ret = fromNSString(env, k);
    [pool release];
    return ret;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getPersonPhoneCount
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_codename1_impl_ios_IOSNative_getPersonPhoneCount
  (JNIEnv *env, jclass cls, jlong peer)
{
    //NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    //[pool release];
    return 1;
}

jobject copyValueAsString(JNIEnv* env, ABMultiValueRef r) {
    jstring ret = NULL;
    if(ABMultiValueGetCount(r) > 0) {
        NSString *k = (NSString *)ABMultiValueCopyValueAtIndex(r, 0);
        ret = fromNSString(env, k);
    }
    return ret;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getPersonPhone
 * Signature: (JI)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_codename1_impl_ios_IOSNative_getPersonPhone
  (JNIEnv *env, jclass cls, jlong peer, jint offset)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    ABRecordRef i = (ABRecordRef)peer;
    ABMultiValueRef k = (ABMultiValueRef)ABRecordCopyValue(i,kABPersonPhoneProperty);    
    jstring ret = copyValueAsString(env, k);
    [pool release];
    return ret;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getPersonPhoneType
 * Signature: (JI)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_codename1_impl_ios_IOSNative_getPersonPhoneType
  (JNIEnv *env, jclass cls, jlong peer, jint offset)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    //ABRecordRef i = (ABRecordRef)peer;
    //ABMultiValueRef k = (ABMultiValueRef)ABRecordCopyValue(i,kABPersonPhoneMainLabel);    
    //JAVA_OBJECT ret = copyValueAsString(k);
    jstring ret = fromNSString(env, @"work");
    [pool release];
    return ret;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getPersonPrimaryPhone
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_codename1_impl_ios_IOSNative_getPersonPrimaryPhone
  (JNIEnv *env, jclass cls, jlong peer)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    ABRecordRef i = (ABRecordRef)peer;
    ABMultiValueRef k = (ABMultiValueRef)ABRecordCopyValue(i,kABPersonPhoneProperty);    
    jstring ret = copyValueAsString(env, k);
    [pool release];
    return ret;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getPersonEmail
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_codename1_impl_ios_IOSNative_getPersonEmail
  (JNIEnv *env, jclass cls, jlong peer)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    ABRecordRef i = (ABRecordRef)peer;
    ABMultiValueRef emails = (ABMultiValueRef)ABRecordCopyValue(i,kABPersonEmailProperty);    
    jstring ret = copyValueAsString(env, emails);
    [pool release];
    return ret;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getPersonAddress
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_codename1_impl_ios_IOSNative_getPersonAddress
  (JNIEnv *env, jclass cls, jlong peer)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    ABRecordRef i = (ABRecordRef)peer;
    NSString* k = (NSString*)ABRecordCopyValue(i,kABPersonAddressProperty);    
    jstring ret = fromNSString(env, k);
    [pool release];
    return ret;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    createPersonPhotoImage
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_codename1_impl_ios_IOSNative_createPersonPhotoImage
  (JNIEnv *env, jclass cls, jlong peer)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    ABRecordRef i = (ABRecordRef)peer;
    GLUIImage* g = nil;
    if(ABPersonHasImageData(i)){
        UIImage* img = [UIImage imageWithData:(NSData *)ABPersonCopyImageData(i)];
        g = [[GLUIImage alloc] initWithImage:img];
    }    
    [pool release];
    return g;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    dial
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_dial
  (JNIEnv *env, jclass cls, jstring phone)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    [[UIApplication sharedApplication] openURL:[NSURL URLWithString:toNSString(env, phone)]];
    [pool release];
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    sendSMS
 * Signature: (Ljava/lang/String;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_sendSMS
  (JNIEnv *env, jclass cls, jstring number, jstring text)
{
	__block NSString *recipient = toNSString(env, number);
	__block NSString *smsBody = toNSString(env, text);
    dispatch_async(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        if([MFMessageComposeViewController canSendText]) {
            MFMessageComposeViewController *picker = [[MFMessageComposeViewController alloc] init];
            picker.messageComposeDelegate = [CodenameOne_GLViewController instance];
            
            // Recipient.
            
            NSArray *recipientsArray = [NSArray arrayWithObject:recipient];
            
            [picker setRecipients:recipientsArray];
            
            // Body.
            
            [picker setBody:smsBody];
            
            [[CodenameOne_GLViewController instance] presentModalViewController:picker animated:YES];
            
            [picker release];
        }
        [pool release];
    });
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    registerPush
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_registerPush
  (JNIEnv *env, jclass cls)
{
    [[UIApplication sharedApplication] registerForRemoteNotificationTypes:
		(UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeSound | UIRemoteNotificationTypeAlert)];
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    deregisterPush
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_deregisterPush
  (JNIEnv *env, jclass cls)
{
    [[UIApplication sharedApplication] unregisterForRemoteNotifications];
}

UIImage* scaleImage(int destWidth, int destHeight, UIImage *img) {
    const size_t originalWidth = img.size.width;
    const size_t originalHeight = img.size.height;
    
    CGContextRef bmContext = CGBitmapContextCreate(NULL, destWidth, destHeight, 8, destWidth * 4, CGColorSpaceCreateDeviceRGB(), kCGBitmapByteOrderDefault | kCGImageAlphaPremultipliedFirst);
    

    if (!bmContext) {
        return nil;
    }
    
    if (UIImageOrientationLeft == img.imageOrientation) {
        CGContextRotateCTM(bmContext, M_PI_2);
        CGContextTranslateCTM(bmContext, 0, -destHeight);
    } else if (UIImageOrientationRight == img.imageOrientation) {
        CGContextRotateCTM(bmContext, -M_PI_2);
        CGContextTranslateCTM(bmContext, -destWidth, 0);
    } else if (UIImageOrientationDown == img.imageOrientation) {
        CGContextTranslateCTM(bmContext, destWidth, destHeight);
        CGContextRotateCTM(bmContext, -M_PI);
    }
    
    CGContextSetShouldAntialias(bmContext, true);
    CGContextSetAllowsAntialiasing(bmContext, true);
    CGContextSetInterpolationQuality(bmContext, kCGInterpolationHigh);
    
    CGContextDrawImage(bmContext, CGRectMake(0, 0, destWidth, destHeight), img.CGImage);
    
    CGImageRef scaledImageRef = CGBitmapContextCreateImage(bmContext);
    UIImage* scaled = [UIImage imageWithCGImage:scaledImageRef];
    
    CGImageRelease(scaledImageRef);
    CGContextRelease(bmContext);
    
    return scaled;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    createImageFile
 * Signature: (JZIIF)J
 */
JNIEXPORT jlong JNICALL Java_com_codename1_impl_ios_IOSNative_createImageFile
  (JNIEnv *env, jclass cls, jlong imagePeer, jboolean jpeg, jint width, jint height, jfloat quality)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    UIImage* i = [(GLUIImage*)imagePeer getImage];
    if(width == -1) {
        width = (int)i.size.width;
    }
    if(height == -1) {
        height = (int)i.size.width;
    }
    NSData* data;
    if(width != ((int)i.size.width) || height != ((int)i.size.height)) {
        i = scaleImage(width, height, i);
    } 
    if(jpeg) {
        data = UIImageJPEGRepresentation(i, quality);
    } else {
        data = UIImagePNGRepresentation(i);
    }
    
    [data retain];
    [pool release];
    return data;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getNSDataSize
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_codename1_impl_ios_IOSNative_getNSDataSize
  (JNIEnv *env, jclass cls, jlong nsData)
{
    NSData* d = (NSData*)nsData;
    return d.length;
} 

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    nsDataToByteArray
 * Signature: (J[B)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_nsDataToByteArray
  (JNIEnv *env, jclass cls, jlong nsData, jbyteArray dataArray)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NSData* d = (NSData*)nsData;
    char *data = (*env)->GetByteArrayElements(env, dataArray, 0);
    memcpy(data, d.bytes, d.length);
    [pool release];
    (*env)->ReleaseByteArrayElements(env, dataArray, data, 0);
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    sqlDbExists
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_codename1_impl_ios_IOSNative_sqlDbExists
  (JNIEnv *env, jclass cls, jstring name)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NSArray *writablePaths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    NSString *documentsPath = [writablePaths lastObject];    
    
    const char* chrs = (*env)->GetStringUTFChars(env, name, 0);
    NSString* nsSrc = [NSString stringWithUTF8String:chrs];
    
    NSString* foofile = [documentsPath stringByAppendingPathComponent:nsSrc];
    BOOL fileExists = [[NSFileManager defaultManager] fileExistsAtPath:foofile];
    [pool release]; 
    (*env)->ReleaseStringUTFChars(env, name, chrs);  
    return fileExists;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    sqlDbCreateAndOpen
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_codename1_impl_ios_IOSNative_sqlDbCreateAndOpen
  (JNIEnv *env, jclass cls, jstring name)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NSArray *writablePaths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    NSString *documentsPath = [writablePaths lastObject];    
    
    const char* chrs = (*env)->GetStringUTFChars(env, name, 0);
    NSString* nsSrc = [NSString stringWithUTF8String:chrs];
    
    NSString* foofile = [documentsPath stringByAppendingPathComponent:nsSrc];

    sqlite3 *db;
    int rc = sqlite3_open([foofile UTF8String], &db);
    
    [pool release]; 
    (*env)->ReleaseStringUTFChars(env, name, chrs);   
    return db;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    sqlDbDelete
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_sqlDbDelete
  (JNIEnv *env, jclass cls, jstring name)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NSArray *writablePaths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    NSString *documentsPath = [writablePaths lastObject];    
    
    const char* chrs = (*env)->GetStringUTFChars(env, name, 0);
    NSString* nsSrc = [NSString stringWithUTF8String:chrs];
    
    NSString* foofile = [documentsPath stringByAppendingPathComponent:nsSrc];
    [[NSFileManager defaultManager] removeItemAtPath:foofile error:nil];
    [pool release];   
	(*env)->ReleaseStringUTFChars(env, name, chrs); 
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    sqlDbClose
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_sqlDbClose
  (JNIEnv *env, jclass cls, jlong db)
{
    sqlite3_free((sqlite3*)db);
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    sqlDbExec
 * Signature: (JLjava/lang/String;[Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_sqlDbExec
  (JNIEnv *env, jclass cls, jlong dbPeer, jstring sql, jobjectArray args)
{
    sqlite3* db = (sqlite3*)dbPeer;
    const char* chrs = (*env)->GetStringUTFChars(env, sql, 0);
    if(args != nil) {
        sqlite3_stmt *addStmt = nil;
        sqlite3_prepare_v2(db, chrs, -1, &addStmt, nil);
        (*env)->ReleaseStringUTFChars(env, sql, chrs);
        
        int count = (*env)->GetArrayLength(env, args);
        for(int iter = 0 ; iter < count ; iter++) {
            jstring str = (jstring)(*env)->GetObjectArrayElement(env, args, iter);
            const char* chrs = (*env)->GetStringUTFChars(env, str, 0);
            sqlite3_bind_text(addStmt, iter + 1, chrs, -1, SQLITE_TRANSIENT);
            (*env)->ReleaseStringUTFChars(env, str, chrs);
        }
        sqlite3_step(addStmt);
        sqlite3_finalize(addStmt);
    } else {
        sqlite3_exec(db, chrs, 0, 0, 0);
        (*env)->ReleaseStringUTFChars(env, sql, chrs);
    }
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    sqlDbExecQuery
 * Signature: (JLjava/lang/String;[Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_codename1_impl_ios_IOSNative_sqlDbExecQuery
  (JNIEnv *env, jclass cls, jlong dbPeer, jstring sql, jobjectArray args)
{
    sqlite3* db = (sqlite3*)dbPeer;
    const char* chrs = (*env)->GetStringUTFChars(env, sql, 0);
    sqlite3_stmt *addStmt = nil;
    sqlite3_prepare_v2(db, chrs, -1, &addStmt, nil);
	(*env)->ReleaseStringUTFChars(env, sql, chrs);
    if(args != nil) {
        int count = (*env)->GetArrayLength(env, args);
        for(int iter = 0 ; iter < count ; iter++) {
            jstring str = (jstring)(*env)->GetObjectArrayElement(env, args, iter);
            const char* chrs = (*env)->GetStringUTFChars(env, str, 0);
            sqlite3_bind_text(addStmt, iter + 1, chrs, -1, SQLITE_TRANSIENT);
            (*env)->ReleaseStringUTFChars(env, str, chrs);
        }
    }
    return addStmt;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    sqlCursorFirst
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_com_codename1_impl_ios_IOSNative_sqlCursorFirst
  (JNIEnv *env, jclass cls, jlong statementPeer)
{
    sqlite3_reset((sqlite3_stmt *)statementPeer);
    return YES;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    sqlCursorNext
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_com_codename1_impl_ios_IOSNative_sqlCursorNext
  (JNIEnv *env, jclass cls, jlong statementPeer)
{
    return sqlite3_step((sqlite3_stmt *)statementPeer) == SQLITE_ROW;    
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    sqlGetColName
 * Signature: (JI)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_codename1_impl_ios_IOSNative_sqlGetColName
  (JNIEnv *env, jclass cls, jlong statementPeer, jint index)
{
    return (*env)->NewStringUTF(env, sqlite3_column_name((sqlite3_stmt*)statementPeer, index));
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    sqlCursorCloseStatement
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_sqlCursorCloseStatement
  (JNIEnv *env, jclass cls, jlong statement)
{
    sqlite3_finalize((sqlite3_stmt*)statement);
}


/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    sqlCursorValueAtColumnBlob
 * Signature: (JI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_codename1_impl_ios_IOSNative_sqlCursorValueAtColumnBlob
  (JNIEnv *env, jclass cls, jlong statement, jint col)
{
    return nil;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    sqlCursorValueAtColumnDouble
 * Signature: (JI)D
 */
JNIEXPORT jdouble JNICALL Java_com_codename1_impl_ios_IOSNative_sqlCursorValueAtColumnDouble
  (JNIEnv *env, jclass cls, jlong statement, jint col)
{
    return sqlite3_column_double((sqlite3_stmt*)statement, col);
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    sqlCursorValueAtColumnFloat
 * Signature: (JI)F
 */
JNIEXPORT jfloat JNICALL Java_com_codename1_impl_ios_IOSNative_sqlCursorValueAtColumnFloat
  (JNIEnv *env, jclass cls, jlong statement, jint col)
{
    return sqlite3_column_double((sqlite3_stmt*)statement, col);
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    sqlCursorValueAtColumnInteger
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_com_codename1_impl_ios_IOSNative_sqlCursorValueAtColumnInteger
  (JNIEnv *env, jclass cls, jlong statement, jint col)
{
    return sqlite3_column_int((sqlite3_stmt*)statement, col);
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    sqlCursorValueAtColumnLong
 * Signature: (JI)J
 */
JNIEXPORT jlong JNICALL Java_com_codename1_impl_ios_IOSNative_sqlCursorValueAtColumnLong
  (JNIEnv *env, jclass cls, jlong statement, jint col)
{
    return sqlite3_column_int64((sqlite3_stmt*)statement, col);
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    sqlCursorValueAtColumnShort
 * Signature: (JI)S
 */
JNIEXPORT jshort JNICALL Java_com_codename1_impl_ios_IOSNative_sqlCursorValueAtColumnShort
  (JNIEnv *env, jclass cls, jlong statement, jint col)
{
    return sqlite3_column_int((sqlite3_stmt*)statement, col);
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    sqlCursorValueAtColumnString
 * Signature: (JI)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_codename1_impl_ios_IOSNative_sqlCursorValueAtColumnString
  (JNIEnv *env, jclass cls, jlong statement, jint col)
{
    return (*env)->NewStringUTF(env, sqlite3_column_text((sqlite3_stmt*)statement, col));
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    sqlCursorGetColumnCount
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_codename1_impl_ios_IOSNative_sqlCursorGetColumnCount
  (JNIEnv *env, jclass cls, jlong statement)
{
    sqlite3_stmt *stmt = (sqlite3_stmt*)statement;
    return sqlite3_column_count(stmt);
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    fetchProducts
 * Signature: ([Ljava/lang/String;[Lcom/codename1/payment/Product;)V
 */
jobjectArray productsArrayPending = NULL;

JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_fetchProducts
  (JNIEnv *env, jclass cls, jobjectArray skus, jobjectArray products)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    int count = (*env)->GetArrayLength(env, skus);
    
    NSString** stringArray = malloc(sizeof(NSString*) * count);
    for(int iter = 0 ; iter < count ; iter++) {
        stringArray[iter] = toNSString(env, (*env)->GetObjectArrayElement(env, skus, iter));
    }
    NSSet* productIdentifiers = [NSSet setWithObjects:stringArray count:count];
    
    if ( productsArrayPending != NULL ){
    	(*env)->DeleteGlobalRef(env, productsArrayPending);
    }
    productsArrayPending = (*env)->NewGlobalRef(env, products);
    
    SKProductsRequest * request = [[[SKProductsRequest alloc] initWithProductIdentifiers:productIdentifiers] autorelease];
    request.delegate = [CodenameOne_GLViewController instance];
    [request start];
    [pool release];
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    purchase
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_purchase
  (JNIEnv *env, jclass cls, jstring sku)
{
    SKPayment *payment = [SKPayment paymentWithProductIdentifier:toNSString(env, sku)];
    [[SKPaymentQueue defaultQueue] addPayment:payment];
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    formatInt
 * Signature: (I)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_codename1_impl_ios_IOSNative_formatInt
  (JNIEnv *env, jclass cls, jint i)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NSNumberFormatter *formatter = [[[NSNumberFormatter alloc] init] autorelease];
    [formatter setNumberStyle:NSNumberFormatterNoStyle];
    jstring o = fromNSString(env, [formatter stringFromNumber:[NSNumber numberWithInt:i]]);
    [pool release];
    return o;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    formatDouble
 * Signature: (D)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_codename1_impl_ios_IOSNative_formatDouble
  (JNIEnv *env, jclass cls, jdouble d)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NSNumberFormatter *formatter = [[[NSNumberFormatter alloc] init] autorelease];
    [formatter setNumberStyle:NSNumberFormatterNoStyle];
    jstring o = fromNSString(env, [formatter stringFromNumber:[NSNumber numberWithDouble:d]]);
    [pool release];
    return o;
} 

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    formatCurrency
 * Signature: (D)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_codename1_impl_ios_IOSNative_formatCurrency
  (JNIEnv *env, jclass cls, jdouble d)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NSNumberFormatter *formatter = [[[NSNumberFormatter alloc] init] autorelease];
    [formatter setNumberStyle:NSNumberFormatterCurrencyStyle];
    jstring o = fromNSString(env, [formatter stringFromNumber:[NSNumber numberWithDouble:d]]);
    [pool release];
    return o;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    formatDate
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_codename1_impl_ios_IOSNative_formatDate
  (JNIEnv *env, jclass cls, jlong d)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NSDateFormatter *formatter = [[[NSDateFormatter alloc] init] autorelease];
    NSDate* date = [NSDate dateWithTimeIntervalSince1970:(d / 1000)];
    [formatter setDateStyle:NSDateFormatterMediumStyle];
    jstring o = fromNSString(env, [formatter stringFromDate:date]);
    [pool release];
    return o;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    formatDateShort
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_codename1_impl_ios_IOSNative_formatDateShort
  (JNIEnv *env, jclass cls, jlong d)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NSDateFormatter *formatter = [[[NSDateFormatter alloc] init] autorelease];
    NSDate* date = [NSDate dateWithTimeIntervalSince1970:(d / 1000)];
    [formatter setDateStyle:NSDateFormatterShortStyle];
    jstring o = fromNSString(env, [formatter stringFromDate:date]);
    [pool release];
    return o;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    formatDateTime
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_codename1_impl_ios_IOSNative_formatDateTime
  (JNIEnv *env, jclass cls, jlong d)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NSDateFormatter *formatter = [[[NSDateFormatter alloc] init] autorelease];
    NSDate* date = [NSDate dateWithTimeIntervalSince1970:(d / 1000)];
    [formatter setDateStyle:NSDateFormatterLongStyle];
    [formatter setTimeStyle:NSDateFormatterLongStyle];
    jstring o = fromNSString(env, [formatter stringFromDate:date]);
    [pool release];
    return o;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    formatDateTimeMedium
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_codename1_impl_ios_IOSNative_formatDateTimeMedium
  (JNIEnv *env, jclass cls, jlong d)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NSDateFormatter *formatter = [[[NSDateFormatter alloc] init] autorelease];
    NSDate* date = [NSDate dateWithTimeIntervalSince1970:(d / 1000)];
    [formatter setDateStyle:NSDateFormatterMediumStyle];
    [formatter setTimeStyle:NSDateFormatterMediumStyle];
    jstring o = fromNSString(env, [formatter stringFromDate:date]);
    [pool release];
    return o;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    formatDateTimeShort
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_codename1_impl_ios_IOSNative_formatDateTimeShort
  (JNIEnv *env, jclass cls, jlong d)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NSDateFormatter *formatter = [[[NSDateFormatter alloc] init] autorelease];
    NSDate* date = [NSDate dateWithTimeIntervalSince1970:(d / 1000)];
    [formatter setDateStyle:NSDateFormatterShortStyle];
    [formatter setTimeStyle:NSDateFormatterShortStyle];
    jstring o = fromNSString(env, [formatter stringFromDate:date]);
    [pool release];
    return o;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    getCurrencySymbol
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_codename1_impl_ios_IOSNative_getCurrencySymbol
  (JNIEnv *env, jclass cls)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NSNumberFormatter *formatter = [[[NSNumberFormatter alloc] init] autorelease];
    jstring c = fromNSString(env, [formatter currencyCode]);
    [pool release];
    return c;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    scanQRCode
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_scanQRCode
  (JNIEnv *env, jclass cls)
{
    
    Java_com_codename1_impl_ios_IOSNative_scanBarCode(env, cls);
}


/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    scanBarCode
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_codename1_impl_ios_IOSNative_scanBarCode
  (JNIEnv *env, jclass cls)
{
    return;
    /*
     //--- DISABLED FOR NOW BECAUSE I NEED TO GET A COPY of libzbar
     //   that works with i386
     //- steve@weblite.ca
     
    dispatch_async(dispatch_get_main_queue(), ^{
        NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
        ZBarReaderViewController *reader = [ZBarReaderViewController new];
        ScanCodeImpl* scanCall = [[ScanCodeImpl alloc] init];
        reader.readerDelegate = scanCall;
        reader.supportedOrientationsMask = ZBarOrientationMaskAll;
        
        ZBarImageScanner *scanner = reader.scanner;
        // TODO: (optional) additional reader configuration here
        
        // EXAMPLE: disable rarely used I2/5 to improve performance
        [scanner setSymbology: ZBAR_I25
                       config: ZBAR_CFG_ENABLE
                           to: 0];
        
        // present and release the controller
        [[CodenameOne_GLViewController instance] presentModalViewController:reader animated:NO];
        [reader release];
        [pool release];
     
    });
     */
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    createTruetypeFont
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_codename1_impl_ios_IOSNative_createTruetypeFont
  (JNIEnv *env, jclass cls, jstring name)
{
    int pSize = 14;
    
    pSize *= scaleValue;
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NSString* str = toNSString(env, name);
    UIFont* fnt = [UIFont fontWithName:str size:pSize];
    [fnt retain];
    [pool release];
    return fnt;
}

/*
 * Class:     com_codename1_impl_ios_IOSNative
 * Method:    deriveTruetypeFont
 * Signature: (JZZF)J
 */
JNIEXPORT jlong JNICALL Java_com_codename1_impl_ios_IOSNative_deriveTruetypeFont
  (JNIEnv *env, jclass cls, jlong uiFont, jboolean bold, jboolean italic, jfloat size)
{
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    UIFont* original = (UIFont*)uiFont;
    UIFont* fnt = [original fontWithSize:size];
    [fnt retain];
    [pool release];
    return fnt;
}

void connectionComplete(void* peer) {
    JNIEnv *env = [CodenameOne_GLAppDelegate jniEnv];
    jclass IOSImplementation = (*env)->FindClass(env, "com/codename1/impl/ios/IOSImplementation");
    jmethodID streamComplete = (*env)->GetStaticMethodID(env, IOSImplementation, "streamComplete", "(J)V");
    (*env)->CallStaticVoidMethod(env, IOSImplementation, streamComplete, (jlong)peer);
    
}

void connectionReceivedData(void* peer, NSData* data) {
    JNIEnv *env = [CodenameOne_GLAppDelegate jniEnv];
    jbyteArray byteArray = (*env)->NewByteArray(env, [data length]);
    char* bytes = (*env)->GetByteArrayElements(env, byteArray, 0);
    [data getBytes: bytes];
    (*env)->ReleaseByteArrayElements(env, byteArray, bytes, 0);
    
    jclass IOSImplementation = (*env)->FindClass(env, "com/codename1/impl/ios/IOSImplementation");
    jmethodID appendData = (*env)->GetStaticMethodID(env, IOSImplementation, "appendData", "(J[B)V");
    (*env)->CallStaticVoidMethod(env, IOSImplementation, appendData, (jlong)peer, byteArray );
    
}

void connectionError(void* peer, NSString* message) {
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    NetworkConnectionImpl* impl = (NetworkConnectionImpl*)peer;
    JNIEnv *env = [CodenameOne_GLAppDelegate jniEnv];
    jstring str = (*env)->NewStringUTF(env, message.UTF8String);
    
    jclass IOSImplementation = (*env)->FindClass(env, "com/codename1/impl/ios/IOSImplementation");
    jmethodID networkError = (*env)->GetStaticMethodID(env, IOSImplementation, "networkError", "(JLjava/lang/String;)V");
    (*env)->CallStaticVoidMethod(env, IOSImplementation, networkError, (jlong)peer, str);
    
    [pool release];
}

void pointerPressed(int* x, int* y, int length) {
    JNIEnv *env = [CodenameOne_GLAppDelegate jniEnv];
    jclass IOSImplementation = (*env)->FindClass(env, "com/codename1/impl/ios/IOSImplementation");
    if(length == 1) {
        jmethodID pointerPressedCallback = (*env)->GetStaticMethodID(env, IOSImplementation, "pointerPressedCallback", "(II)V");
        
        (*env)->CallStaticVoidMethod(env, IOSImplementation, pointerPressedCallback, x[0], y[0]);
        
    } else {
       jintArray xArray = (*env)->NewIntArray(env, length);
        jintArray yArray = (*env)->NewIntArray(env, length);
        
        int *xarr = (*env)->GetIntArrayElements(env, xArray, 0);
        int *yarr = (*env)->GetIntArrayElements(env, yArray, 0);
        memcpy(xarr, x, length * sizeof(jint));
        memcpy(yarr, y, length * sizeof(jint));
        (*env)->ReleaseIntArrayElements(env, xArray, xarr, 0);
        (*env)->ReleaseIntArrayElements(env, yArray, yarr, 0);
        
        jfieldID instanceField = (*env)->GetStaticFieldID(env, IOSImplementation, "instance", "Lcom/codename1/impl/ios/IOSImplementation");
        jobject instance = (*env)->GetStaticObjectField(env, IOSImplementation, instanceField);
        
        jmethodID pointerPressed = (*env)->GetMethodID(env, IOSImplementation, "pointerPressed", "([I[I)V" );
        (*env)->CallVoidMethod(env, instance, pointerPressed, xArray, yArray);
    }
}

void pointerDragged(int* x, int* y, int length) {
    JNIEnv *env = [CodenameOne_GLAppDelegate jniEnv];
    jclass IOSImplementation = (*env)->FindClass(env, "com/codename1/impl/ios/IOSImplementation");
    if(length == 1) {
        jmethodID pointerDraggedCallback = (*env)->GetStaticMethodID(env, IOSImplementation, "pointerDraggedCallback", "(II)V");
        (*env)->CallStaticVoidMethod(env, IOSImplementation, pointerDraggedCallback, x[0], y[0]);
        
    } else {
        
        jintArray xArray = (*env)->NewIntArray(env, length);
        jintArray yArray = (*env)->NewIntArray(env, length);
        
        jint *xarr = (*env)->GetIntArrayElements(env, xArray, 0);
        jint *yarr = (*env)->GetIntArrayElements(env, yArray, 0);
        memcpy(xarr, x, length * sizeof(jint));
        memcpy(yarr, y, length * sizeof(jint));
        (*env)->ReleaseIntArrayElements(env, xArray, xarr, 0);
        (*env)->ReleaseIntArrayElements(env, yArray, yarr, 0);
        
        jfieldID instanceField = (*env)->GetStaticFieldID(env, IOSImplementation, "instance", "Lcom/codename1/impl/ios/IOSImplementation");
        jobject instance = (*env)->GetStaticObjectField(env, IOSImplementation, instanceField);
        
        jmethodID pointerDragged = (*env)->GetMethodID(env, IOSImplementation, "pointerDragged", "([I[I)V" );
        (*env)->CallVoidMethod(env, instance, pointerDragged, xArray, yArray);
    }
}

void pointerReleased(int* x, int* y, int length) {
    JNIEnv *env = [CodenameOne_GLAppDelegate jniEnv];
    jclass IOSImplementation = (*env)->FindClass(env, "com/codename1/impl/ios/IOSImplementation");
    if(length == 1) {
        jmethodID pointerReleasedCallback = (*env)->GetStaticMethodID(env, IOSImplementation, "pointerReleasedCallback", "(II)V");
        (*env)->CallStaticVoidMethod(env, IOSImplementation, pointerReleasedCallback, x[0], y[0]);
        
    } else {
        
        
        jintArray xArray = (*env)->NewIntArray(env, length);
        jintArray yArray = (*env)->NewIntArray(env, length);
        
        jint *xarr = (*env)->GetIntArrayElements(env, xArray, 0);
        jint *yarr = (*env)->GetIntArrayElements(env, yArray, 0);
        memcpy(xarr, x, length * sizeof(jint));
        memcpy(yarr, y, length * sizeof(jint));
        (*env)->ReleaseIntArrayElements(env, xArray, xarr, 0);
        (*env)->ReleaseIntArrayElements(env, yArray, yarr, 0);
        
        jfieldID instanceField = (*env)->GetStaticFieldID(env, IOSImplementation, "instance", "Lcom/codename1/impl/ios/IOSImplementation");
        jobject instance = (*env)->GetStaticObjectField(env, IOSImplementation, instanceField);
        
        jmethodID pointerReleased = (*env)->GetMethodID(env, IOSImplementation, "pointerReleased", "([I[I)V" );
        (*env)->CallVoidMethod(env, instance, pointerReleased, xArray, yArray);
    }
}

void screenSizeChanged(int width, int height) {
    JNIEnv *env = [CodenameOne_GLAppDelegate jniEnv];
    jclass IOSImplementation = (*env)->FindClass(env, "com/codename1/impl/ios/IOSImplementation");
    jmethodID sizeChangedImpl = (*env)->GetStaticMethodID(env, IOSImplementation, "sizeChangedImpl", "(II)V");
    (*env)->CallStaticVoidMethod(env, IOSImplementation, sizeChangedImpl, width, width);
    
}

void stringEdit(int finished, int cursorPos, NSString* text) {
    
    JNIEnv *env = [CodenameOne_GLAppDelegate jniEnv];
    jclass IOSImplementation = (*env)->FindClass(env, "com/codename1/impl/ios/IOSImplementation");
    jmethodID editingUpdate = (*env)->GetStaticMethodID(env, IOSImplementation, "editingUpdate", "(Ljava/lang/String;IZ)V");
    (*env)->CallStaticVoidMethod(env, IOSImplementation, editingUpdate, fromNSString(env, text), cursorPos, finished != 0);
    
    }

int popoverSupported()
{
	return ( NSClassFromString(@"UIPopoverController") != nil) &&  (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad);
}


// Methods from IOSImplementation




#ifdef __cplusplus
}
#endif
