package com.apple.jobjc.corefoundation;

public  class CoreFoundationFramework extends com.apple.jobjc.MacOSXFramework {
	public CoreFoundationFramework(com.apple.jobjc.JObjCRuntime runtime) {
		super(runtime, new String[]{});
	}

	public CFAllocatorContext makeCFAllocatorContext(){
		return new CFAllocatorContext(getRuntime());
	}
	public CFAllocatorContext makeCFAllocatorContext(com.apple.jobjc.NativeBuffer base){
		return new CFAllocatorContext(getRuntime(), base);
	}
	public CFArrayCallBacks makeCFArrayCallBacks(){
		return new CFArrayCallBacks(getRuntime());
	}
	public CFArrayCallBacks makeCFArrayCallBacks(com.apple.jobjc.NativeBuffer base){
		return new CFArrayCallBacks(getRuntime(), base);
	}
	public CFBagCallBacks makeCFBagCallBacks(){
		return new CFBagCallBacks(getRuntime());
	}
	public CFBagCallBacks makeCFBagCallBacks(com.apple.jobjc.NativeBuffer base){
		return new CFBagCallBacks(getRuntime(), base);
	}
	public CFBinaryHeapCallBacks makeCFBinaryHeapCallBacks(){
		return new CFBinaryHeapCallBacks(getRuntime());
	}
	public CFBinaryHeapCallBacks makeCFBinaryHeapCallBacks(com.apple.jobjc.NativeBuffer base){
		return new CFBinaryHeapCallBacks(getRuntime(), base);
	}
	public CFBinaryHeapCompareContext makeCFBinaryHeapCompareContext(){
		return new CFBinaryHeapCompareContext(getRuntime());
	}
	public CFBinaryHeapCompareContext makeCFBinaryHeapCompareContext(com.apple.jobjc.NativeBuffer base){
		return new CFBinaryHeapCompareContext(getRuntime(), base);
	}
	public CFDictionaryKeyCallBacks makeCFDictionaryKeyCallBacks(){
		return new CFDictionaryKeyCallBacks(getRuntime());
	}
	public CFDictionaryKeyCallBacks makeCFDictionaryKeyCallBacks(com.apple.jobjc.NativeBuffer base){
		return new CFDictionaryKeyCallBacks(getRuntime(), base);
	}
	public CFDictionaryValueCallBacks makeCFDictionaryValueCallBacks(){
		return new CFDictionaryValueCallBacks(getRuntime());
	}
	public CFDictionaryValueCallBacks makeCFDictionaryValueCallBacks(com.apple.jobjc.NativeBuffer base){
		return new CFDictionaryValueCallBacks(getRuntime(), base);
	}
	public CFFileDescriptorContext makeCFFileDescriptorContext(){
		return new CFFileDescriptorContext(getRuntime());
	}
	public CFFileDescriptorContext makeCFFileDescriptorContext(com.apple.jobjc.NativeBuffer base){
		return new CFFileDescriptorContext(getRuntime(), base);
	}
	public CFGregorianDate makeCFGregorianDate(){
		return new CFGregorianDate(getRuntime());
	}
	public CFGregorianDate makeCFGregorianDate(com.apple.jobjc.NativeBuffer base){
		return new CFGregorianDate(getRuntime(), base);
	}
	public CFGregorianUnits makeCFGregorianUnits(){
		return new CFGregorianUnits(getRuntime());
	}
	public CFGregorianUnits makeCFGregorianUnits(com.apple.jobjc.NativeBuffer base){
		return new CFGregorianUnits(getRuntime(), base);
	}
	public CFMachPortContext makeCFMachPortContext(){
		return new CFMachPortContext(getRuntime());
	}
	public CFMachPortContext makeCFMachPortContext(com.apple.jobjc.NativeBuffer base){
		return new CFMachPortContext(getRuntime(), base);
	}
	public CFMessagePortContext makeCFMessagePortContext(){
		return new CFMessagePortContext(getRuntime());
	}
	public CFMessagePortContext makeCFMessagePortContext(com.apple.jobjc.NativeBuffer base){
		return new CFMessagePortContext(getRuntime(), base);
	}
	public CFRange makeCFRange(){
		return new CFRange(getRuntime());
	}
	public CFRange makeCFRange(com.apple.jobjc.NativeBuffer base){
		return new CFRange(getRuntime(), base);
	}
	public CFRunLoopObserverContext makeCFRunLoopObserverContext(){
		return new CFRunLoopObserverContext(getRuntime());
	}
	public CFRunLoopObserverContext makeCFRunLoopObserverContext(com.apple.jobjc.NativeBuffer base){
		return new CFRunLoopObserverContext(getRuntime(), base);
	}
	public CFRunLoopSourceContext makeCFRunLoopSourceContext(){
		return new CFRunLoopSourceContext(getRuntime());
	}
	public CFRunLoopSourceContext makeCFRunLoopSourceContext(com.apple.jobjc.NativeBuffer base){
		return new CFRunLoopSourceContext(getRuntime(), base);
	}
	public CFRunLoopSourceContext1 makeCFRunLoopSourceContext1(){
		return new CFRunLoopSourceContext1(getRuntime());
	}
	public CFRunLoopSourceContext1 makeCFRunLoopSourceContext1(com.apple.jobjc.NativeBuffer base){
		return new CFRunLoopSourceContext1(getRuntime(), base);
	}
	public CFRunLoopTimerContext makeCFRunLoopTimerContext(){
		return new CFRunLoopTimerContext(getRuntime());
	}
	public CFRunLoopTimerContext makeCFRunLoopTimerContext(com.apple.jobjc.NativeBuffer base){
		return new CFRunLoopTimerContext(getRuntime(), base);
	}
	public CFSetCallBacks makeCFSetCallBacks(){
		return new CFSetCallBacks(getRuntime());
	}
	public CFSetCallBacks makeCFSetCallBacks(com.apple.jobjc.NativeBuffer base){
		return new CFSetCallBacks(getRuntime(), base);
	}
	public CFSocketContext makeCFSocketContext(){
		return new CFSocketContext(getRuntime());
	}
	public CFSocketContext makeCFSocketContext(com.apple.jobjc.NativeBuffer base){
		return new CFSocketContext(getRuntime(), base);
	}
	public CFSocketSignature makeCFSocketSignature(){
		return new CFSocketSignature(getRuntime());
	}
	public CFSocketSignature makeCFSocketSignature(com.apple.jobjc.NativeBuffer base){
		return new CFSocketSignature(getRuntime(), base);
	}
	public CFStreamClientContext makeCFStreamClientContext(){
		return new CFStreamClientContext(getRuntime());
	}
	public CFStreamClientContext makeCFStreamClientContext(com.apple.jobjc.NativeBuffer base){
		return new CFStreamClientContext(getRuntime(), base);
	}
	public CFStreamError makeCFStreamError(){
		return new CFStreamError(getRuntime());
	}
	public CFStreamError makeCFStreamError(com.apple.jobjc.NativeBuffer base){
		return new CFStreamError(getRuntime(), base);
	}
	public CFStringInlineBuffer makeCFStringInlineBuffer(){
		return new CFStringInlineBuffer(getRuntime());
	}
	public CFStringInlineBuffer makeCFStringInlineBuffer(com.apple.jobjc.NativeBuffer base){
		return new CFStringInlineBuffer(getRuntime(), base);
	}
	public CFSwappedFloat32 makeCFSwappedFloat32(){
		return new CFSwappedFloat32(getRuntime());
	}
	public CFSwappedFloat32 makeCFSwappedFloat32(com.apple.jobjc.NativeBuffer base){
		return new CFSwappedFloat32(getRuntime(), base);
	}
	public CFSwappedFloat64 makeCFSwappedFloat64(){
		return new CFSwappedFloat64(getRuntime());
	}
	public CFSwappedFloat64 makeCFSwappedFloat64(com.apple.jobjc.NativeBuffer base){
		return new CFSwappedFloat64(getRuntime(), base);
	}
	public CFTreeContext makeCFTreeContext(){
		return new CFTreeContext(getRuntime());
	}
	public CFTreeContext makeCFTreeContext(com.apple.jobjc.NativeBuffer base){
		return new CFTreeContext(getRuntime(), base);
	}
	public CFUUIDBytes makeCFUUIDBytes(){
		return new CFUUIDBytes(getRuntime());
	}
	public CFUUIDBytes makeCFUUIDBytes(com.apple.jobjc.NativeBuffer base){
		return new CFUUIDBytes(getRuntime(), base);
	}
	public CFXMLAttributeDeclarationInfo makeCFXMLAttributeDeclarationInfo(){
		return new CFXMLAttributeDeclarationInfo(getRuntime());
	}
	public CFXMLAttributeDeclarationInfo makeCFXMLAttributeDeclarationInfo(com.apple.jobjc.NativeBuffer base){
		return new CFXMLAttributeDeclarationInfo(getRuntime(), base);
	}
	public CFXMLAttributeListDeclarationInfo makeCFXMLAttributeListDeclarationInfo(){
		return new CFXMLAttributeListDeclarationInfo(getRuntime());
	}
	public CFXMLAttributeListDeclarationInfo makeCFXMLAttributeListDeclarationInfo(com.apple.jobjc.NativeBuffer base){
		return new CFXMLAttributeListDeclarationInfo(getRuntime(), base);
	}
	public CFXMLDocumentInfo makeCFXMLDocumentInfo(){
		return new CFXMLDocumentInfo(getRuntime());
	}
	public CFXMLDocumentInfo makeCFXMLDocumentInfo(com.apple.jobjc.NativeBuffer base){
		return new CFXMLDocumentInfo(getRuntime(), base);
	}
	public CFXMLDocumentTypeInfo makeCFXMLDocumentTypeInfo(){
		return new CFXMLDocumentTypeInfo(getRuntime());
	}
	public CFXMLDocumentTypeInfo makeCFXMLDocumentTypeInfo(com.apple.jobjc.NativeBuffer base){
		return new CFXMLDocumentTypeInfo(getRuntime(), base);
	}
	public CFXMLElementInfo makeCFXMLElementInfo(){
		return new CFXMLElementInfo(getRuntime());
	}
	public CFXMLElementInfo makeCFXMLElementInfo(com.apple.jobjc.NativeBuffer base){
		return new CFXMLElementInfo(getRuntime(), base);
	}
	public CFXMLElementTypeDeclarationInfo makeCFXMLElementTypeDeclarationInfo(){
		return new CFXMLElementTypeDeclarationInfo(getRuntime());
	}
	public CFXMLElementTypeDeclarationInfo makeCFXMLElementTypeDeclarationInfo(com.apple.jobjc.NativeBuffer base){
		return new CFXMLElementTypeDeclarationInfo(getRuntime(), base);
	}
	public CFXMLEntityInfo makeCFXMLEntityInfo(){
		return new CFXMLEntityInfo(getRuntime());
	}
	public CFXMLEntityInfo makeCFXMLEntityInfo(com.apple.jobjc.NativeBuffer base){
		return new CFXMLEntityInfo(getRuntime(), base);
	}
	public CFXMLEntityReferenceInfo makeCFXMLEntityReferenceInfo(){
		return new CFXMLEntityReferenceInfo(getRuntime());
	}
	public CFXMLEntityReferenceInfo makeCFXMLEntityReferenceInfo(com.apple.jobjc.NativeBuffer base){
		return new CFXMLEntityReferenceInfo(getRuntime(), base);
	}
	public CFXMLExternalID makeCFXMLExternalID(){
		return new CFXMLExternalID(getRuntime());
	}
	public CFXMLExternalID makeCFXMLExternalID(com.apple.jobjc.NativeBuffer base){
		return new CFXMLExternalID(getRuntime(), base);
	}
	public CFXMLNotationInfo makeCFXMLNotationInfo(){
		return new CFXMLNotationInfo(getRuntime());
	}
	public CFXMLNotationInfo makeCFXMLNotationInfo(com.apple.jobjc.NativeBuffer base){
		return new CFXMLNotationInfo(getRuntime(), base);
	}
	public CFXMLParserCallBacks makeCFXMLParserCallBacks(){
		return new CFXMLParserCallBacks(getRuntime());
	}
	public CFXMLParserCallBacks makeCFXMLParserCallBacks(com.apple.jobjc.NativeBuffer base){
		return new CFXMLParserCallBacks(getRuntime(), base);
	}
	public CFXMLParserContext makeCFXMLParserContext(){
		return new CFXMLParserContext(getRuntime());
	}
	public CFXMLParserContext makeCFXMLParserContext(com.apple.jobjc.NativeBuffer base){
		return new CFXMLParserContext(getRuntime(), base);
	}
	public CFXMLProcessingInstructionInfo makeCFXMLProcessingInstructionInfo(){
		return new CFXMLProcessingInstructionInfo(getRuntime());
	}
	public CFXMLProcessingInstructionInfo makeCFXMLProcessingInstructionInfo(com.apple.jobjc.NativeBuffer base){
		return new CFXMLProcessingInstructionInfo(getRuntime(), base);
	}
	public IUnknownVTbl makeIUnknownVTbl(){
		return new IUnknownVTbl(getRuntime());
	}
	public IUnknownVTbl makeIUnknownVTbl(com.apple.jobjc.NativeBuffer base){
		return new IUnknownVTbl(getRuntime(), base);
	}
	public REFIID makeREFIID(){
		return new REFIID(getRuntime());
	}
	public REFIID makeREFIID(com.apple.jobjc.NativeBuffer base){
		return new REFIID(getRuntime(), base);
	}
	public final int CFByteOrderBigEndian(){ return 2 ; }
	public final int CFByteOrderLittleEndian(){ return 1 ; }
	public final int CFByteOrderUnknown(){ return 0 ; }
	public final int CFNotificationSuspensionBehaviorCoalesce(){ return 2 ; }
	public final int CFNotificationSuspensionBehaviorDeliverImmediately(){ return 4 ; }
	public final int CFNotificationSuspensionBehaviorDrop(){ return 1 ; }
	public final int CFNotificationSuspensionBehaviorHold(){ return 3 ; }
	public final int CF_USE_OSBYTEORDER_H(){ return 1 ; }
	public final int COREFOUNDATION_CFPLUGINCOM_SEPARATE(){ return 1 ; }
	public final int E_ABORT(){ return -2147483641 ; }
	public final int E_ACCESSDENIED(){ return -2147483639 ; }
	public final int E_FAIL(){ return -2147483640 ; }
	public final int E_HANDLE(){ return -2147483642 ; }
	public final int E_INVALIDARG(){ return -2147483645 ; }
	public final int E_NOINTERFACE(){ return -2147483644 ; }
	public final int E_NOTIMPL(){ return -2147483647 ; }
	public final int E_OUTOFMEMORY(){ return -2147483646 ; }
	public final int E_POINTER(){ return -2147483643 ; }
	public final int E_UNEXPECTED(){ return -2147418113 ; }
	public final int FALSE(){ return 0 ; }
	public final int SEVERITY_ERROR(){ return 1 ; }
	public final int SEVERITY_SUCCESS(){ return 0 ; }
	public final int S_FALSE(){ return 1 ; }
	public final int S_OK(){ return 0 ; }
	public final int TRUE(){ return 1 ; }
	public final int kCFBookmarkResolutionWithoutMountingMask(){ return 512 ; }
	public final int kCFBookmarkResolutionWithoutUIMask(){ return 256 ; }
	public final int kCFBundleExecutableArchitectureI386(){ return 7 ; }
	public final int kCFBundleExecutableArchitecturePPC(){ return 18 ; }
	public final int kCFBundleExecutableArchitecturePPC64(){ return 16777234 ; }
	public final int kCFBundleExecutableArchitectureX86_64(){ return 16777223 ; }
	public final int kCFCalendarComponentsWrap(){ return 1 ; }
	public final int kCFCalendarUnitDay(){ return 16 ; }
	public final int kCFCalendarUnitEra(){ return 2 ; }
	public final int kCFCalendarUnitHour(){ return 32 ; }
	public final int kCFCalendarUnitMinute(){ return 64 ; }
	public final int kCFCalendarUnitMonth(){ return 8 ; }
	public final int kCFCalendarUnitQuarter(){ return 2048 ; }
	public final int kCFCalendarUnitSecond(){ return 128 ; }
	public final int kCFCalendarUnitWeek(){ return 256 ; }
	public final int kCFCalendarUnitWeekOfMonth(){ return 4096 ; }
	public final int kCFCalendarUnitWeekOfYear(){ return 8192 ; }
	public final int kCFCalendarUnitWeekday(){ return 512 ; }
	public final int kCFCalendarUnitWeekdayOrdinal(){ return 1024 ; }
	public final int kCFCalendarUnitYear(){ return 4 ; }
	public final int kCFCalendarUnitYearForWeekOfYear(){ return 16384 ; }
	public final int kCFCharacterSetAlphaNumeric(){ return 10 ; }
	public final int kCFCharacterSetCapitalizedLetter(){ return 13 ; }
	public final int kCFCharacterSetControl(){ return 1 ; }
	public final int kCFCharacterSetDecimalDigit(){ return 4 ; }
	public final int kCFCharacterSetDecomposable(){ return 9 ; }
	public final int kCFCharacterSetIllegal(){ return 12 ; }
	public final int kCFCharacterSetLetter(){ return 5 ; }
	public final int kCFCharacterSetLowercaseLetter(){ return 6 ; }
	public final int kCFCharacterSetNewline(){ return 15 ; }
	public final int kCFCharacterSetNonBase(){ return 8 ; }
	public final int kCFCharacterSetPunctuation(){ return 11 ; }
	public final int kCFCharacterSetSymbol(){ return 14 ; }
	public final int kCFCharacterSetUppercaseLetter(){ return 7 ; }
	public final int kCFCharacterSetWhitespace(){ return 2 ; }
	public final int kCFCharacterSetWhitespaceAndNewline(){ return 3 ; }
	public final int kCFCompareAnchored(){ return 8 ; }
	public final int kCFCompareBackwards(){ return 4 ; }
	public final int kCFCompareCaseInsensitive(){ return 1 ; }
	public final int kCFCompareDiacriticInsensitive(){ return 128 ; }
	public final int kCFCompareEqualTo(){ return 0 ; }
	public final int kCFCompareForcedOrdering(){ return 512 ; }
	public final int kCFCompareGreaterThan(){ return 1 ; }
	public final int kCFCompareLessThan(){ return -1 ; }
	public final int kCFCompareLocalized(){ return 32 ; }
	public final int kCFCompareNonliteral(){ return 16 ; }
	public final int kCFCompareNumerically(){ return 64 ; }
	public final int kCFCompareWidthInsensitive(){ return 256 ; }
	public final double kCFCoreFoundationVersionNumber10_0(){ return 196.40d; }
	public final float kCFCoreFoundationVersionNumber10_0_3(){ return 196.50f; }
	public final float kCFCoreFoundationVersionNumber10_1(){ return 226.00f; }
	public final float kCFCoreFoundationVersionNumber10_1_1(){ return 226.00f; }
	public final double kCFCoreFoundationVersionNumber10_1_2(){ return 227.20d; }
	public final double kCFCoreFoundationVersionNumber10_1_3(){ return 227.20d; }
	public final double kCFCoreFoundationVersionNumber10_1_4(){ return 227.30d; }
	public final float kCFCoreFoundationVersionNumber10_2(){ return 263.00f; }
	public final double kCFCoreFoundationVersionNumber10_2_1(){ return 263.10d; }
	public final double kCFCoreFoundationVersionNumber10_2_2(){ return 263.10d; }
	public final double kCFCoreFoundationVersionNumber10_2_3(){ return 263.30d; }
	public final double kCFCoreFoundationVersionNumber10_2_4(){ return 263.30d; }
	public final float kCFCoreFoundationVersionNumber10_2_5(){ return 263.50f; }
	public final float kCFCoreFoundationVersionNumber10_2_6(){ return 263.50f; }
	public final float kCFCoreFoundationVersionNumber10_2_7(){ return 263.50f; }
	public final float kCFCoreFoundationVersionNumber10_2_8(){ return 263.50f; }
	public final float kCFCoreFoundationVersionNumber10_3(){ return 299.00f; }
	public final float kCFCoreFoundationVersionNumber10_3_1(){ return 299.00f; }
	public final float kCFCoreFoundationVersionNumber10_3_2(){ return 299.00f; }
	public final double kCFCoreFoundationVersionNumber10_3_3(){ return 299.30d; }
	public final double kCFCoreFoundationVersionNumber10_3_4(){ return 299.31d; }
	public final double kCFCoreFoundationVersionNumber10_3_5(){ return 299.31d; }
	public final double kCFCoreFoundationVersionNumber10_3_6(){ return 299.32d; }
	public final double kCFCoreFoundationVersionNumber10_3_7(){ return 299.33d; }
	public final double kCFCoreFoundationVersionNumber10_3_8(){ return 299.33d; }
	public final double kCFCoreFoundationVersionNumber10_3_9(){ return 299.35d; }
	public final float kCFCoreFoundationVersionNumber10_4(){ return 368.00f; }
	public final double kCFCoreFoundationVersionNumber10_4_1(){ return 368.10d; }
	public final double kCFCoreFoundationVersionNumber10_4_10(){ return 368.28d; }
	public final double kCFCoreFoundationVersionNumber10_4_11(){ return 368.31d; }
	public final double kCFCoreFoundationVersionNumber10_4_2(){ return 368.11d; }
	public final double kCFCoreFoundationVersionNumber10_4_3(){ return 368.18d; }
	public final double kCFCoreFoundationVersionNumber10_4_4_Intel(){ return 368.26d; }
	public final float kCFCoreFoundationVersionNumber10_4_4_PowerPC(){ return 368.25f; }
	public final double kCFCoreFoundationVersionNumber10_4_5_Intel(){ return 368.26d; }
	public final float kCFCoreFoundationVersionNumber10_4_5_PowerPC(){ return 368.25f; }
	public final double kCFCoreFoundationVersionNumber10_4_6_Intel(){ return 368.26d; }
	public final float kCFCoreFoundationVersionNumber10_4_6_PowerPC(){ return 368.25f; }
	public final double kCFCoreFoundationVersionNumber10_4_7(){ return 368.27d; }
	public final double kCFCoreFoundationVersionNumber10_4_8(){ return 368.27d; }
	public final double kCFCoreFoundationVersionNumber10_4_9(){ return 368.28d; }
	public final float kCFCoreFoundationVersionNumber10_5(){ return 476.00f; }
	public final float kCFCoreFoundationVersionNumber10_5_1(){ return 476.00f; }
	public final double kCFCoreFoundationVersionNumber10_5_2(){ return 476.10d; }
	public final double kCFCoreFoundationVersionNumber10_5_3(){ return 476.13d; }
	public final double kCFCoreFoundationVersionNumber10_5_4(){ return 476.14d; }
	public final double kCFCoreFoundationVersionNumber10_5_5(){ return 476.15d; }
	public final double kCFCoreFoundationVersionNumber10_5_6(){ return 476.17d; }
	public final double kCFCoreFoundationVersionNumber10_5_7(){ return 476.18d; }
	public final double kCFCoreFoundationVersionNumber10_5_8(){ return 476.19d; }
	public final float kCFCoreFoundationVersionNumber10_6(){ return 550.00f; }
	public final float kCFCoreFoundationVersionNumber10_6_1(){ return 550.00f; }
	public final double kCFCoreFoundationVersionNumber10_6_2(){ return 550.13d; }
	public final double kCFCoreFoundationVersionNumber10_6_3(){ return 550.19d; }
	public final double kCFCoreFoundationVersionNumber10_6_4(){ return 550.29d; }
	public final double kCFCoreFoundationVersionNumber10_6_5(){ return 550.42d; }
	public final double kCFCoreFoundationVersionNumber10_6_6(){ return 550.42d; }
	public final double kCFCoreFoundationVersionNumber10_6_7(){ return 550.42d; }
	public final double kCFCoreFoundationVersionNumber10_6_8(){ return 550.43d; }
	public final float kCFCoreFoundationVersionNumber10_7(){ return 635.00f; }
	public final float kCFCoreFoundationVersionNumber10_7_1(){ return 635.00f; }
	public final double kCFCoreFoundationVersionNumber10_7_2(){ return 635.15d; }
	public final double kCFCoreFoundationVersionNumber10_7_3(){ return 635.19d; }
	public final double kCFCoreFoundationVersionNumber10_7_4(){ return 635.21d; }
	public final int kCFDataSearchAnchored(){ return 2 ; }
	public final int kCFDataSearchBackwards(){ return 1 ; }
	public final int kCFDateFormatterFullStyle(){ return 4 ; }
	public final int kCFDateFormatterLongStyle(){ return 3 ; }
	public final int kCFDateFormatterMediumStyle(){ return 2 ; }
	public final int kCFDateFormatterNoStyle(){ return 0 ; }
	public final int kCFDateFormatterShortStyle(){ return 1 ; }
	public final int kCFFileDescriptorReadCallBack(){ return 1 ; }
	public final int kCFFileDescriptorWriteCallBack(){ return 2 ; }
	public final int kCFFileSecurityClearAccessControlList(){ return 32 ; }
	public final int kCFFileSecurityClearGroup(){ return 2 ; }
	public final int kCFFileSecurityClearGroupUUID(){ return 16 ; }
	public final int kCFFileSecurityClearMode(){ return 4 ; }
	public final int kCFFileSecurityClearOwner(){ return 1 ; }
	public final int kCFFileSecurityClearOwnerUUID(){ return 8 ; }
	public final int kCFGregorianAllUnits(){ return 16777215 ; }
	public final int kCFGregorianUnitsDays(){ return 4 ; }
	public final int kCFGregorianUnitsHours(){ return 8 ; }
	public final int kCFGregorianUnitsMinutes(){ return 16 ; }
	public final int kCFGregorianUnitsMonths(){ return 2 ; }
	public final int kCFGregorianUnitsSeconds(){ return 32 ; }
	public final int kCFGregorianUnitsYears(){ return 1 ; }
	public final int kCFLocaleLanguageDirectionBottomToTop(){ return 4 ; }
	public final int kCFLocaleLanguageDirectionLeftToRight(){ return 1 ; }
	public final int kCFLocaleLanguageDirectionRightToLeft(){ return 2 ; }
	public final int kCFLocaleLanguageDirectionTopToBottom(){ return 3 ; }
	public final int kCFLocaleLanguageDirectionUnknown(){ return 0 ; }
	public final int kCFMessagePortBecameInvalidError(){ return -5 ; }
	public final int kCFMessagePortIsInvalid(){ return -3 ; }
	public final int kCFMessagePortReceiveTimeout(){ return -2 ; }
	public final int kCFMessagePortSendTimeout(){ return -1 ; }
	public final int kCFMessagePortSuccess(){ return 0 ; }
	public final int kCFMessagePortTransportError(){ return -4 ; }
	public final int kCFNotFound(){ return -1 ; }
	public final int kCFNotificationDeliverImmediately(){ return 1 ; }
	public final int kCFNotificationPostToAllSessions(){ return 2 ; }
	public final int kCFNumberCFIndexType(){ return 14 ; }
	public final int kCFNumberCGFloatType(){ return 16 ; }
	public final int kCFNumberCharType(){ return 7 ; }
	public final int kCFNumberDoubleType(){ return 13 ; }
	public final int kCFNumberFloat32Type(){ return 5 ; }
	public final int kCFNumberFloat64Type(){ return 6 ; }
	public final int kCFNumberFloatType(){ return 12 ; }
	public final int kCFNumberFormatterCurrencyStyle(){ return 2 ; }
	public final int kCFNumberFormatterDecimalStyle(){ return 1 ; }
	public final int kCFNumberFormatterNoStyle(){ return 0 ; }
	public final int kCFNumberFormatterPadAfterPrefix(){ return 1 ; }
	public final int kCFNumberFormatterPadAfterSuffix(){ return 3 ; }
	public final int kCFNumberFormatterPadBeforePrefix(){ return 0 ; }
	public final int kCFNumberFormatterPadBeforeSuffix(){ return 2 ; }
	public final int kCFNumberFormatterParseIntegersOnly(){ return 1 ; }
	public final int kCFNumberFormatterPercentStyle(){ return 3 ; }
	public final int kCFNumberFormatterRoundCeiling(){ return 0 ; }
	public final int kCFNumberFormatterRoundDown(){ return 2 ; }
	public final int kCFNumberFormatterRoundFloor(){ return 1 ; }
	public final int kCFNumberFormatterRoundHalfDown(){ return 5 ; }
	public final int kCFNumberFormatterRoundHalfEven(){ return 4 ; }
	public final int kCFNumberFormatterRoundHalfUp(){ return 6 ; }
	public final int kCFNumberFormatterRoundUp(){ return 3 ; }
	public final int kCFNumberFormatterScientificStyle(){ return 4 ; }
	public final int kCFNumberFormatterSpellOutStyle(){ return 5 ; }
	public final int kCFNumberIntType(){ return 9 ; }
	public final int kCFNumberLongLongType(){ return 11 ; }
	public final int kCFNumberLongType(){ return 10 ; }
	public final int kCFNumberMaxType(){ return 16 ; }
	public final int kCFNumberNSIntegerType(){ return 15 ; }
	public final int kCFNumberSInt16Type(){ return 2 ; }
	public final int kCFNumberSInt32Type(){ return 3 ; }
	public final int kCFNumberSInt64Type(){ return 4 ; }
	public final int kCFNumberSInt8Type(){ return 1 ; }
	public final int kCFNumberShortType(){ return 8 ; }
	public final int kCFPropertyListBinaryFormat_v1_0(){ return 200 ; }
	public final int kCFPropertyListImmutable(){ return 0 ; }
	public final int kCFPropertyListMutableContainers(){ return 1 ; }
	public final int kCFPropertyListMutableContainersAndLeaves(){ return 2 ; }
	public final int kCFPropertyListOpenStepFormat(){ return 1 ; }
	public final int kCFPropertyListReadCorruptError(){ return 3840 ; }
	public final int kCFPropertyListReadStreamError(){ return 3842 ; }
	public final int kCFPropertyListReadUnknownVersionError(){ return 3841 ; }
	public final int kCFPropertyListWriteStreamError(){ return 3851 ; }
	public final int kCFPropertyListXMLFormat_v1_0(){ return 100 ; }
	public final int kCFRunLoopAfterWaiting(){ return 64 ; }
	public final int kCFRunLoopAllActivities(){ return 268435455 ; }
	public final int kCFRunLoopBeforeSources(){ return 4 ; }
	public final int kCFRunLoopBeforeTimers(){ return 2 ; }
	public final int kCFRunLoopBeforeWaiting(){ return 32 ; }
	public final int kCFRunLoopEntry(){ return 1 ; }
	public final int kCFRunLoopExit(){ return 128 ; }
	public final int kCFRunLoopRunFinished(){ return 1 ; }
	public final int kCFRunLoopRunHandledSource(){ return 4 ; }
	public final int kCFRunLoopRunStopped(){ return 2 ; }
	public final int kCFRunLoopRunTimedOut(){ return 3 ; }
	public final int kCFSocketAcceptCallBack(){ return 2 ; }
	public final int kCFSocketAutomaticallyReenableAcceptCallBack(){ return 2 ; }
	public final int kCFSocketAutomaticallyReenableDataCallBack(){ return 3 ; }
	public final int kCFSocketAutomaticallyReenableReadCallBack(){ return 1 ; }
	public final int kCFSocketAutomaticallyReenableWriteCallBack(){ return 8 ; }
	public final int kCFSocketCloseOnInvalidate(){ return 128 ; }
	public final int kCFSocketConnectCallBack(){ return 4 ; }
	public final int kCFSocketDataCallBack(){ return 3 ; }
	public final int kCFSocketError(){ return -1 ; }
	public final int kCFSocketLeaveErrors(){ return 64 ; }
	public final int kCFSocketNoCallBack(){ return 0 ; }
	public final int kCFSocketReadCallBack(){ return 1 ; }
	public final int kCFSocketSuccess(){ return 0 ; }
	public final int kCFSocketTimeout(){ return -2 ; }
	public final int kCFSocketWriteCallBack(){ return 8 ; }
	public final int kCFStreamErrorDomainCustom(){ return -1 ; }
	public final int kCFStreamErrorDomainMacOSStatus(){ return 2 ; }
	public final int kCFStreamErrorDomainPOSIX(){ return 1 ; }
	public final int kCFStreamEventCanAcceptBytes(){ return 4 ; }
	public final int kCFStreamEventEndEncountered(){ return 16 ; }
	public final int kCFStreamEventErrorOccurred(){ return 8 ; }
	public final int kCFStreamEventHasBytesAvailable(){ return 2 ; }
	public final int kCFStreamEventNone(){ return 0 ; }
	public final int kCFStreamEventOpenCompleted(){ return 1 ; }
	public final int kCFStreamStatusAtEnd(){ return 5 ; }
	public final int kCFStreamStatusClosed(){ return 6 ; }
	public final int kCFStreamStatusError(){ return 7 ; }
	public final int kCFStreamStatusNotOpen(){ return 0 ; }
	public final int kCFStreamStatusOpen(){ return 2 ; }
	public final int kCFStreamStatusOpening(){ return 1 ; }
	public final int kCFStreamStatusReading(){ return 3 ; }
	public final int kCFStreamStatusWriting(){ return 4 ; }
	public final int kCFStringEncodingANSEL(){ return 1537 ; }
	public final int kCFStringEncodingASCII(){ return 1536 ; }
	public final int kCFStringEncodingBig5(){ return 2563 ; }
	public final int kCFStringEncodingBig5_E(){ return 2569 ; }
	public final int kCFStringEncodingBig5_HKSCS_1999(){ return 2566 ; }
	public final int kCFStringEncodingCNS_11643_92_P1(){ return 1617 ; }
	public final int kCFStringEncodingCNS_11643_92_P2(){ return 1618 ; }
	public final int kCFStringEncodingCNS_11643_92_P3(){ return 1619 ; }
	public final int kCFStringEncodingDOSArabic(){ return 1049 ; }
	public final int kCFStringEncodingDOSBalticRim(){ return 1030 ; }
	public final int kCFStringEncodingDOSCanadianFrench(){ return 1048 ; }
	public final int kCFStringEncodingDOSChineseSimplif(){ return 1057 ; }
	public final int kCFStringEncodingDOSChineseTrad(){ return 1059 ; }
	public final int kCFStringEncodingDOSCyrillic(){ return 1043 ; }
	public final int kCFStringEncodingDOSGreek(){ return 1029 ; }
	public final int kCFStringEncodingDOSGreek1(){ return 1041 ; }
	public final int kCFStringEncodingDOSGreek2(){ return 1052 ; }
	public final int kCFStringEncodingDOSHebrew(){ return 1047 ; }
	public final int kCFStringEncodingDOSIcelandic(){ return 1046 ; }
	public final int kCFStringEncodingDOSJapanese(){ return 1056 ; }
	public final int kCFStringEncodingDOSKorean(){ return 1058 ; }
	public final int kCFStringEncodingDOSLatin1(){ return 1040 ; }
	public final int kCFStringEncodingDOSLatin2(){ return 1042 ; }
	public final int kCFStringEncodingDOSLatinUS(){ return 1024 ; }
	public final int kCFStringEncodingDOSNordic(){ return 1050 ; }
	public final int kCFStringEncodingDOSPortuguese(){ return 1045 ; }
	public final int kCFStringEncodingDOSRussian(){ return 1051 ; }
	public final int kCFStringEncodingDOSThai(){ return 1053 ; }
	public final int kCFStringEncodingDOSTurkish(){ return 1044 ; }
	public final int kCFStringEncodingEBCDIC_CP037(){ return 3074 ; }
	public final int kCFStringEncodingEBCDIC_US(){ return 3073 ; }
	public final int kCFStringEncodingEUC_CN(){ return 2352 ; }
	public final int kCFStringEncodingEUC_JP(){ return 2336 ; }
	public final int kCFStringEncodingEUC_KR(){ return 2368 ; }
	public final int kCFStringEncodingEUC_TW(){ return 2353 ; }
	public final int kCFStringEncodingGBK_95(){ return 1585 ; }
	public final int kCFStringEncodingGB_18030_2000(){ return 1586 ; }
	public final int kCFStringEncodingGB_2312_80(){ return 1584 ; }
	public final int kCFStringEncodingHZ_GB_2312(){ return 2565 ; }
	public final int kCFStringEncodingISOLatin1(){ return 513 ; }
	public final int kCFStringEncodingISOLatin10(){ return 528 ; }
	public final int kCFStringEncodingISOLatin2(){ return 514 ; }
	public final int kCFStringEncodingISOLatin3(){ return 515 ; }
	public final int kCFStringEncodingISOLatin4(){ return 516 ; }
	public final int kCFStringEncodingISOLatin5(){ return 521 ; }
	public final int kCFStringEncodingISOLatin6(){ return 522 ; }
	public final int kCFStringEncodingISOLatin7(){ return 525 ; }
	public final int kCFStringEncodingISOLatin8(){ return 526 ; }
	public final int kCFStringEncodingISOLatin9(){ return 527 ; }
	public final int kCFStringEncodingISOLatinArabic(){ return 518 ; }
	public final int kCFStringEncodingISOLatinCyrillic(){ return 517 ; }
	public final int kCFStringEncodingISOLatinGreek(){ return 519 ; }
	public final int kCFStringEncodingISOLatinHebrew(){ return 520 ; }
	public final int kCFStringEncodingISOLatinThai(){ return 523 ; }
	public final int kCFStringEncodingISO_2022_CN(){ return 2096 ; }
	public final int kCFStringEncodingISO_2022_CN_EXT(){ return 2097 ; }
	public final int kCFStringEncodingISO_2022_JP(){ return 2080 ; }
	public final int kCFStringEncodingISO_2022_JP_1(){ return 2082 ; }
	public final int kCFStringEncodingISO_2022_JP_2(){ return 2081 ; }
	public final int kCFStringEncodingISO_2022_JP_3(){ return 2083 ; }
	public final int kCFStringEncodingISO_2022_KR(){ return 2112 ; }
	public final long kCFStringEncodingInvalidId(){ return 4294967295l; }
	public final int kCFStringEncodingJIS_C6226_78(){ return 1572 ; }
	public final int kCFStringEncodingJIS_X0201_76(){ return 1568 ; }
	public final int kCFStringEncodingJIS_X0208_83(){ return 1569 ; }
	public final int kCFStringEncodingJIS_X0208_90(){ return 1570 ; }
	public final int kCFStringEncodingJIS_X0212_90(){ return 1571 ; }
	public final int kCFStringEncodingKOI8_R(){ return 2562 ; }
	public final int kCFStringEncodingKOI8_U(){ return 2568 ; }
	public final int kCFStringEncodingKSC_5601_87(){ return 1600 ; }
	public final int kCFStringEncodingKSC_5601_92_Johab(){ return 1601 ; }
	public final int kCFStringEncodingMacArabic(){ return 4 ; }
	public final int kCFStringEncodingMacArmenian(){ return 24 ; }
	public final int kCFStringEncodingMacBengali(){ return 13 ; }
	public final int kCFStringEncodingMacBurmese(){ return 19 ; }
	public final int kCFStringEncodingMacCeltic(){ return 39 ; }
	public final int kCFStringEncodingMacCentralEurRoman(){ return 29 ; }
	public final int kCFStringEncodingMacChineseSimp(){ return 25 ; }
	public final int kCFStringEncodingMacChineseTrad(){ return 2 ; }
	public final int kCFStringEncodingMacCroatian(){ return 36 ; }
	public final int kCFStringEncodingMacCyrillic(){ return 7 ; }
	public final int kCFStringEncodingMacDevanagari(){ return 9 ; }
	public final int kCFStringEncodingMacDingbats(){ return 34 ; }
	public final int kCFStringEncodingMacEthiopic(){ return 28 ; }
	public final int kCFStringEncodingMacExtArabic(){ return 31 ; }
	public final int kCFStringEncodingMacFarsi(){ return 140 ; }
	public final int kCFStringEncodingMacGaelic(){ return 40 ; }
	public final int kCFStringEncodingMacGeorgian(){ return 23 ; }
	public final int kCFStringEncodingMacGreek(){ return 6 ; }
	public final int kCFStringEncodingMacGujarati(){ return 11 ; }
	public final int kCFStringEncodingMacGurmukhi(){ return 10 ; }
	public final int kCFStringEncodingMacHFS(){ return 255 ; }
	public final int kCFStringEncodingMacHebrew(){ return 5 ; }
	public final int kCFStringEncodingMacIcelandic(){ return 37 ; }
	public final int kCFStringEncodingMacInuit(){ return 236 ; }
	public final int kCFStringEncodingMacJapanese(){ return 1 ; }
	public final int kCFStringEncodingMacKannada(){ return 16 ; }
	public final int kCFStringEncodingMacKhmer(){ return 20 ; }
	public final int kCFStringEncodingMacKorean(){ return 3 ; }
	public final int kCFStringEncodingMacLaotian(){ return 22 ; }
	public final int kCFStringEncodingMacMalayalam(){ return 17 ; }
	public final int kCFStringEncodingMacMongolian(){ return 27 ; }
	public final int kCFStringEncodingMacOriya(){ return 12 ; }
	public final int kCFStringEncodingMacRoman(){ return 0 ; }
	public final int kCFStringEncodingMacRomanLatin1(){ return 2564 ; }
	public final int kCFStringEncodingMacRomanian(){ return 38 ; }
	public final int kCFStringEncodingMacSinhalese(){ return 18 ; }
	public final int kCFStringEncodingMacSymbol(){ return 33 ; }
	public final int kCFStringEncodingMacTamil(){ return 14 ; }
	public final int kCFStringEncodingMacTelugu(){ return 15 ; }
	public final int kCFStringEncodingMacThai(){ return 21 ; }
	public final int kCFStringEncodingMacTibetan(){ return 26 ; }
	public final int kCFStringEncodingMacTurkish(){ return 35 ; }
	public final int kCFStringEncodingMacUkrainian(){ return 152 ; }
	public final int kCFStringEncodingMacVT100(){ return 252 ; }
	public final int kCFStringEncodingMacVietnamese(){ return 30 ; }
	public final int kCFStringEncodingNextStepJapanese(){ return 2818 ; }
	public final int kCFStringEncodingNextStepLatin(){ return 2817 ; }
	public final int kCFStringEncodingNonLossyASCII(){ return 3071 ; }
	public final int kCFStringEncodingShiftJIS(){ return 2561 ; }
	public final int kCFStringEncodingShiftJIS_X0213(){ return 1576 ; }
	public final int kCFStringEncodingShiftJIS_X0213_00(){ return 1576 ; }
	public final int kCFStringEncodingShiftJIS_X0213_MenKuTen(){ return 1577 ; }
	public final int kCFStringEncodingUTF16(){ return 256 ; }
	public final int kCFStringEncodingUTF16BE(){ return 268435712 ; }
	public final int kCFStringEncodingUTF16LE(){ return 335544576 ; }
	public final int kCFStringEncodingUTF32(){ return 201326848 ; }
	public final int kCFStringEncodingUTF32BE(){ return 402653440 ; }
	public final int kCFStringEncodingUTF32LE(){ return 469762304 ; }
	public final int kCFStringEncodingUTF7(){ return 67109120 ; }
	public final int kCFStringEncodingUTF7_IMAP(){ return 2576 ; }
	public final int kCFStringEncodingUTF8(){ return 134217984 ; }
	public final int kCFStringEncodingUnicode(){ return 256 ; }
	public final int kCFStringEncodingVISCII(){ return 2567 ; }
	public final int kCFStringEncodingWindowsArabic(){ return 1286 ; }
	public final int kCFStringEncodingWindowsBalticRim(){ return 1287 ; }
	public final int kCFStringEncodingWindowsCyrillic(){ return 1282 ; }
	public final int kCFStringEncodingWindowsGreek(){ return 1283 ; }
	public final int kCFStringEncodingWindowsHebrew(){ return 1285 ; }
	public final int kCFStringEncodingWindowsKoreanJohab(){ return 1296 ; }
	public final int kCFStringEncodingWindowsLatin1(){ return 1280 ; }
	public final int kCFStringEncodingWindowsLatin2(){ return 1281 ; }
	public final int kCFStringEncodingWindowsLatin5(){ return 1284 ; }
	public final int kCFStringEncodingWindowsVietnamese(){ return 1288 ; }
	public final int kCFStringNormalizationFormC(){ return 2 ; }
	public final int kCFStringNormalizationFormD(){ return 0 ; }
	public final int kCFStringNormalizationFormKC(){ return 3 ; }
	public final int kCFStringNormalizationFormKD(){ return 1 ; }
	public final int kCFStringTokenizerAttributeLanguage(){ return 131072 ; }
	public final int kCFStringTokenizerAttributeLatinTranscription(){ return 65536 ; }
	public final int kCFStringTokenizerTokenHasDerivedSubTokensMask(){ return 4 ; }
	public final int kCFStringTokenizerTokenHasHasNumbersMask(){ return 8 ; }
	public final int kCFStringTokenizerTokenHasNonLettersMask(){ return 16 ; }
	public final int kCFStringTokenizerTokenHasSubTokensMask(){ return 2 ; }
	public final int kCFStringTokenizerTokenIsCJWordMask(){ return 32 ; }
	public final int kCFStringTokenizerTokenNone(){ return 0 ; }
	public final int kCFStringTokenizerTokenNormal(){ return 1 ; }
	public final int kCFStringTokenizerUnitLineBreak(){ return 3 ; }
	public final int kCFStringTokenizerUnitParagraph(){ return 2 ; }
	public final int kCFStringTokenizerUnitSentence(){ return 1 ; }
	public final int kCFStringTokenizerUnitWord(){ return 0 ; }
	public final int kCFStringTokenizerUnitWordBoundary(){ return 4 ; }
	public final int kCFTimeZoneNameStyleDaylightSaving(){ return 2 ; }
	public final int kCFTimeZoneNameStyleGeneric(){ return 4 ; }
	public final int kCFTimeZoneNameStyleShortDaylightSaving(){ return 3 ; }
	public final int kCFTimeZoneNameStyleShortGeneric(){ return 5 ; }
	public final int kCFTimeZoneNameStyleShortStandard(){ return 1 ; }
	public final int kCFTimeZoneNameStyleStandard(){ return 0 ; }
	public final int kCFURLBookmarkCreationMinimalBookmarkMask(){ return 512 ; }
	public final int kCFURLBookmarkCreationPreferFileIDResolutionMask(){ return 256 ; }
	public final int kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess(){ return 4096 ; }
	public final int kCFURLBookmarkCreationSuitableForBookmarkFile(){ return 1024 ; }
	public final int kCFURLBookmarkCreationWithSecurityScope(){ return 2048 ; }
	public final int kCFURLBookmarkResolutionWithSecurityScope(){ return 1024 ; }
	public final int kCFURLComponentFragment(){ return 12 ; }
	public final int kCFURLComponentHost(){ return 8 ; }
	public final int kCFURLComponentNetLocation(){ return 2 ; }
	public final int kCFURLComponentParameterString(){ return 10 ; }
	public final int kCFURLComponentPassword(){ return 6 ; }
	public final int kCFURLComponentPath(){ return 3 ; }
	public final int kCFURLComponentPort(){ return 9 ; }
	public final int kCFURLComponentQuery(){ return 11 ; }
	public final int kCFURLComponentResourceSpecifier(){ return 4 ; }
	public final int kCFURLComponentScheme(){ return 1 ; }
	public final int kCFURLComponentUser(){ return 5 ; }
	public final int kCFURLComponentUserInfo(){ return 7 ; }
	public final int kCFURLEnumeratorDefaultBehavior(){ return 0 ; }
	public final int kCFURLEnumeratorDescendRecursively(){ return 1 ; }
	public final int kCFURLEnumeratorDirectoryPostOrderSuccess(){ return 4 ; }
	public final int kCFURLEnumeratorEnd(){ return 2 ; }
	public final int kCFURLEnumeratorError(){ return 3 ; }
	public final int kCFURLEnumeratorGenerateFileReferenceURLs(){ return 4 ; }
	public final int kCFURLEnumeratorIncludeDirectoriesPostOrder(){ return 32 ; }
	public final int kCFURLEnumeratorIncludeDirectoriesPreOrder(){ return 16 ; }
	public final int kCFURLEnumeratorSkipInvisibles(){ return 2 ; }
	public final int kCFURLEnumeratorSkipPackageContents(){ return 8 ; }
	public final int kCFURLEnumeratorSuccess(){ return 1 ; }
	public final int kCFURLHFSPathStyle(){ return 1 ; }
	public final int kCFURLImproperArgumentsError(){ return -15 ; }
	public final int kCFURLPOSIXPathStyle(){ return 0 ; }
	public final int kCFURLPropertyKeyUnavailableError(){ return -17 ; }
	public final int kCFURLRemoteHostUnavailableError(){ return -14 ; }
	public final int kCFURLResourceAccessViolationError(){ return -13 ; }
	public final int kCFURLResourceNotFoundError(){ return -12 ; }
	public final int kCFURLTimeoutError(){ return -18 ; }
	public final int kCFURLUnknownError(){ return -10 ; }
	public final int kCFURLUnknownPropertyKeyError(){ return -16 ; }
	public final int kCFURLUnknownSchemeError(){ return -11 ; }
	public final int kCFURLWindowsPathStyle(){ return 2 ; }
	public final int kCFUserNotificationAlternateResponse(){ return 1 ; }
	public final int kCFUserNotificationCancelResponse(){ return 3 ; }
	public final int kCFUserNotificationCautionAlertLevel(){ return 2 ; }
	public final int kCFUserNotificationDefaultResponse(){ return 0 ; }
	public final int kCFUserNotificationNoDefaultButtonFlag(){ return 32 ; }
	public final int kCFUserNotificationNoteAlertLevel(){ return 1 ; }
	public final int kCFUserNotificationOtherResponse(){ return 2 ; }
	public final int kCFUserNotificationPlainAlertLevel(){ return 3 ; }
	public final int kCFUserNotificationStopAlertLevel(){ return 0 ; }
	public final int kCFUserNotificationUseRadioButtonsFlag(){ return 64 ; }
	public final int kCFXMLEntityTypeCharacter(){ return 4 ; }
	public final int kCFXMLEntityTypeParameter(){ return 0 ; }
	public final int kCFXMLEntityTypeParsedExternal(){ return 2 ; }
	public final int kCFXMLEntityTypeParsedInternal(){ return 1 ; }
	public final int kCFXMLEntityTypeUnparsed(){ return 3 ; }
	public final int kCFXMLErrorElementlessDocument(){ return 11 ; }
	public final int kCFXMLErrorEncodingConversionFailure(){ return 3 ; }
	public final int kCFXMLErrorMalformedCDSect(){ return 7 ; }
	public final int kCFXMLErrorMalformedCharacterReference(){ return 13 ; }
	public final int kCFXMLErrorMalformedCloseTag(){ return 8 ; }
	public final int kCFXMLErrorMalformedComment(){ return 12 ; }
	public final int kCFXMLErrorMalformedDTD(){ return 5 ; }
	public final int kCFXMLErrorMalformedDocument(){ return 10 ; }
	public final int kCFXMLErrorMalformedName(){ return 6 ; }
	public final int kCFXMLErrorMalformedParsedCharacterData(){ return 14 ; }
	public final int kCFXMLErrorMalformedProcessingInstruction(){ return 4 ; }
	public final int kCFXMLErrorMalformedStartTag(){ return 9 ; }
	public final int kCFXMLErrorNoData(){ return 15 ; }
	public final int kCFXMLErrorUnexpectedEOF(){ return 1 ; }
	public final int kCFXMLErrorUnknownEncoding(){ return 2 ; }
	public final int kCFXMLNodeCurrentVersion(){ return 1 ; }
	public final int kCFXMLNodeTypeAttribute(){ return 3 ; }
	public final int kCFXMLNodeTypeAttributeListDeclaration(){ return 15 ; }
	public final int kCFXMLNodeTypeCDATASection(){ return 7 ; }
	public final int kCFXMLNodeTypeComment(){ return 5 ; }
	public final int kCFXMLNodeTypeDocument(){ return 1 ; }
	public final int kCFXMLNodeTypeDocumentFragment(){ return 8 ; }
	public final int kCFXMLNodeTypeDocumentType(){ return 11 ; }
	public final int kCFXMLNodeTypeElement(){ return 2 ; }
	public final int kCFXMLNodeTypeElementTypeDeclaration(){ return 14 ; }
	public final int kCFXMLNodeTypeEntity(){ return 9 ; }
	public final int kCFXMLNodeTypeEntityReference(){ return 10 ; }
	public final int kCFXMLNodeTypeNotation(){ return 13 ; }
	public final int kCFXMLNodeTypeProcessingInstruction(){ return 4 ; }
	public final int kCFXMLNodeTypeText(){ return 6 ; }
	public final int kCFXMLNodeTypeWhitespace(){ return 12 ; }
	public final int kCFXMLParserAddImpliedAttributes(){ return 32 ; }
	public final int kCFXMLParserAllOptions(){ return 16777215 ; }
	public final int kCFXMLParserNoOptions(){ return 0 ; }
	public final int kCFXMLParserReplacePhysicalEntities(){ return 4 ; }
	public final int kCFXMLParserResolveExternalEntities(){ return 16 ; }
	public final int kCFXMLParserSkipMetaData(){ return 2 ; }
	public final int kCFXMLParserSkipWhitespace(){ return 8 ; }
	public final int kCFXMLParserValidateDocument(){ return 1 ; }
	public final int kCFXMLStatusParseInProgress(){ return -1 ; }
	public final int kCFXMLStatusParseNotBegun(){ return -2 ; }
	public final int kCFXMLStatusParseSuccessful(){ return 0 ; }

	private double _kCFAbsoluteTimeIntervalSince1904 = 0;
	 final public double kCFAbsoluteTimeIntervalSince1904(){
		if(_kCFAbsoluteTimeIntervalSince1904 != 0) return _kCFAbsoluteTimeIntervalSince1904;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFAbsoluteTimeIntervalSince1904", nativeBuffer, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.sizeof());
		final double returnValue = (double) (com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.popDouble(nativeBuffer));
		_kCFAbsoluteTimeIntervalSince1904 = returnValue;
		return returnValue;
	}

	private double _kCFAbsoluteTimeIntervalSince1970 = 0;
	 final public double kCFAbsoluteTimeIntervalSince1970(){
		if(_kCFAbsoluteTimeIntervalSince1970 != 0) return _kCFAbsoluteTimeIntervalSince1970;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFAbsoluteTimeIntervalSince1970", nativeBuffer, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.sizeof());
		final double returnValue = (double) (com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.popDouble(nativeBuffer));
		_kCFAbsoluteTimeIntervalSince1970 = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFAllocatorRefCFType _kCFAllocatorDefault = null;
	 final public com.apple.jobjc.corefoundation.CFAllocatorRefCFType kCFAllocatorDefault(){
		if(_kCFAllocatorDefault != null) return _kCFAllocatorDefault;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFAllocatorDefault", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFAllocatorRefCFType returnValue = (com.apple.jobjc.corefoundation.CFAllocatorRefCFType) new com.apple.jobjc.corefoundation.CFAllocatorRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFAllocatorDefault = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFAllocatorRefCFType _kCFAllocatorMalloc = null;
	 final public com.apple.jobjc.corefoundation.CFAllocatorRefCFType kCFAllocatorMalloc(){
		if(_kCFAllocatorMalloc != null) return _kCFAllocatorMalloc;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFAllocatorMalloc", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFAllocatorRefCFType returnValue = (com.apple.jobjc.corefoundation.CFAllocatorRefCFType) new com.apple.jobjc.corefoundation.CFAllocatorRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFAllocatorMalloc = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFAllocatorRefCFType _kCFAllocatorMallocZone = null;
	 final public com.apple.jobjc.corefoundation.CFAllocatorRefCFType kCFAllocatorMallocZone(){
		if(_kCFAllocatorMallocZone != null) return _kCFAllocatorMallocZone;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFAllocatorMallocZone", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFAllocatorRefCFType returnValue = (com.apple.jobjc.corefoundation.CFAllocatorRefCFType) new com.apple.jobjc.corefoundation.CFAllocatorRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFAllocatorMallocZone = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFAllocatorRefCFType _kCFAllocatorNull = null;
	 final public com.apple.jobjc.corefoundation.CFAllocatorRefCFType kCFAllocatorNull(){
		if(_kCFAllocatorNull != null) return _kCFAllocatorNull;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFAllocatorNull", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFAllocatorRefCFType returnValue = (com.apple.jobjc.corefoundation.CFAllocatorRefCFType) new com.apple.jobjc.corefoundation.CFAllocatorRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFAllocatorNull = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFAllocatorRefCFType _kCFAllocatorSystemDefault = null;
	 final public com.apple.jobjc.corefoundation.CFAllocatorRefCFType kCFAllocatorSystemDefault(){
		if(_kCFAllocatorSystemDefault != null) return _kCFAllocatorSystemDefault;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFAllocatorSystemDefault", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFAllocatorRefCFType returnValue = (com.apple.jobjc.corefoundation.CFAllocatorRefCFType) new com.apple.jobjc.corefoundation.CFAllocatorRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFAllocatorSystemDefault = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFAllocatorRefCFType _kCFAllocatorUseContext = null;
	 final public com.apple.jobjc.corefoundation.CFAllocatorRefCFType kCFAllocatorUseContext(){
		if(_kCFAllocatorUseContext != null) return _kCFAllocatorUseContext;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFAllocatorUseContext", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFAllocatorRefCFType returnValue = (com.apple.jobjc.corefoundation.CFAllocatorRefCFType) new com.apple.jobjc.corefoundation.CFAllocatorRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFAllocatorUseContext = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFBooleanRefCFType _kCFBooleanFalse = null;
	 final public com.apple.jobjc.corefoundation.CFBooleanRefCFType kCFBooleanFalse(){
		if(_kCFBooleanFalse != null) return _kCFBooleanFalse;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFBooleanFalse", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFBooleanRefCFType returnValue = (com.apple.jobjc.corefoundation.CFBooleanRefCFType) new com.apple.jobjc.corefoundation.CFBooleanRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFBooleanFalse = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFBooleanRefCFType _kCFBooleanTrue = null;
	 final public com.apple.jobjc.corefoundation.CFBooleanRefCFType kCFBooleanTrue(){
		if(_kCFBooleanTrue != null) return _kCFBooleanTrue;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFBooleanTrue", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFBooleanRefCFType returnValue = (com.apple.jobjc.corefoundation.CFBooleanRefCFType) new com.apple.jobjc.corefoundation.CFBooleanRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFBooleanTrue = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFBuddhistCalendar = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFBuddhistCalendar(){
		if(_kCFBuddhistCalendar != null) return _kCFBuddhistCalendar;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFBuddhistCalendar", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFBuddhistCalendar = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFBundleDevelopmentRegionKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFBundleDevelopmentRegionKey(){
		if(_kCFBundleDevelopmentRegionKey != null) return _kCFBundleDevelopmentRegionKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFBundleDevelopmentRegionKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFBundleDevelopmentRegionKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFBundleExecutableKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFBundleExecutableKey(){
		if(_kCFBundleExecutableKey != null) return _kCFBundleExecutableKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFBundleExecutableKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFBundleExecutableKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFBundleIdentifierKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFBundleIdentifierKey(){
		if(_kCFBundleIdentifierKey != null) return _kCFBundleIdentifierKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFBundleIdentifierKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFBundleIdentifierKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFBundleInfoDictionaryVersionKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFBundleInfoDictionaryVersionKey(){
		if(_kCFBundleInfoDictionaryVersionKey != null) return _kCFBundleInfoDictionaryVersionKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFBundleInfoDictionaryVersionKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFBundleInfoDictionaryVersionKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFBundleLocalizationsKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFBundleLocalizationsKey(){
		if(_kCFBundleLocalizationsKey != null) return _kCFBundleLocalizationsKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFBundleLocalizationsKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFBundleLocalizationsKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFBundleNameKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFBundleNameKey(){
		if(_kCFBundleNameKey != null) return _kCFBundleNameKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFBundleNameKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFBundleNameKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFBundleVersionKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFBundleVersionKey(){
		if(_kCFBundleVersionKey != null) return _kCFBundleVersionKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFBundleVersionKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFBundleVersionKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFChineseCalendar = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFChineseCalendar(){
		if(_kCFChineseCalendar != null) return _kCFChineseCalendar;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFChineseCalendar", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFChineseCalendar = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFBagCallBacks _kCFCopyStringBagCallBacks = null;
	 final public com.apple.jobjc.corefoundation.CFBagCallBacks kCFCopyStringBagCallBacks(){
		if(_kCFCopyStringBagCallBacks != null) return _kCFCopyStringBagCallBacks;
				com.apple.jobjc.corefoundation.CFBagCallBacks returnValue = com.apple.jobjc.JObjC.getInstance(getRuntime()).CoreFoundation().makeCFBagCallBacks();
		getConstant("kCFCopyStringBagCallBacks", returnValue, com.apple.jobjc.corefoundation.CFBagCallBacks.getStructCoder().sizeof());
		
		_kCFCopyStringBagCallBacks = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFDictionaryKeyCallBacks _kCFCopyStringDictionaryKeyCallBacks = null;
	 final public com.apple.jobjc.corefoundation.CFDictionaryKeyCallBacks kCFCopyStringDictionaryKeyCallBacks(){
		if(_kCFCopyStringDictionaryKeyCallBacks != null) return _kCFCopyStringDictionaryKeyCallBacks;
				com.apple.jobjc.corefoundation.CFDictionaryKeyCallBacks returnValue = com.apple.jobjc.JObjC.getInstance(getRuntime()).CoreFoundation().makeCFDictionaryKeyCallBacks();
		getConstant("kCFCopyStringDictionaryKeyCallBacks", returnValue, com.apple.jobjc.corefoundation.CFDictionaryKeyCallBacks.getStructCoder().sizeof());
		
		_kCFCopyStringDictionaryKeyCallBacks = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFSetCallBacks _kCFCopyStringSetCallBacks = null;
	 final public com.apple.jobjc.corefoundation.CFSetCallBacks kCFCopyStringSetCallBacks(){
		if(_kCFCopyStringSetCallBacks != null) return _kCFCopyStringSetCallBacks;
				com.apple.jobjc.corefoundation.CFSetCallBacks returnValue = com.apple.jobjc.JObjC.getInstance(getRuntime()).CoreFoundation().makeCFSetCallBacks();
		getConstant("kCFCopyStringSetCallBacks", returnValue, com.apple.jobjc.corefoundation.CFSetCallBacks.getStructCoder().sizeof());
		
		_kCFCopyStringSetCallBacks = returnValue;
		return returnValue;
	}

	private double _kCFCoreFoundationVersionNumber = 0;
	 final public double kCFCoreFoundationVersionNumber(){
		if(_kCFCoreFoundationVersionNumber != 0) return _kCFCoreFoundationVersionNumber;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFCoreFoundationVersionNumber", nativeBuffer, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.sizeof());
		final double returnValue = (double) (com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.popDouble(nativeBuffer));
		_kCFCoreFoundationVersionNumber = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterAMSymbol = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterAMSymbol(){
		if(_kCFDateFormatterAMSymbol != null) return _kCFDateFormatterAMSymbol;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterAMSymbol", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterAMSymbol = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterCalendar = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterCalendar(){
		if(_kCFDateFormatterCalendar != null) return _kCFDateFormatterCalendar;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterCalendar", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterCalendar = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterCalendarName = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterCalendarName(){
		if(_kCFDateFormatterCalendarName != null) return _kCFDateFormatterCalendarName;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterCalendarName", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterCalendarName = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterDefaultDate = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterDefaultDate(){
		if(_kCFDateFormatterDefaultDate != null) return _kCFDateFormatterDefaultDate;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterDefaultDate", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterDefaultDate = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterDefaultFormat = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterDefaultFormat(){
		if(_kCFDateFormatterDefaultFormat != null) return _kCFDateFormatterDefaultFormat;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterDefaultFormat", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterDefaultFormat = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterDoesRelativeDateFormattingKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterDoesRelativeDateFormattingKey(){
		if(_kCFDateFormatterDoesRelativeDateFormattingKey != null) return _kCFDateFormatterDoesRelativeDateFormattingKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterDoesRelativeDateFormattingKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterDoesRelativeDateFormattingKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterEraSymbols = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterEraSymbols(){
		if(_kCFDateFormatterEraSymbols != null) return _kCFDateFormatterEraSymbols;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterEraSymbols", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterEraSymbols = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterGregorianStartDate = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterGregorianStartDate(){
		if(_kCFDateFormatterGregorianStartDate != null) return _kCFDateFormatterGregorianStartDate;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterGregorianStartDate", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterGregorianStartDate = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterIsLenient = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterIsLenient(){
		if(_kCFDateFormatterIsLenient != null) return _kCFDateFormatterIsLenient;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterIsLenient", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterIsLenient = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterLongEraSymbols = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterLongEraSymbols(){
		if(_kCFDateFormatterLongEraSymbols != null) return _kCFDateFormatterLongEraSymbols;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterLongEraSymbols", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterLongEraSymbols = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterMonthSymbols = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterMonthSymbols(){
		if(_kCFDateFormatterMonthSymbols != null) return _kCFDateFormatterMonthSymbols;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterMonthSymbols", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterMonthSymbols = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterPMSymbol = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterPMSymbol(){
		if(_kCFDateFormatterPMSymbol != null) return _kCFDateFormatterPMSymbol;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterPMSymbol", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterPMSymbol = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterQuarterSymbols = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterQuarterSymbols(){
		if(_kCFDateFormatterQuarterSymbols != null) return _kCFDateFormatterQuarterSymbols;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterQuarterSymbols", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterQuarterSymbols = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterShortMonthSymbols = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterShortMonthSymbols(){
		if(_kCFDateFormatterShortMonthSymbols != null) return _kCFDateFormatterShortMonthSymbols;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterShortMonthSymbols", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterShortMonthSymbols = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterShortQuarterSymbols = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterShortQuarterSymbols(){
		if(_kCFDateFormatterShortQuarterSymbols != null) return _kCFDateFormatterShortQuarterSymbols;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterShortQuarterSymbols", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterShortQuarterSymbols = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterShortStandaloneMonthSymbols = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterShortStandaloneMonthSymbols(){
		if(_kCFDateFormatterShortStandaloneMonthSymbols != null) return _kCFDateFormatterShortStandaloneMonthSymbols;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterShortStandaloneMonthSymbols", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterShortStandaloneMonthSymbols = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterShortStandaloneQuarterSymbols = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterShortStandaloneQuarterSymbols(){
		if(_kCFDateFormatterShortStandaloneQuarterSymbols != null) return _kCFDateFormatterShortStandaloneQuarterSymbols;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterShortStandaloneQuarterSymbols", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterShortStandaloneQuarterSymbols = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterShortStandaloneWeekdaySymbols = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterShortStandaloneWeekdaySymbols(){
		if(_kCFDateFormatterShortStandaloneWeekdaySymbols != null) return _kCFDateFormatterShortStandaloneWeekdaySymbols;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterShortStandaloneWeekdaySymbols", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterShortStandaloneWeekdaySymbols = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterShortWeekdaySymbols = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterShortWeekdaySymbols(){
		if(_kCFDateFormatterShortWeekdaySymbols != null) return _kCFDateFormatterShortWeekdaySymbols;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterShortWeekdaySymbols", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterShortWeekdaySymbols = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterStandaloneMonthSymbols = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterStandaloneMonthSymbols(){
		if(_kCFDateFormatterStandaloneMonthSymbols != null) return _kCFDateFormatterStandaloneMonthSymbols;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterStandaloneMonthSymbols", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterStandaloneMonthSymbols = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterStandaloneQuarterSymbols = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterStandaloneQuarterSymbols(){
		if(_kCFDateFormatterStandaloneQuarterSymbols != null) return _kCFDateFormatterStandaloneQuarterSymbols;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterStandaloneQuarterSymbols", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterStandaloneQuarterSymbols = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterStandaloneWeekdaySymbols = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterStandaloneWeekdaySymbols(){
		if(_kCFDateFormatterStandaloneWeekdaySymbols != null) return _kCFDateFormatterStandaloneWeekdaySymbols;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterStandaloneWeekdaySymbols", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterStandaloneWeekdaySymbols = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterTimeZone = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterTimeZone(){
		if(_kCFDateFormatterTimeZone != null) return _kCFDateFormatterTimeZone;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterTimeZone", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterTimeZone = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterTwoDigitStartDate = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterTwoDigitStartDate(){
		if(_kCFDateFormatterTwoDigitStartDate != null) return _kCFDateFormatterTwoDigitStartDate;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterTwoDigitStartDate", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterTwoDigitStartDate = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterVeryShortMonthSymbols = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterVeryShortMonthSymbols(){
		if(_kCFDateFormatterVeryShortMonthSymbols != null) return _kCFDateFormatterVeryShortMonthSymbols;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterVeryShortMonthSymbols", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterVeryShortMonthSymbols = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterVeryShortStandaloneMonthSymbols = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterVeryShortStandaloneMonthSymbols(){
		if(_kCFDateFormatterVeryShortStandaloneMonthSymbols != null) return _kCFDateFormatterVeryShortStandaloneMonthSymbols;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterVeryShortStandaloneMonthSymbols", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterVeryShortStandaloneMonthSymbols = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterVeryShortStandaloneWeekdaySymbols = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterVeryShortStandaloneWeekdaySymbols(){
		if(_kCFDateFormatterVeryShortStandaloneWeekdaySymbols != null) return _kCFDateFormatterVeryShortStandaloneWeekdaySymbols;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterVeryShortStandaloneWeekdaySymbols", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterVeryShortStandaloneWeekdaySymbols = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterVeryShortWeekdaySymbols = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterVeryShortWeekdaySymbols(){
		if(_kCFDateFormatterVeryShortWeekdaySymbols != null) return _kCFDateFormatterVeryShortWeekdaySymbols;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterVeryShortWeekdaySymbols", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterVeryShortWeekdaySymbols = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFDateFormatterWeekdaySymbols = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFDateFormatterWeekdaySymbols(){
		if(_kCFDateFormatterWeekdaySymbols != null) return _kCFDateFormatterWeekdaySymbols;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFDateFormatterWeekdaySymbols", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFDateFormatterWeekdaySymbols = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFErrorDescriptionKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFErrorDescriptionKey(){
		if(_kCFErrorDescriptionKey != null) return _kCFErrorDescriptionKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFErrorDescriptionKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFErrorDescriptionKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFErrorDomainCocoa = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFErrorDomainCocoa(){
		if(_kCFErrorDomainCocoa != null) return _kCFErrorDomainCocoa;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFErrorDomainCocoa", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFErrorDomainCocoa = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFErrorDomainMach = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFErrorDomainMach(){
		if(_kCFErrorDomainMach != null) return _kCFErrorDomainMach;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFErrorDomainMach", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFErrorDomainMach = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFErrorDomainOSStatus = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFErrorDomainOSStatus(){
		if(_kCFErrorDomainOSStatus != null) return _kCFErrorDomainOSStatus;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFErrorDomainOSStatus", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFErrorDomainOSStatus = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFErrorDomainPOSIX = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFErrorDomainPOSIX(){
		if(_kCFErrorDomainPOSIX != null) return _kCFErrorDomainPOSIX;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFErrorDomainPOSIX", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFErrorDomainPOSIX = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFErrorFilePathKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFErrorFilePathKey(){
		if(_kCFErrorFilePathKey != null) return _kCFErrorFilePathKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFErrorFilePathKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFErrorFilePathKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFErrorLocalizedDescriptionKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFErrorLocalizedDescriptionKey(){
		if(_kCFErrorLocalizedDescriptionKey != null) return _kCFErrorLocalizedDescriptionKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFErrorLocalizedDescriptionKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFErrorLocalizedDescriptionKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFErrorLocalizedFailureReasonKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFErrorLocalizedFailureReasonKey(){
		if(_kCFErrorLocalizedFailureReasonKey != null) return _kCFErrorLocalizedFailureReasonKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFErrorLocalizedFailureReasonKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFErrorLocalizedFailureReasonKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFErrorLocalizedRecoverySuggestionKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFErrorLocalizedRecoverySuggestionKey(){
		if(_kCFErrorLocalizedRecoverySuggestionKey != null) return _kCFErrorLocalizedRecoverySuggestionKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFErrorLocalizedRecoverySuggestionKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFErrorLocalizedRecoverySuggestionKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFErrorURLKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFErrorURLKey(){
		if(_kCFErrorURLKey != null) return _kCFErrorURLKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFErrorURLKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFErrorURLKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFErrorUnderlyingErrorKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFErrorUnderlyingErrorKey(){
		if(_kCFErrorUnderlyingErrorKey != null) return _kCFErrorUnderlyingErrorKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFErrorUnderlyingErrorKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFErrorUnderlyingErrorKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFGregorianCalendar = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFGregorianCalendar(){
		if(_kCFGregorianCalendar != null) return _kCFGregorianCalendar;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFGregorianCalendar", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFGregorianCalendar = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFHebrewCalendar = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFHebrewCalendar(){
		if(_kCFHebrewCalendar != null) return _kCFHebrewCalendar;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFHebrewCalendar", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFHebrewCalendar = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFISO8601Calendar = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFISO8601Calendar(){
		if(_kCFISO8601Calendar != null) return _kCFISO8601Calendar;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFISO8601Calendar", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFISO8601Calendar = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFIndianCalendar = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFIndianCalendar(){
		if(_kCFIndianCalendar != null) return _kCFIndianCalendar;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFIndianCalendar", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFIndianCalendar = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFIslamicCalendar = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFIslamicCalendar(){
		if(_kCFIslamicCalendar != null) return _kCFIslamicCalendar;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFIslamicCalendar", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFIslamicCalendar = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFIslamicCivilCalendar = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFIslamicCivilCalendar(){
		if(_kCFIslamicCivilCalendar != null) return _kCFIslamicCivilCalendar;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFIslamicCivilCalendar", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFIslamicCivilCalendar = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFJapaneseCalendar = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFJapaneseCalendar(){
		if(_kCFJapaneseCalendar != null) return _kCFJapaneseCalendar;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFJapaneseCalendar", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFJapaneseCalendar = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFLocaleAlternateQuotationBeginDelimiterKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFLocaleAlternateQuotationBeginDelimiterKey(){
		if(_kCFLocaleAlternateQuotationBeginDelimiterKey != null) return _kCFLocaleAlternateQuotationBeginDelimiterKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFLocaleAlternateQuotationBeginDelimiterKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFLocaleAlternateQuotationBeginDelimiterKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFLocaleAlternateQuotationEndDelimiterKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFLocaleAlternateQuotationEndDelimiterKey(){
		if(_kCFLocaleAlternateQuotationEndDelimiterKey != null) return _kCFLocaleAlternateQuotationEndDelimiterKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFLocaleAlternateQuotationEndDelimiterKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFLocaleAlternateQuotationEndDelimiterKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFLocaleCalendar = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFLocaleCalendar(){
		if(_kCFLocaleCalendar != null) return _kCFLocaleCalendar;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFLocaleCalendar", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFLocaleCalendar = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFLocaleCalendarIdentifier = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFLocaleCalendarIdentifier(){
		if(_kCFLocaleCalendarIdentifier != null) return _kCFLocaleCalendarIdentifier;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFLocaleCalendarIdentifier", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFLocaleCalendarIdentifier = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFLocaleCollationIdentifier = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFLocaleCollationIdentifier(){
		if(_kCFLocaleCollationIdentifier != null) return _kCFLocaleCollationIdentifier;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFLocaleCollationIdentifier", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFLocaleCollationIdentifier = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFLocaleCollatorIdentifier = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFLocaleCollatorIdentifier(){
		if(_kCFLocaleCollatorIdentifier != null) return _kCFLocaleCollatorIdentifier;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFLocaleCollatorIdentifier", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFLocaleCollatorIdentifier = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFLocaleCountryCode = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFLocaleCountryCode(){
		if(_kCFLocaleCountryCode != null) return _kCFLocaleCountryCode;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFLocaleCountryCode", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFLocaleCountryCode = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFLocaleCurrencyCode = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFLocaleCurrencyCode(){
		if(_kCFLocaleCurrencyCode != null) return _kCFLocaleCurrencyCode;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFLocaleCurrencyCode", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFLocaleCurrencyCode = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFLocaleCurrencySymbol = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFLocaleCurrencySymbol(){
		if(_kCFLocaleCurrencySymbol != null) return _kCFLocaleCurrencySymbol;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFLocaleCurrencySymbol", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFLocaleCurrencySymbol = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFLocaleCurrentLocaleDidChangeNotification = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFLocaleCurrentLocaleDidChangeNotification(){
		if(_kCFLocaleCurrentLocaleDidChangeNotification != null) return _kCFLocaleCurrentLocaleDidChangeNotification;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFLocaleCurrentLocaleDidChangeNotification", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFLocaleCurrentLocaleDidChangeNotification = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFLocaleDecimalSeparator = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFLocaleDecimalSeparator(){
		if(_kCFLocaleDecimalSeparator != null) return _kCFLocaleDecimalSeparator;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFLocaleDecimalSeparator", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFLocaleDecimalSeparator = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFLocaleExemplarCharacterSet = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFLocaleExemplarCharacterSet(){
		if(_kCFLocaleExemplarCharacterSet != null) return _kCFLocaleExemplarCharacterSet;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFLocaleExemplarCharacterSet", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFLocaleExemplarCharacterSet = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFLocaleGroupingSeparator = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFLocaleGroupingSeparator(){
		if(_kCFLocaleGroupingSeparator != null) return _kCFLocaleGroupingSeparator;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFLocaleGroupingSeparator", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFLocaleGroupingSeparator = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFLocaleIdentifier = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFLocaleIdentifier(){
		if(_kCFLocaleIdentifier != null) return _kCFLocaleIdentifier;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFLocaleIdentifier", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFLocaleIdentifier = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFLocaleLanguageCode = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFLocaleLanguageCode(){
		if(_kCFLocaleLanguageCode != null) return _kCFLocaleLanguageCode;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFLocaleLanguageCode", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFLocaleLanguageCode = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFLocaleMeasurementSystem = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFLocaleMeasurementSystem(){
		if(_kCFLocaleMeasurementSystem != null) return _kCFLocaleMeasurementSystem;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFLocaleMeasurementSystem", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFLocaleMeasurementSystem = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFLocaleQuotationBeginDelimiterKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFLocaleQuotationBeginDelimiterKey(){
		if(_kCFLocaleQuotationBeginDelimiterKey != null) return _kCFLocaleQuotationBeginDelimiterKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFLocaleQuotationBeginDelimiterKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFLocaleQuotationBeginDelimiterKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFLocaleQuotationEndDelimiterKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFLocaleQuotationEndDelimiterKey(){
		if(_kCFLocaleQuotationEndDelimiterKey != null) return _kCFLocaleQuotationEndDelimiterKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFLocaleQuotationEndDelimiterKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFLocaleQuotationEndDelimiterKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFLocaleScriptCode = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFLocaleScriptCode(){
		if(_kCFLocaleScriptCode != null) return _kCFLocaleScriptCode;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFLocaleScriptCode", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFLocaleScriptCode = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFLocaleUsesMetricSystem = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFLocaleUsesMetricSystem(){
		if(_kCFLocaleUsesMetricSystem != null) return _kCFLocaleUsesMetricSystem;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFLocaleUsesMetricSystem", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFLocaleUsesMetricSystem = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFLocaleVariantCode = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFLocaleVariantCode(){
		if(_kCFLocaleVariantCode != null) return _kCFLocaleVariantCode;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFLocaleVariantCode", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFLocaleVariantCode = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFNullRefCFType _kCFNull = null;
	 final public com.apple.jobjc.corefoundation.CFNullRefCFType kCFNull(){
		if(_kCFNull != null) return _kCFNull;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNull", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFNullRefCFType returnValue = (com.apple.jobjc.corefoundation.CFNullRefCFType) new com.apple.jobjc.corefoundation.CFNullRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNull = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterAlwaysShowDecimalSeparator = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterAlwaysShowDecimalSeparator(){
		if(_kCFNumberFormatterAlwaysShowDecimalSeparator != null) return _kCFNumberFormatterAlwaysShowDecimalSeparator;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterAlwaysShowDecimalSeparator", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterAlwaysShowDecimalSeparator = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterCurrencyCode = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterCurrencyCode(){
		if(_kCFNumberFormatterCurrencyCode != null) return _kCFNumberFormatterCurrencyCode;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterCurrencyCode", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterCurrencyCode = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterCurrencyDecimalSeparator = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterCurrencyDecimalSeparator(){
		if(_kCFNumberFormatterCurrencyDecimalSeparator != null) return _kCFNumberFormatterCurrencyDecimalSeparator;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterCurrencyDecimalSeparator", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterCurrencyDecimalSeparator = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterCurrencyGroupingSeparator = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterCurrencyGroupingSeparator(){
		if(_kCFNumberFormatterCurrencyGroupingSeparator != null) return _kCFNumberFormatterCurrencyGroupingSeparator;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterCurrencyGroupingSeparator", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterCurrencyGroupingSeparator = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterCurrencySymbol = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterCurrencySymbol(){
		if(_kCFNumberFormatterCurrencySymbol != null) return _kCFNumberFormatterCurrencySymbol;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterCurrencySymbol", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterCurrencySymbol = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterDecimalSeparator = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterDecimalSeparator(){
		if(_kCFNumberFormatterDecimalSeparator != null) return _kCFNumberFormatterDecimalSeparator;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterDecimalSeparator", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterDecimalSeparator = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterDefaultFormat = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterDefaultFormat(){
		if(_kCFNumberFormatterDefaultFormat != null) return _kCFNumberFormatterDefaultFormat;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterDefaultFormat", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterDefaultFormat = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterExponentSymbol = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterExponentSymbol(){
		if(_kCFNumberFormatterExponentSymbol != null) return _kCFNumberFormatterExponentSymbol;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterExponentSymbol", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterExponentSymbol = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterFormatWidth = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterFormatWidth(){
		if(_kCFNumberFormatterFormatWidth != null) return _kCFNumberFormatterFormatWidth;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterFormatWidth", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterFormatWidth = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterGroupingSeparator = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterGroupingSeparator(){
		if(_kCFNumberFormatterGroupingSeparator != null) return _kCFNumberFormatterGroupingSeparator;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterGroupingSeparator", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterGroupingSeparator = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterGroupingSize = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterGroupingSize(){
		if(_kCFNumberFormatterGroupingSize != null) return _kCFNumberFormatterGroupingSize;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterGroupingSize", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterGroupingSize = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterInfinitySymbol = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterInfinitySymbol(){
		if(_kCFNumberFormatterInfinitySymbol != null) return _kCFNumberFormatterInfinitySymbol;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterInfinitySymbol", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterInfinitySymbol = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterInternationalCurrencySymbol = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterInternationalCurrencySymbol(){
		if(_kCFNumberFormatterInternationalCurrencySymbol != null) return _kCFNumberFormatterInternationalCurrencySymbol;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterInternationalCurrencySymbol", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterInternationalCurrencySymbol = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterIsLenient = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterIsLenient(){
		if(_kCFNumberFormatterIsLenient != null) return _kCFNumberFormatterIsLenient;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterIsLenient", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterIsLenient = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterMaxFractionDigits = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterMaxFractionDigits(){
		if(_kCFNumberFormatterMaxFractionDigits != null) return _kCFNumberFormatterMaxFractionDigits;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterMaxFractionDigits", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterMaxFractionDigits = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterMaxIntegerDigits = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterMaxIntegerDigits(){
		if(_kCFNumberFormatterMaxIntegerDigits != null) return _kCFNumberFormatterMaxIntegerDigits;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterMaxIntegerDigits", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterMaxIntegerDigits = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterMaxSignificantDigits = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterMaxSignificantDigits(){
		if(_kCFNumberFormatterMaxSignificantDigits != null) return _kCFNumberFormatterMaxSignificantDigits;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterMaxSignificantDigits", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterMaxSignificantDigits = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterMinFractionDigits = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterMinFractionDigits(){
		if(_kCFNumberFormatterMinFractionDigits != null) return _kCFNumberFormatterMinFractionDigits;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterMinFractionDigits", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterMinFractionDigits = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterMinIntegerDigits = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterMinIntegerDigits(){
		if(_kCFNumberFormatterMinIntegerDigits != null) return _kCFNumberFormatterMinIntegerDigits;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterMinIntegerDigits", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterMinIntegerDigits = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterMinSignificantDigits = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterMinSignificantDigits(){
		if(_kCFNumberFormatterMinSignificantDigits != null) return _kCFNumberFormatterMinSignificantDigits;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterMinSignificantDigits", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterMinSignificantDigits = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterMinusSign = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterMinusSign(){
		if(_kCFNumberFormatterMinusSign != null) return _kCFNumberFormatterMinusSign;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterMinusSign", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterMinusSign = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterMultiplier = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterMultiplier(){
		if(_kCFNumberFormatterMultiplier != null) return _kCFNumberFormatterMultiplier;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterMultiplier", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterMultiplier = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterNaNSymbol = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterNaNSymbol(){
		if(_kCFNumberFormatterNaNSymbol != null) return _kCFNumberFormatterNaNSymbol;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterNaNSymbol", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterNaNSymbol = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterNegativePrefix = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterNegativePrefix(){
		if(_kCFNumberFormatterNegativePrefix != null) return _kCFNumberFormatterNegativePrefix;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterNegativePrefix", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterNegativePrefix = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterNegativeSuffix = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterNegativeSuffix(){
		if(_kCFNumberFormatterNegativeSuffix != null) return _kCFNumberFormatterNegativeSuffix;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterNegativeSuffix", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterNegativeSuffix = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterPaddingCharacter = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterPaddingCharacter(){
		if(_kCFNumberFormatterPaddingCharacter != null) return _kCFNumberFormatterPaddingCharacter;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterPaddingCharacter", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterPaddingCharacter = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterPaddingPosition = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterPaddingPosition(){
		if(_kCFNumberFormatterPaddingPosition != null) return _kCFNumberFormatterPaddingPosition;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterPaddingPosition", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterPaddingPosition = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterPerMillSymbol = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterPerMillSymbol(){
		if(_kCFNumberFormatterPerMillSymbol != null) return _kCFNumberFormatterPerMillSymbol;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterPerMillSymbol", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterPerMillSymbol = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterPercentSymbol = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterPercentSymbol(){
		if(_kCFNumberFormatterPercentSymbol != null) return _kCFNumberFormatterPercentSymbol;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterPercentSymbol", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterPercentSymbol = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterPlusSign = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterPlusSign(){
		if(_kCFNumberFormatterPlusSign != null) return _kCFNumberFormatterPlusSign;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterPlusSign", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterPlusSign = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterPositivePrefix = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterPositivePrefix(){
		if(_kCFNumberFormatterPositivePrefix != null) return _kCFNumberFormatterPositivePrefix;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterPositivePrefix", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterPositivePrefix = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterPositiveSuffix = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterPositiveSuffix(){
		if(_kCFNumberFormatterPositiveSuffix != null) return _kCFNumberFormatterPositiveSuffix;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterPositiveSuffix", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterPositiveSuffix = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterRoundingIncrement = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterRoundingIncrement(){
		if(_kCFNumberFormatterRoundingIncrement != null) return _kCFNumberFormatterRoundingIncrement;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterRoundingIncrement", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterRoundingIncrement = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterRoundingMode = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterRoundingMode(){
		if(_kCFNumberFormatterRoundingMode != null) return _kCFNumberFormatterRoundingMode;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterRoundingMode", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterRoundingMode = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterSecondaryGroupingSize = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterSecondaryGroupingSize(){
		if(_kCFNumberFormatterSecondaryGroupingSize != null) return _kCFNumberFormatterSecondaryGroupingSize;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterSecondaryGroupingSize", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterSecondaryGroupingSize = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterUseGroupingSeparator = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterUseGroupingSeparator(){
		if(_kCFNumberFormatterUseGroupingSeparator != null) return _kCFNumberFormatterUseGroupingSeparator;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterUseGroupingSeparator", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterUseGroupingSeparator = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterUseSignificantDigits = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterUseSignificantDigits(){
		if(_kCFNumberFormatterUseSignificantDigits != null) return _kCFNumberFormatterUseSignificantDigits;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterUseSignificantDigits", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterUseSignificantDigits = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFNumberFormatterZeroSymbol = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFNumberFormatterZeroSymbol(){
		if(_kCFNumberFormatterZeroSymbol != null) return _kCFNumberFormatterZeroSymbol;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberFormatterZeroSymbol", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberFormatterZeroSymbol = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFNumberRefCFType _kCFNumberNaN = null;
	 final public com.apple.jobjc.corefoundation.CFNumberRefCFType kCFNumberNaN(){
		if(_kCFNumberNaN != null) return _kCFNumberNaN;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberNaN", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFNumberRefCFType returnValue = (com.apple.jobjc.corefoundation.CFNumberRefCFType) new com.apple.jobjc.corefoundation.CFNumberRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberNaN = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFNumberRefCFType _kCFNumberNegativeInfinity = null;
	 final public com.apple.jobjc.corefoundation.CFNumberRefCFType kCFNumberNegativeInfinity(){
		if(_kCFNumberNegativeInfinity != null) return _kCFNumberNegativeInfinity;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberNegativeInfinity", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFNumberRefCFType returnValue = (com.apple.jobjc.corefoundation.CFNumberRefCFType) new com.apple.jobjc.corefoundation.CFNumberRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberNegativeInfinity = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFNumberRefCFType _kCFNumberPositiveInfinity = null;
	 final public com.apple.jobjc.corefoundation.CFNumberRefCFType kCFNumberPositiveInfinity(){
		if(_kCFNumberPositiveInfinity != null) return _kCFNumberPositiveInfinity;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFNumberPositiveInfinity", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFNumberRefCFType returnValue = (com.apple.jobjc.corefoundation.CFNumberRefCFType) new com.apple.jobjc.corefoundation.CFNumberRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFNumberPositiveInfinity = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFPersianCalendar = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFPersianCalendar(){
		if(_kCFPersianCalendar != null) return _kCFPersianCalendar;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFPersianCalendar", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFPersianCalendar = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFPlugInDynamicRegisterFunctionKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFPlugInDynamicRegisterFunctionKey(){
		if(_kCFPlugInDynamicRegisterFunctionKey != null) return _kCFPlugInDynamicRegisterFunctionKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFPlugInDynamicRegisterFunctionKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFPlugInDynamicRegisterFunctionKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFPlugInDynamicRegistrationKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFPlugInDynamicRegistrationKey(){
		if(_kCFPlugInDynamicRegistrationKey != null) return _kCFPlugInDynamicRegistrationKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFPlugInDynamicRegistrationKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFPlugInDynamicRegistrationKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFPlugInFactoriesKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFPlugInFactoriesKey(){
		if(_kCFPlugInFactoriesKey != null) return _kCFPlugInFactoriesKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFPlugInFactoriesKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFPlugInFactoriesKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFPlugInTypesKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFPlugInTypesKey(){
		if(_kCFPlugInTypesKey != null) return _kCFPlugInTypesKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFPlugInTypesKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFPlugInTypesKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFPlugInUnloadFunctionKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFPlugInUnloadFunctionKey(){
		if(_kCFPlugInUnloadFunctionKey != null) return _kCFPlugInUnloadFunctionKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFPlugInUnloadFunctionKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFPlugInUnloadFunctionKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFPreferencesAnyApplication = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFPreferencesAnyApplication(){
		if(_kCFPreferencesAnyApplication != null) return _kCFPreferencesAnyApplication;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFPreferencesAnyApplication", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFPreferencesAnyApplication = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFPreferencesAnyHost = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFPreferencesAnyHost(){
		if(_kCFPreferencesAnyHost != null) return _kCFPreferencesAnyHost;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFPreferencesAnyHost", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFPreferencesAnyHost = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFPreferencesAnyUser = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFPreferencesAnyUser(){
		if(_kCFPreferencesAnyUser != null) return _kCFPreferencesAnyUser;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFPreferencesAnyUser", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFPreferencesAnyUser = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFPreferencesCurrentApplication = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFPreferencesCurrentApplication(){
		if(_kCFPreferencesCurrentApplication != null) return _kCFPreferencesCurrentApplication;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFPreferencesCurrentApplication", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFPreferencesCurrentApplication = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFPreferencesCurrentHost = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFPreferencesCurrentHost(){
		if(_kCFPreferencesCurrentHost != null) return _kCFPreferencesCurrentHost;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFPreferencesCurrentHost", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFPreferencesCurrentHost = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFPreferencesCurrentUser = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFPreferencesCurrentUser(){
		if(_kCFPreferencesCurrentUser != null) return _kCFPreferencesCurrentUser;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFPreferencesCurrentUser", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFPreferencesCurrentUser = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFRepublicOfChinaCalendar = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFRepublicOfChinaCalendar(){
		if(_kCFRepublicOfChinaCalendar != null) return _kCFRepublicOfChinaCalendar;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFRepublicOfChinaCalendar", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFRepublicOfChinaCalendar = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFRunLoopCommonModes = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFRunLoopCommonModes(){
		if(_kCFRunLoopCommonModes != null) return _kCFRunLoopCommonModes;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFRunLoopCommonModes", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFRunLoopCommonModes = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFRunLoopDefaultMode = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFRunLoopDefaultMode(){
		if(_kCFRunLoopDefaultMode != null) return _kCFRunLoopDefaultMode;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFRunLoopDefaultMode", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFRunLoopDefaultMode = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFSocketCommandKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFSocketCommandKey(){
		if(_kCFSocketCommandKey != null) return _kCFSocketCommandKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFSocketCommandKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFSocketCommandKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFSocketErrorKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFSocketErrorKey(){
		if(_kCFSocketErrorKey != null) return _kCFSocketErrorKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFSocketErrorKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFSocketErrorKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFSocketNameKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFSocketNameKey(){
		if(_kCFSocketNameKey != null) return _kCFSocketNameKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFSocketNameKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFSocketNameKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFSocketRegisterCommand = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFSocketRegisterCommand(){
		if(_kCFSocketRegisterCommand != null) return _kCFSocketRegisterCommand;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFSocketRegisterCommand", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFSocketRegisterCommand = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFSocketResultKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFSocketResultKey(){
		if(_kCFSocketResultKey != null) return _kCFSocketResultKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFSocketResultKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFSocketResultKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFSocketRetrieveCommand = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFSocketRetrieveCommand(){
		if(_kCFSocketRetrieveCommand != null) return _kCFSocketRetrieveCommand;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFSocketRetrieveCommand", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFSocketRetrieveCommand = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFSocketValueKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFSocketValueKey(){
		if(_kCFSocketValueKey != null) return _kCFSocketValueKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFSocketValueKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFSocketValueKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFStreamPropertyAppendToFile = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFStreamPropertyAppendToFile(){
		if(_kCFStreamPropertyAppendToFile != null) return _kCFStreamPropertyAppendToFile;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFStreamPropertyAppendToFile", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFStreamPropertyAppendToFile = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFStreamPropertyDataWritten = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFStreamPropertyDataWritten(){
		if(_kCFStreamPropertyDataWritten != null) return _kCFStreamPropertyDataWritten;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFStreamPropertyDataWritten", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFStreamPropertyDataWritten = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFStreamPropertyFileCurrentOffset = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFStreamPropertyFileCurrentOffset(){
		if(_kCFStreamPropertyFileCurrentOffset != null) return _kCFStreamPropertyFileCurrentOffset;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFStreamPropertyFileCurrentOffset", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFStreamPropertyFileCurrentOffset = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFStreamPropertySocketNativeHandle = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFStreamPropertySocketNativeHandle(){
		if(_kCFStreamPropertySocketNativeHandle != null) return _kCFStreamPropertySocketNativeHandle;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFStreamPropertySocketNativeHandle", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFStreamPropertySocketNativeHandle = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFStreamPropertySocketRemoteHostName = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFStreamPropertySocketRemoteHostName(){
		if(_kCFStreamPropertySocketRemoteHostName != null) return _kCFStreamPropertySocketRemoteHostName;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFStreamPropertySocketRemoteHostName", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFStreamPropertySocketRemoteHostName = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFStreamPropertySocketRemotePortNumber = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFStreamPropertySocketRemotePortNumber(){
		if(_kCFStreamPropertySocketRemotePortNumber != null) return _kCFStreamPropertySocketRemotePortNumber;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFStreamPropertySocketRemotePortNumber", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFStreamPropertySocketRemotePortNumber = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFBinaryHeapCallBacks _kCFStringBinaryHeapCallBacks = null;
	 final public com.apple.jobjc.corefoundation.CFBinaryHeapCallBacks kCFStringBinaryHeapCallBacks(){
		if(_kCFStringBinaryHeapCallBacks != null) return _kCFStringBinaryHeapCallBacks;
				com.apple.jobjc.corefoundation.CFBinaryHeapCallBacks returnValue = com.apple.jobjc.JObjC.getInstance(getRuntime()).CoreFoundation().makeCFBinaryHeapCallBacks();
		getConstant("kCFStringBinaryHeapCallBacks", returnValue, com.apple.jobjc.corefoundation.CFBinaryHeapCallBacks.getStructCoder().sizeof());
		
		_kCFStringBinaryHeapCallBacks = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFStringTransformFullwidthHalfwidth = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFStringTransformFullwidthHalfwidth(){
		if(_kCFStringTransformFullwidthHalfwidth != null) return _kCFStringTransformFullwidthHalfwidth;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFStringTransformFullwidthHalfwidth", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFStringTransformFullwidthHalfwidth = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFStringTransformHiraganaKatakana = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFStringTransformHiraganaKatakana(){
		if(_kCFStringTransformHiraganaKatakana != null) return _kCFStringTransformHiraganaKatakana;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFStringTransformHiraganaKatakana", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFStringTransformHiraganaKatakana = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFStringTransformLatinArabic = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFStringTransformLatinArabic(){
		if(_kCFStringTransformLatinArabic != null) return _kCFStringTransformLatinArabic;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFStringTransformLatinArabic", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFStringTransformLatinArabic = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFStringTransformLatinCyrillic = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFStringTransformLatinCyrillic(){
		if(_kCFStringTransformLatinCyrillic != null) return _kCFStringTransformLatinCyrillic;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFStringTransformLatinCyrillic", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFStringTransformLatinCyrillic = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFStringTransformLatinGreek = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFStringTransformLatinGreek(){
		if(_kCFStringTransformLatinGreek != null) return _kCFStringTransformLatinGreek;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFStringTransformLatinGreek", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFStringTransformLatinGreek = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFStringTransformLatinHangul = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFStringTransformLatinHangul(){
		if(_kCFStringTransformLatinHangul != null) return _kCFStringTransformLatinHangul;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFStringTransformLatinHangul", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFStringTransformLatinHangul = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFStringTransformLatinHebrew = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFStringTransformLatinHebrew(){
		if(_kCFStringTransformLatinHebrew != null) return _kCFStringTransformLatinHebrew;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFStringTransformLatinHebrew", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFStringTransformLatinHebrew = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFStringTransformLatinHiragana = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFStringTransformLatinHiragana(){
		if(_kCFStringTransformLatinHiragana != null) return _kCFStringTransformLatinHiragana;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFStringTransformLatinHiragana", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFStringTransformLatinHiragana = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFStringTransformLatinKatakana = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFStringTransformLatinKatakana(){
		if(_kCFStringTransformLatinKatakana != null) return _kCFStringTransformLatinKatakana;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFStringTransformLatinKatakana", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFStringTransformLatinKatakana = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFStringTransformLatinThai = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFStringTransformLatinThai(){
		if(_kCFStringTransformLatinThai != null) return _kCFStringTransformLatinThai;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFStringTransformLatinThai", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFStringTransformLatinThai = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFStringTransformMandarinLatin = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFStringTransformMandarinLatin(){
		if(_kCFStringTransformMandarinLatin != null) return _kCFStringTransformMandarinLatin;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFStringTransformMandarinLatin", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFStringTransformMandarinLatin = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFStringTransformStripCombiningMarks = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFStringTransformStripCombiningMarks(){
		if(_kCFStringTransformStripCombiningMarks != null) return _kCFStringTransformStripCombiningMarks;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFStringTransformStripCombiningMarks", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFStringTransformStripCombiningMarks = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFStringTransformStripDiacritics = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFStringTransformStripDiacritics(){
		if(_kCFStringTransformStripDiacritics != null) return _kCFStringTransformStripDiacritics;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFStringTransformStripDiacritics", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFStringTransformStripDiacritics = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFStringTransformToLatin = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFStringTransformToLatin(){
		if(_kCFStringTransformToLatin != null) return _kCFStringTransformToLatin;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFStringTransformToLatin", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFStringTransformToLatin = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFStringTransformToUnicodeName = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFStringTransformToUnicodeName(){
		if(_kCFStringTransformToUnicodeName != null) return _kCFStringTransformToUnicodeName;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFStringTransformToUnicodeName", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFStringTransformToUnicodeName = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFStringTransformToXMLHex = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFStringTransformToXMLHex(){
		if(_kCFStringTransformToXMLHex != null) return _kCFStringTransformToXMLHex;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFStringTransformToXMLHex", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFStringTransformToXMLHex = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFTimeZoneSystemTimeZoneDidChangeNotification = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFTimeZoneSystemTimeZoneDidChangeNotification(){
		if(_kCFTimeZoneSystemTimeZoneDidChangeNotification != null) return _kCFTimeZoneSystemTimeZoneDidChangeNotification;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFTimeZoneSystemTimeZoneDidChangeNotification", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFTimeZoneSystemTimeZoneDidChangeNotification = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFArrayCallBacks _kCFTypeArrayCallBacks = null;
	 final public com.apple.jobjc.corefoundation.CFArrayCallBacks kCFTypeArrayCallBacks(){
		if(_kCFTypeArrayCallBacks != null) return _kCFTypeArrayCallBacks;
				com.apple.jobjc.corefoundation.CFArrayCallBacks returnValue = com.apple.jobjc.JObjC.getInstance(getRuntime()).CoreFoundation().makeCFArrayCallBacks();
		getConstant("kCFTypeArrayCallBacks", returnValue, com.apple.jobjc.corefoundation.CFArrayCallBacks.getStructCoder().sizeof());
		
		_kCFTypeArrayCallBacks = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFBagCallBacks _kCFTypeBagCallBacks = null;
	 final public com.apple.jobjc.corefoundation.CFBagCallBacks kCFTypeBagCallBacks(){
		if(_kCFTypeBagCallBacks != null) return _kCFTypeBagCallBacks;
				com.apple.jobjc.corefoundation.CFBagCallBacks returnValue = com.apple.jobjc.JObjC.getInstance(getRuntime()).CoreFoundation().makeCFBagCallBacks();
		getConstant("kCFTypeBagCallBacks", returnValue, com.apple.jobjc.corefoundation.CFBagCallBacks.getStructCoder().sizeof());
		
		_kCFTypeBagCallBacks = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFDictionaryKeyCallBacks _kCFTypeDictionaryKeyCallBacks = null;
	 final public com.apple.jobjc.corefoundation.CFDictionaryKeyCallBacks kCFTypeDictionaryKeyCallBacks(){
		if(_kCFTypeDictionaryKeyCallBacks != null) return _kCFTypeDictionaryKeyCallBacks;
				com.apple.jobjc.corefoundation.CFDictionaryKeyCallBacks returnValue = com.apple.jobjc.JObjC.getInstance(getRuntime()).CoreFoundation().makeCFDictionaryKeyCallBacks();
		getConstant("kCFTypeDictionaryKeyCallBacks", returnValue, com.apple.jobjc.corefoundation.CFDictionaryKeyCallBacks.getStructCoder().sizeof());
		
		_kCFTypeDictionaryKeyCallBacks = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFDictionaryValueCallBacks _kCFTypeDictionaryValueCallBacks = null;
	 final public com.apple.jobjc.corefoundation.CFDictionaryValueCallBacks kCFTypeDictionaryValueCallBacks(){
		if(_kCFTypeDictionaryValueCallBacks != null) return _kCFTypeDictionaryValueCallBacks;
				com.apple.jobjc.corefoundation.CFDictionaryValueCallBacks returnValue = com.apple.jobjc.JObjC.getInstance(getRuntime()).CoreFoundation().makeCFDictionaryValueCallBacks();
		getConstant("kCFTypeDictionaryValueCallBacks", returnValue, com.apple.jobjc.corefoundation.CFDictionaryValueCallBacks.getStructCoder().sizeof());
		
		_kCFTypeDictionaryValueCallBacks = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFSetCallBacks _kCFTypeSetCallBacks = null;
	 final public com.apple.jobjc.corefoundation.CFSetCallBacks kCFTypeSetCallBacks(){
		if(_kCFTypeSetCallBacks != null) return _kCFTypeSetCallBacks;
				com.apple.jobjc.corefoundation.CFSetCallBacks returnValue = com.apple.jobjc.JObjC.getInstance(getRuntime()).CoreFoundation().makeCFSetCallBacks();
		getConstant("kCFTypeSetCallBacks", returnValue, com.apple.jobjc.corefoundation.CFSetCallBacks.getStructCoder().sizeof());
		
		_kCFTypeSetCallBacks = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLAttributeModificationDateKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLAttributeModificationDateKey(){
		if(_kCFURLAttributeModificationDateKey != null) return _kCFURLAttributeModificationDateKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLAttributeModificationDateKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLAttributeModificationDateKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLContentAccessDateKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLContentAccessDateKey(){
		if(_kCFURLContentAccessDateKey != null) return _kCFURLContentAccessDateKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLContentAccessDateKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLContentAccessDateKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLContentModificationDateKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLContentModificationDateKey(){
		if(_kCFURLContentModificationDateKey != null) return _kCFURLContentModificationDateKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLContentModificationDateKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLContentModificationDateKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLCreationDateKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLCreationDateKey(){
		if(_kCFURLCreationDateKey != null) return _kCFURLCreationDateKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLCreationDateKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLCreationDateKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLCustomIconKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLCustomIconKey(){
		if(_kCFURLCustomIconKey != null) return _kCFURLCustomIconKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLCustomIconKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLCustomIconKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLEffectiveIconKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLEffectiveIconKey(){
		if(_kCFURLEffectiveIconKey != null) return _kCFURLEffectiveIconKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLEffectiveIconKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLEffectiveIconKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLFileAllocatedSizeKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLFileAllocatedSizeKey(){
		if(_kCFURLFileAllocatedSizeKey != null) return _kCFURLFileAllocatedSizeKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLFileAllocatedSizeKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLFileAllocatedSizeKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLFileDirectoryContents = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLFileDirectoryContents(){
		if(_kCFURLFileDirectoryContents != null) return _kCFURLFileDirectoryContents;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLFileDirectoryContents", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLFileDirectoryContents = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLFileExists = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLFileExists(){
		if(_kCFURLFileExists != null) return _kCFURLFileExists;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLFileExists", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLFileExists = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLFileLastModificationTime = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLFileLastModificationTime(){
		if(_kCFURLFileLastModificationTime != null) return _kCFURLFileLastModificationTime;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLFileLastModificationTime", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLFileLastModificationTime = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLFileLength = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLFileLength(){
		if(_kCFURLFileLength != null) return _kCFURLFileLength;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLFileLength", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLFileLength = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLFileOwnerID = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLFileOwnerID(){
		if(_kCFURLFileOwnerID != null) return _kCFURLFileOwnerID;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLFileOwnerID", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLFileOwnerID = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLFilePOSIXMode = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLFilePOSIXMode(){
		if(_kCFURLFilePOSIXMode != null) return _kCFURLFilePOSIXMode;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLFilePOSIXMode", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLFilePOSIXMode = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLFileResourceIdentifierKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLFileResourceIdentifierKey(){
		if(_kCFURLFileResourceIdentifierKey != null) return _kCFURLFileResourceIdentifierKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLFileResourceIdentifierKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLFileResourceIdentifierKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLFileResourceTypeBlockSpecial = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLFileResourceTypeBlockSpecial(){
		if(_kCFURLFileResourceTypeBlockSpecial != null) return _kCFURLFileResourceTypeBlockSpecial;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLFileResourceTypeBlockSpecial", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLFileResourceTypeBlockSpecial = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLFileResourceTypeCharacterSpecial = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLFileResourceTypeCharacterSpecial(){
		if(_kCFURLFileResourceTypeCharacterSpecial != null) return _kCFURLFileResourceTypeCharacterSpecial;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLFileResourceTypeCharacterSpecial", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLFileResourceTypeCharacterSpecial = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLFileResourceTypeDirectory = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLFileResourceTypeDirectory(){
		if(_kCFURLFileResourceTypeDirectory != null) return _kCFURLFileResourceTypeDirectory;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLFileResourceTypeDirectory", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLFileResourceTypeDirectory = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLFileResourceTypeKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLFileResourceTypeKey(){
		if(_kCFURLFileResourceTypeKey != null) return _kCFURLFileResourceTypeKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLFileResourceTypeKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLFileResourceTypeKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLFileResourceTypeNamedPipe = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLFileResourceTypeNamedPipe(){
		if(_kCFURLFileResourceTypeNamedPipe != null) return _kCFURLFileResourceTypeNamedPipe;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLFileResourceTypeNamedPipe", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLFileResourceTypeNamedPipe = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLFileResourceTypeRegular = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLFileResourceTypeRegular(){
		if(_kCFURLFileResourceTypeRegular != null) return _kCFURLFileResourceTypeRegular;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLFileResourceTypeRegular", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLFileResourceTypeRegular = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLFileResourceTypeSocket = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLFileResourceTypeSocket(){
		if(_kCFURLFileResourceTypeSocket != null) return _kCFURLFileResourceTypeSocket;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLFileResourceTypeSocket", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLFileResourceTypeSocket = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLFileResourceTypeSymbolicLink = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLFileResourceTypeSymbolicLink(){
		if(_kCFURLFileResourceTypeSymbolicLink != null) return _kCFURLFileResourceTypeSymbolicLink;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLFileResourceTypeSymbolicLink", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLFileResourceTypeSymbolicLink = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLFileResourceTypeUnknown = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLFileResourceTypeUnknown(){
		if(_kCFURLFileResourceTypeUnknown != null) return _kCFURLFileResourceTypeUnknown;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLFileResourceTypeUnknown", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLFileResourceTypeUnknown = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLFileSecurityKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLFileSecurityKey(){
		if(_kCFURLFileSecurityKey != null) return _kCFURLFileSecurityKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLFileSecurityKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLFileSecurityKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLFileSizeKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLFileSizeKey(){
		if(_kCFURLFileSizeKey != null) return _kCFURLFileSizeKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLFileSizeKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLFileSizeKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLHTTPStatusCode = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLHTTPStatusCode(){
		if(_kCFURLHTTPStatusCode != null) return _kCFURLHTTPStatusCode;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLHTTPStatusCode", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLHTTPStatusCode = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLHTTPStatusLine = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLHTTPStatusLine(){
		if(_kCFURLHTTPStatusLine != null) return _kCFURLHTTPStatusLine;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLHTTPStatusLine", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLHTTPStatusLine = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLHasHiddenExtensionKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLHasHiddenExtensionKey(){
		if(_kCFURLHasHiddenExtensionKey != null) return _kCFURLHasHiddenExtensionKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLHasHiddenExtensionKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLHasHiddenExtensionKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLIsAliasFileKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLIsAliasFileKey(){
		if(_kCFURLIsAliasFileKey != null) return _kCFURLIsAliasFileKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLIsAliasFileKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLIsAliasFileKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLIsDirectoryKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLIsDirectoryKey(){
		if(_kCFURLIsDirectoryKey != null) return _kCFURLIsDirectoryKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLIsDirectoryKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLIsDirectoryKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLIsExcludedFromBackupKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLIsExcludedFromBackupKey(){
		if(_kCFURLIsExcludedFromBackupKey != null) return _kCFURLIsExcludedFromBackupKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLIsExcludedFromBackupKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLIsExcludedFromBackupKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLIsExecutableKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLIsExecutableKey(){
		if(_kCFURLIsExecutableKey != null) return _kCFURLIsExecutableKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLIsExecutableKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLIsExecutableKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLIsHiddenKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLIsHiddenKey(){
		if(_kCFURLIsHiddenKey != null) return _kCFURLIsHiddenKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLIsHiddenKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLIsHiddenKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLIsMountTriggerKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLIsMountTriggerKey(){
		if(_kCFURLIsMountTriggerKey != null) return _kCFURLIsMountTriggerKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLIsMountTriggerKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLIsMountTriggerKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLIsPackageKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLIsPackageKey(){
		if(_kCFURLIsPackageKey != null) return _kCFURLIsPackageKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLIsPackageKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLIsPackageKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLIsReadableKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLIsReadableKey(){
		if(_kCFURLIsReadableKey != null) return _kCFURLIsReadableKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLIsReadableKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLIsReadableKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLIsRegularFileKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLIsRegularFileKey(){
		if(_kCFURLIsRegularFileKey != null) return _kCFURLIsRegularFileKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLIsRegularFileKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLIsRegularFileKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLIsSymbolicLinkKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLIsSymbolicLinkKey(){
		if(_kCFURLIsSymbolicLinkKey != null) return _kCFURLIsSymbolicLinkKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLIsSymbolicLinkKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLIsSymbolicLinkKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLIsSystemImmutableKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLIsSystemImmutableKey(){
		if(_kCFURLIsSystemImmutableKey != null) return _kCFURLIsSystemImmutableKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLIsSystemImmutableKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLIsSystemImmutableKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLIsUbiquitousItemKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLIsUbiquitousItemKey(){
		if(_kCFURLIsUbiquitousItemKey != null) return _kCFURLIsUbiquitousItemKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLIsUbiquitousItemKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLIsUbiquitousItemKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLIsUserImmutableKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLIsUserImmutableKey(){
		if(_kCFURLIsUserImmutableKey != null) return _kCFURLIsUserImmutableKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLIsUserImmutableKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLIsUserImmutableKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLIsVolumeKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLIsVolumeKey(){
		if(_kCFURLIsVolumeKey != null) return _kCFURLIsVolumeKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLIsVolumeKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLIsVolumeKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLIsWritableKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLIsWritableKey(){
		if(_kCFURLIsWritableKey != null) return _kCFURLIsWritableKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLIsWritableKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLIsWritableKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLKeysOfUnsetValuesKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLKeysOfUnsetValuesKey(){
		if(_kCFURLKeysOfUnsetValuesKey != null) return _kCFURLKeysOfUnsetValuesKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLKeysOfUnsetValuesKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLKeysOfUnsetValuesKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLLabelColorKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLLabelColorKey(){
		if(_kCFURLLabelColorKey != null) return _kCFURLLabelColorKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLLabelColorKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLLabelColorKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLLabelNumberKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLLabelNumberKey(){
		if(_kCFURLLabelNumberKey != null) return _kCFURLLabelNumberKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLLabelNumberKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLLabelNumberKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLLinkCountKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLLinkCountKey(){
		if(_kCFURLLinkCountKey != null) return _kCFURLLinkCountKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLLinkCountKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLLinkCountKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLLocalizedLabelKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLLocalizedLabelKey(){
		if(_kCFURLLocalizedLabelKey != null) return _kCFURLLocalizedLabelKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLLocalizedLabelKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLLocalizedLabelKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLLocalizedNameKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLLocalizedNameKey(){
		if(_kCFURLLocalizedNameKey != null) return _kCFURLLocalizedNameKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLLocalizedNameKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLLocalizedNameKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLLocalizedTypeDescriptionKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLLocalizedTypeDescriptionKey(){
		if(_kCFURLLocalizedTypeDescriptionKey != null) return _kCFURLLocalizedTypeDescriptionKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLLocalizedTypeDescriptionKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLLocalizedTypeDescriptionKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLNameKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLNameKey(){
		if(_kCFURLNameKey != null) return _kCFURLNameKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLNameKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLNameKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLParentDirectoryURLKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLParentDirectoryURLKey(){
		if(_kCFURLParentDirectoryURLKey != null) return _kCFURLParentDirectoryURLKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLParentDirectoryURLKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLParentDirectoryURLKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLPathKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLPathKey(){
		if(_kCFURLPathKey != null) return _kCFURLPathKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLPathKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLPathKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLPreferredIOBlockSizeKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLPreferredIOBlockSizeKey(){
		if(_kCFURLPreferredIOBlockSizeKey != null) return _kCFURLPreferredIOBlockSizeKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLPreferredIOBlockSizeKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLPreferredIOBlockSizeKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLTotalFileAllocatedSizeKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLTotalFileAllocatedSizeKey(){
		if(_kCFURLTotalFileAllocatedSizeKey != null) return _kCFURLTotalFileAllocatedSizeKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLTotalFileAllocatedSizeKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLTotalFileAllocatedSizeKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLTotalFileSizeKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLTotalFileSizeKey(){
		if(_kCFURLTotalFileSizeKey != null) return _kCFURLTotalFileSizeKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLTotalFileSizeKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLTotalFileSizeKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLTypeIdentifierKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLTypeIdentifierKey(){
		if(_kCFURLTypeIdentifierKey != null) return _kCFURLTypeIdentifierKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLTypeIdentifierKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLTypeIdentifierKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLUbiquitousItemHasUnresolvedConflictsKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLUbiquitousItemHasUnresolvedConflictsKey(){
		if(_kCFURLUbiquitousItemHasUnresolvedConflictsKey != null) return _kCFURLUbiquitousItemHasUnresolvedConflictsKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLUbiquitousItemHasUnresolvedConflictsKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLUbiquitousItemHasUnresolvedConflictsKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLUbiquitousItemIsDownloadedKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLUbiquitousItemIsDownloadedKey(){
		if(_kCFURLUbiquitousItemIsDownloadedKey != null) return _kCFURLUbiquitousItemIsDownloadedKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLUbiquitousItemIsDownloadedKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLUbiquitousItemIsDownloadedKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLUbiquitousItemIsDownloadingKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLUbiquitousItemIsDownloadingKey(){
		if(_kCFURLUbiquitousItemIsDownloadingKey != null) return _kCFURLUbiquitousItemIsDownloadingKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLUbiquitousItemIsDownloadingKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLUbiquitousItemIsDownloadingKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLUbiquitousItemIsUploadedKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLUbiquitousItemIsUploadedKey(){
		if(_kCFURLUbiquitousItemIsUploadedKey != null) return _kCFURLUbiquitousItemIsUploadedKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLUbiquitousItemIsUploadedKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLUbiquitousItemIsUploadedKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLUbiquitousItemIsUploadingKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLUbiquitousItemIsUploadingKey(){
		if(_kCFURLUbiquitousItemIsUploadingKey != null) return _kCFURLUbiquitousItemIsUploadingKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLUbiquitousItemIsUploadingKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLUbiquitousItemIsUploadingKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLUbiquitousItemPercentDownloadedKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLUbiquitousItemPercentDownloadedKey(){
		if(_kCFURLUbiquitousItemPercentDownloadedKey != null) return _kCFURLUbiquitousItemPercentDownloadedKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLUbiquitousItemPercentDownloadedKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLUbiquitousItemPercentDownloadedKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLUbiquitousItemPercentUploadedKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLUbiquitousItemPercentUploadedKey(){
		if(_kCFURLUbiquitousItemPercentUploadedKey != null) return _kCFURLUbiquitousItemPercentUploadedKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLUbiquitousItemPercentUploadedKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLUbiquitousItemPercentUploadedKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeAvailableCapacityKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeAvailableCapacityKey(){
		if(_kCFURLVolumeAvailableCapacityKey != null) return _kCFURLVolumeAvailableCapacityKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeAvailableCapacityKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeAvailableCapacityKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeCreationDateKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeCreationDateKey(){
		if(_kCFURLVolumeCreationDateKey != null) return _kCFURLVolumeCreationDateKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeCreationDateKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeCreationDateKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeIdentifierKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeIdentifierKey(){
		if(_kCFURLVolumeIdentifierKey != null) return _kCFURLVolumeIdentifierKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeIdentifierKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeIdentifierKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeIsAutomountedKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeIsAutomountedKey(){
		if(_kCFURLVolumeIsAutomountedKey != null) return _kCFURLVolumeIsAutomountedKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeIsAutomountedKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeIsAutomountedKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeIsBrowsableKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeIsBrowsableKey(){
		if(_kCFURLVolumeIsBrowsableKey != null) return _kCFURLVolumeIsBrowsableKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeIsBrowsableKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeIsBrowsableKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeIsEjectableKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeIsEjectableKey(){
		if(_kCFURLVolumeIsEjectableKey != null) return _kCFURLVolumeIsEjectableKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeIsEjectableKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeIsEjectableKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeIsInternalKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeIsInternalKey(){
		if(_kCFURLVolumeIsInternalKey != null) return _kCFURLVolumeIsInternalKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeIsInternalKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeIsInternalKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeIsJournalingKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeIsJournalingKey(){
		if(_kCFURLVolumeIsJournalingKey != null) return _kCFURLVolumeIsJournalingKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeIsJournalingKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeIsJournalingKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeIsLocalKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeIsLocalKey(){
		if(_kCFURLVolumeIsLocalKey != null) return _kCFURLVolumeIsLocalKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeIsLocalKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeIsLocalKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeIsReadOnlyKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeIsReadOnlyKey(){
		if(_kCFURLVolumeIsReadOnlyKey != null) return _kCFURLVolumeIsReadOnlyKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeIsReadOnlyKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeIsReadOnlyKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeIsRemovableKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeIsRemovableKey(){
		if(_kCFURLVolumeIsRemovableKey != null) return _kCFURLVolumeIsRemovableKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeIsRemovableKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeIsRemovableKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeLocalizedFormatDescriptionKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeLocalizedFormatDescriptionKey(){
		if(_kCFURLVolumeLocalizedFormatDescriptionKey != null) return _kCFURLVolumeLocalizedFormatDescriptionKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeLocalizedFormatDescriptionKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeLocalizedFormatDescriptionKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeLocalizedNameKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeLocalizedNameKey(){
		if(_kCFURLVolumeLocalizedNameKey != null) return _kCFURLVolumeLocalizedNameKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeLocalizedNameKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeLocalizedNameKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeMaximumFileSizeKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeMaximumFileSizeKey(){
		if(_kCFURLVolumeMaximumFileSizeKey != null) return _kCFURLVolumeMaximumFileSizeKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeMaximumFileSizeKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeMaximumFileSizeKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeNameKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeNameKey(){
		if(_kCFURLVolumeNameKey != null) return _kCFURLVolumeNameKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeNameKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeNameKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeResourceCountKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeResourceCountKey(){
		if(_kCFURLVolumeResourceCountKey != null) return _kCFURLVolumeResourceCountKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeResourceCountKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeResourceCountKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeSupportsAdvisoryFileLockingKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeSupportsAdvisoryFileLockingKey(){
		if(_kCFURLVolumeSupportsAdvisoryFileLockingKey != null) return _kCFURLVolumeSupportsAdvisoryFileLockingKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeSupportsAdvisoryFileLockingKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeSupportsAdvisoryFileLockingKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeSupportsCasePreservedNamesKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeSupportsCasePreservedNamesKey(){
		if(_kCFURLVolumeSupportsCasePreservedNamesKey != null) return _kCFURLVolumeSupportsCasePreservedNamesKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeSupportsCasePreservedNamesKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeSupportsCasePreservedNamesKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeSupportsCaseSensitiveNamesKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeSupportsCaseSensitiveNamesKey(){
		if(_kCFURLVolumeSupportsCaseSensitiveNamesKey != null) return _kCFURLVolumeSupportsCaseSensitiveNamesKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeSupportsCaseSensitiveNamesKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeSupportsCaseSensitiveNamesKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeSupportsExtendedSecurityKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeSupportsExtendedSecurityKey(){
		if(_kCFURLVolumeSupportsExtendedSecurityKey != null) return _kCFURLVolumeSupportsExtendedSecurityKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeSupportsExtendedSecurityKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeSupportsExtendedSecurityKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeSupportsHardLinksKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeSupportsHardLinksKey(){
		if(_kCFURLVolumeSupportsHardLinksKey != null) return _kCFURLVolumeSupportsHardLinksKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeSupportsHardLinksKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeSupportsHardLinksKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeSupportsJournalingKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeSupportsJournalingKey(){
		if(_kCFURLVolumeSupportsJournalingKey != null) return _kCFURLVolumeSupportsJournalingKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeSupportsJournalingKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeSupportsJournalingKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeSupportsPersistentIDsKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeSupportsPersistentIDsKey(){
		if(_kCFURLVolumeSupportsPersistentIDsKey != null) return _kCFURLVolumeSupportsPersistentIDsKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeSupportsPersistentIDsKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeSupportsPersistentIDsKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeSupportsRenamingKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeSupportsRenamingKey(){
		if(_kCFURLVolumeSupportsRenamingKey != null) return _kCFURLVolumeSupportsRenamingKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeSupportsRenamingKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeSupportsRenamingKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeSupportsRootDirectoryDatesKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeSupportsRootDirectoryDatesKey(){
		if(_kCFURLVolumeSupportsRootDirectoryDatesKey != null) return _kCFURLVolumeSupportsRootDirectoryDatesKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeSupportsRootDirectoryDatesKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeSupportsRootDirectoryDatesKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeSupportsSparseFilesKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeSupportsSparseFilesKey(){
		if(_kCFURLVolumeSupportsSparseFilesKey != null) return _kCFURLVolumeSupportsSparseFilesKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeSupportsSparseFilesKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeSupportsSparseFilesKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeSupportsSymbolicLinksKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeSupportsSymbolicLinksKey(){
		if(_kCFURLVolumeSupportsSymbolicLinksKey != null) return _kCFURLVolumeSupportsSymbolicLinksKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeSupportsSymbolicLinksKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeSupportsSymbolicLinksKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeSupportsVolumeSizesKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeSupportsVolumeSizesKey(){
		if(_kCFURLVolumeSupportsVolumeSizesKey != null) return _kCFURLVolumeSupportsVolumeSizesKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeSupportsVolumeSizesKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeSupportsVolumeSizesKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeSupportsZeroRunsKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeSupportsZeroRunsKey(){
		if(_kCFURLVolumeSupportsZeroRunsKey != null) return _kCFURLVolumeSupportsZeroRunsKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeSupportsZeroRunsKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeSupportsZeroRunsKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeTotalCapacityKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeTotalCapacityKey(){
		if(_kCFURLVolumeTotalCapacityKey != null) return _kCFURLVolumeTotalCapacityKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeTotalCapacityKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeTotalCapacityKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeURLForRemountingKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeURLForRemountingKey(){
		if(_kCFURLVolumeURLForRemountingKey != null) return _kCFURLVolumeURLForRemountingKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeURLForRemountingKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeURLForRemountingKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeURLKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeURLKey(){
		if(_kCFURLVolumeURLKey != null) return _kCFURLVolumeURLKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeURLKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeURLKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFURLVolumeUUIDStringKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFURLVolumeUUIDStringKey(){
		if(_kCFURLVolumeUUIDStringKey != null) return _kCFURLVolumeUUIDStringKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFURLVolumeUUIDStringKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFURLVolumeUUIDStringKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFUserNotificationAlertHeaderKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFUserNotificationAlertHeaderKey(){
		if(_kCFUserNotificationAlertHeaderKey != null) return _kCFUserNotificationAlertHeaderKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFUserNotificationAlertHeaderKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFUserNotificationAlertHeaderKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFUserNotificationAlertMessageKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFUserNotificationAlertMessageKey(){
		if(_kCFUserNotificationAlertMessageKey != null) return _kCFUserNotificationAlertMessageKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFUserNotificationAlertMessageKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFUserNotificationAlertMessageKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFUserNotificationAlternateButtonTitleKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFUserNotificationAlternateButtonTitleKey(){
		if(_kCFUserNotificationAlternateButtonTitleKey != null) return _kCFUserNotificationAlternateButtonTitleKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFUserNotificationAlternateButtonTitleKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFUserNotificationAlternateButtonTitleKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFUserNotificationCheckBoxTitlesKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFUserNotificationCheckBoxTitlesKey(){
		if(_kCFUserNotificationCheckBoxTitlesKey != null) return _kCFUserNotificationCheckBoxTitlesKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFUserNotificationCheckBoxTitlesKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFUserNotificationCheckBoxTitlesKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFUserNotificationDefaultButtonTitleKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFUserNotificationDefaultButtonTitleKey(){
		if(_kCFUserNotificationDefaultButtonTitleKey != null) return _kCFUserNotificationDefaultButtonTitleKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFUserNotificationDefaultButtonTitleKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFUserNotificationDefaultButtonTitleKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFUserNotificationIconURLKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFUserNotificationIconURLKey(){
		if(_kCFUserNotificationIconURLKey != null) return _kCFUserNotificationIconURLKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFUserNotificationIconURLKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFUserNotificationIconURLKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFUserNotificationLocalizationURLKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFUserNotificationLocalizationURLKey(){
		if(_kCFUserNotificationLocalizationURLKey != null) return _kCFUserNotificationLocalizationURLKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFUserNotificationLocalizationURLKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFUserNotificationLocalizationURLKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFUserNotificationOtherButtonTitleKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFUserNotificationOtherButtonTitleKey(){
		if(_kCFUserNotificationOtherButtonTitleKey != null) return _kCFUserNotificationOtherButtonTitleKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFUserNotificationOtherButtonTitleKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFUserNotificationOtherButtonTitleKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFUserNotificationPopUpSelectionKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFUserNotificationPopUpSelectionKey(){
		if(_kCFUserNotificationPopUpSelectionKey != null) return _kCFUserNotificationPopUpSelectionKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFUserNotificationPopUpSelectionKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFUserNotificationPopUpSelectionKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFUserNotificationPopUpTitlesKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFUserNotificationPopUpTitlesKey(){
		if(_kCFUserNotificationPopUpTitlesKey != null) return _kCFUserNotificationPopUpTitlesKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFUserNotificationPopUpTitlesKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFUserNotificationPopUpTitlesKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFUserNotificationProgressIndicatorValueKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFUserNotificationProgressIndicatorValueKey(){
		if(_kCFUserNotificationProgressIndicatorValueKey != null) return _kCFUserNotificationProgressIndicatorValueKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFUserNotificationProgressIndicatorValueKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFUserNotificationProgressIndicatorValueKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFUserNotificationSoundURLKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFUserNotificationSoundURLKey(){
		if(_kCFUserNotificationSoundURLKey != null) return _kCFUserNotificationSoundURLKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFUserNotificationSoundURLKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFUserNotificationSoundURLKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFUserNotificationTextFieldTitlesKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFUserNotificationTextFieldTitlesKey(){
		if(_kCFUserNotificationTextFieldTitlesKey != null) return _kCFUserNotificationTextFieldTitlesKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFUserNotificationTextFieldTitlesKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFUserNotificationTextFieldTitlesKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFUserNotificationTextFieldValuesKey = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFUserNotificationTextFieldValuesKey(){
		if(_kCFUserNotificationTextFieldValuesKey != null) return _kCFUserNotificationTextFieldValuesKey;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFUserNotificationTextFieldValuesKey", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFUserNotificationTextFieldValuesKey = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFXMLTreeErrorDescription = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFXMLTreeErrorDescription(){
		if(_kCFXMLTreeErrorDescription != null) return _kCFXMLTreeErrorDescription;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFXMLTreeErrorDescription", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFXMLTreeErrorDescription = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFXMLTreeErrorLineNumber = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFXMLTreeErrorLineNumber(){
		if(_kCFXMLTreeErrorLineNumber != null) return _kCFXMLTreeErrorLineNumber;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFXMLTreeErrorLineNumber", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFXMLTreeErrorLineNumber = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFXMLTreeErrorLocation = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFXMLTreeErrorLocation(){
		if(_kCFXMLTreeErrorLocation != null) return _kCFXMLTreeErrorLocation;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFXMLTreeErrorLocation", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFXMLTreeErrorLocation = returnValue;
		return returnValue;
	}

	private com.apple.jobjc.corefoundation.CFStringRefCFType _kCFXMLTreeErrorStatusCode = null;
	 final public com.apple.jobjc.corefoundation.CFStringRefCFType kCFXMLTreeErrorStatusCode(){
		if(_kCFXMLTreeErrorStatusCode != null) return _kCFXMLTreeErrorStatusCode;
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		getConstant("kCFXMLTreeErrorStatusCode", nativeBuffer, com.apple.jobjc.Coder.PointerCoder.INST.sizeof());
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		_kCFXMLTreeErrorStatusCode = returnValue;
		return returnValue;
	}
	private static com.apple.jobjc.Invoke.FunCall CFAbsoluteTimeAddGregorianUnits_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAbsoluteTimeAddGregorianUnits_FxnInst(){
		return ((CFAbsoluteTimeAddGregorianUnits_FxnInst != null)
	? (CFAbsoluteTimeAddGregorianUnits_FxnInst)
	: (CFAbsoluteTimeAddGregorianUnits_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAbsoluteTimeAddGregorianUnits", com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFGregorianUnits.getStructCoder())));
	}

	 public double CFAbsoluteTimeAddGregorianUnits(final double at, final com.apple.jobjc.corefoundation.CFTimeZoneRefCFType tz, final com.apple.jobjc.corefoundation.CFGregorianUnits units){
			final com.apple.jobjc.Invoke.FunCall CFAbsoluteTimeAddGregorianUnits_FxnInst = get_CFAbsoluteTimeAddGregorianUnits_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAbsoluteTimeAddGregorianUnits_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, at);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tz);
		com.apple.jobjc.corefoundation.CFGregorianUnits.getStructCoder().push(nativeBuffer, units);
		CFAbsoluteTimeAddGregorianUnits_FxnInst.invoke(nativeBuffer);
		final double returnValue = (double) (com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.popDouble(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFAbsoluteTimeGetCurrent_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAbsoluteTimeGetCurrent_FxnInst(){
		return ((CFAbsoluteTimeGetCurrent_FxnInst != null)
	? (CFAbsoluteTimeGetCurrent_FxnInst)
	: (CFAbsoluteTimeGetCurrent_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAbsoluteTimeGetCurrent", com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST)));
	}

	 public double CFAbsoluteTimeGetCurrent(){
			final com.apple.jobjc.Invoke.FunCall CFAbsoluteTimeGetCurrent_FxnInst = get_CFAbsoluteTimeGetCurrent_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAbsoluteTimeGetCurrent_FxnInst.init(nativeBuffer);
		CFAbsoluteTimeGetCurrent_FxnInst.invoke(nativeBuffer);
		final double returnValue = (double) (com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.popDouble(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFAbsoluteTimeGetDayOfWeek_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAbsoluteTimeGetDayOfWeek_FxnInst(){
		return ((CFAbsoluteTimeGetDayOfWeek_FxnInst != null)
	? (CFAbsoluteTimeGetDayOfWeek_FxnInst)
	: (CFAbsoluteTimeGetDayOfWeek_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAbsoluteTimeGetDayOfWeek", com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public int CFAbsoluteTimeGetDayOfWeek(final double at, final com.apple.jobjc.corefoundation.CFTimeZoneRefCFType tz){
			final com.apple.jobjc.Invoke.FunCall CFAbsoluteTimeGetDayOfWeek_FxnInst = get_CFAbsoluteTimeGetDayOfWeek_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAbsoluteTimeGetDayOfWeek_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, at);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tz);
		CFAbsoluteTimeGetDayOfWeek_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFAbsoluteTimeGetDayOfYear_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAbsoluteTimeGetDayOfYear_FxnInst(){
		return ((CFAbsoluteTimeGetDayOfYear_FxnInst != null)
	? (CFAbsoluteTimeGetDayOfYear_FxnInst)
	: (CFAbsoluteTimeGetDayOfYear_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAbsoluteTimeGetDayOfYear", com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public int CFAbsoluteTimeGetDayOfYear(final double at, final com.apple.jobjc.corefoundation.CFTimeZoneRefCFType tz){
			final com.apple.jobjc.Invoke.FunCall CFAbsoluteTimeGetDayOfYear_FxnInst = get_CFAbsoluteTimeGetDayOfYear_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAbsoluteTimeGetDayOfYear_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, at);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tz);
		CFAbsoluteTimeGetDayOfYear_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFAbsoluteTimeGetDifferenceAsGregorianUnits_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAbsoluteTimeGetDifferenceAsGregorianUnits_FxnInst(){
		return ((CFAbsoluteTimeGetDifferenceAsGregorianUnits_FxnInst != null)
	? (CFAbsoluteTimeGetDifferenceAsGregorianUnits_FxnInst)
	: (CFAbsoluteTimeGetDifferenceAsGregorianUnits_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAbsoluteTimeGetDifferenceAsGregorianUnits", com.apple.jobjc.corefoundation.CFGregorianUnits.getStructCoder(), com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFGregorianUnits CFAbsoluteTimeGetDifferenceAsGregorianUnits(final double at1, final double at2, final com.apple.jobjc.corefoundation.CFTimeZoneRefCFType tz, final long unitFlags){
			final com.apple.jobjc.Invoke.FunCall CFAbsoluteTimeGetDifferenceAsGregorianUnits_FxnInst = get_CFAbsoluteTimeGetDifferenceAsGregorianUnits_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAbsoluteTimeGetDifferenceAsGregorianUnits_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, at1);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, at2);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tz);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, unitFlags);
				com.apple.jobjc.corefoundation.CFGregorianUnits returnValue = com.apple.jobjc.JObjC.getInstance(getRuntime()).CoreFoundation().makeCFGregorianUnits();
		CFAbsoluteTimeGetDifferenceAsGregorianUnits_FxnInst.invoke(nativeBuffer, returnValue);
		
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFAbsoluteTimeGetGregorianDate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAbsoluteTimeGetGregorianDate_FxnInst(){
		return ((CFAbsoluteTimeGetGregorianDate_FxnInst != null)
	? (CFAbsoluteTimeGetGregorianDate_FxnInst)
	: (CFAbsoluteTimeGetGregorianDate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAbsoluteTimeGetGregorianDate", com.apple.jobjc.corefoundation.CFGregorianDate.getStructCoder(), com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFGregorianDate CFAbsoluteTimeGetGregorianDate(final double at, final com.apple.jobjc.corefoundation.CFTimeZoneRefCFType tz){
			final com.apple.jobjc.Invoke.FunCall CFAbsoluteTimeGetGregorianDate_FxnInst = get_CFAbsoluteTimeGetGregorianDate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAbsoluteTimeGetGregorianDate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, at);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tz);
				com.apple.jobjc.corefoundation.CFGregorianDate returnValue = com.apple.jobjc.JObjC.getInstance(getRuntime()).CoreFoundation().makeCFGregorianDate();
		CFAbsoluteTimeGetGregorianDate_FxnInst.invoke(nativeBuffer, returnValue);
		
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFAbsoluteTimeGetWeekOfYear_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAbsoluteTimeGetWeekOfYear_FxnInst(){
		return ((CFAbsoluteTimeGetWeekOfYear_FxnInst != null)
	? (CFAbsoluteTimeGetWeekOfYear_FxnInst)
	: (CFAbsoluteTimeGetWeekOfYear_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAbsoluteTimeGetWeekOfYear", com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public int CFAbsoluteTimeGetWeekOfYear(final double at, final com.apple.jobjc.corefoundation.CFTimeZoneRefCFType tz){
			final com.apple.jobjc.Invoke.FunCall CFAbsoluteTimeGetWeekOfYear_FxnInst = get_CFAbsoluteTimeGetWeekOfYear_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAbsoluteTimeGetWeekOfYear_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, at);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tz);
		CFAbsoluteTimeGetWeekOfYear_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFAllocatorAllocate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAllocatorAllocate_FxnInst(){
		return ((CFAllocatorAllocate_FxnInst != null)
	? (CFAllocatorAllocate_FxnInst)
	: (CFAllocatorAllocate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAllocatorAllocate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public com.apple.jobjc.Pointer<Void> CFAllocatorAllocate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final long size, final long hint){
			final com.apple.jobjc.Invoke.FunCall CFAllocatorAllocate_FxnInst = get_CFAllocatorAllocate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAllocatorAllocate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, size);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, hint);
		CFAllocatorAllocate_FxnInst.invoke(nativeBuffer);
		final com.apple.jobjc.Pointer<Void> returnValue = (com.apple.jobjc.Pointer<Void>) (com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFAllocatorCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAllocatorCreate_FxnInst(){
		return ((CFAllocatorCreate_FxnInst != null)
	? (CFAllocatorCreate_FxnInst)
	: (CFAllocatorCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAllocatorCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFAllocatorRefCFType CFAllocatorCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFAllocatorContext> context){
			final com.apple.jobjc.Invoke.FunCall CFAllocatorCreate_FxnInst = get_CFAllocatorCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAllocatorCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFAllocatorCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFAllocatorRefCFType returnValue = (com.apple.jobjc.corefoundation.CFAllocatorRefCFType) new com.apple.jobjc.corefoundation.CFAllocatorRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFAllocatorDeallocate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAllocatorDeallocate_FxnInst(){
		return ((CFAllocatorDeallocate_FxnInst != null)
	? (CFAllocatorDeallocate_FxnInst)
	: (CFAllocatorDeallocate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAllocatorDeallocate", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFAllocatorDeallocate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.Pointer<Void> ptr){
			final com.apple.jobjc.Invoke.FunCall CFAllocatorDeallocate_FxnInst = get_CFAllocatorDeallocate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAllocatorDeallocate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, ptr);
		CFAllocatorDeallocate_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFAllocatorGetContext_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAllocatorGetContext_FxnInst(){
		return ((CFAllocatorGetContext_FxnInst != null)
	? (CFAllocatorGetContext_FxnInst)
	: (CFAllocatorGetContext_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAllocatorGetContext", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFAllocatorGetContext(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFAllocatorContext> context){
			final com.apple.jobjc.Invoke.FunCall CFAllocatorGetContext_FxnInst = get_CFAllocatorGetContext_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAllocatorGetContext_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFAllocatorGetContext_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFAllocatorGetDefault_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAllocatorGetDefault_FxnInst(){
		return ((CFAllocatorGetDefault_FxnInst != null)
	? (CFAllocatorGetDefault_FxnInst)
	: (CFAllocatorGetDefault_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAllocatorGetDefault", com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFAllocatorRefCFType CFAllocatorGetDefault(){
			final com.apple.jobjc.Invoke.FunCall CFAllocatorGetDefault_FxnInst = get_CFAllocatorGetDefault_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAllocatorGetDefault_FxnInst.init(nativeBuffer);
		CFAllocatorGetDefault_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFAllocatorRefCFType returnValue = (com.apple.jobjc.corefoundation.CFAllocatorRefCFType) new com.apple.jobjc.corefoundation.CFAllocatorRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFAllocatorGetPreferredSizeForSize_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAllocatorGetPreferredSizeForSize_FxnInst(){
		return ((CFAllocatorGetPreferredSizeForSize_FxnInst != null)
	? (CFAllocatorGetPreferredSizeForSize_FxnInst)
	: (CFAllocatorGetPreferredSizeForSize_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAllocatorGetPreferredSizeForSize", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFAllocatorGetPreferredSizeForSize(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final long size, final long hint){
			final com.apple.jobjc.Invoke.FunCall CFAllocatorGetPreferredSizeForSize_FxnInst = get_CFAllocatorGetPreferredSizeForSize_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAllocatorGetPreferredSizeForSize_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, size);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, hint);
		CFAllocatorGetPreferredSizeForSize_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFAllocatorGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAllocatorGetTypeID_FxnInst(){
		return ((CFAllocatorGetTypeID_FxnInst != null)
	? (CFAllocatorGetTypeID_FxnInst)
	: (CFAllocatorGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAllocatorGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFAllocatorGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFAllocatorGetTypeID_FxnInst = get_CFAllocatorGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAllocatorGetTypeID_FxnInst.init(nativeBuffer);
		CFAllocatorGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFAllocatorReallocate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAllocatorReallocate_FxnInst(){
		return ((CFAllocatorReallocate_FxnInst != null)
	? (CFAllocatorReallocate_FxnInst)
	: (CFAllocatorReallocate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAllocatorReallocate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public com.apple.jobjc.Pointer<Void> CFAllocatorReallocate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.Pointer<Void> ptr, final long newsize, final long hint){
			final com.apple.jobjc.Invoke.FunCall CFAllocatorReallocate_FxnInst = get_CFAllocatorReallocate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAllocatorReallocate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, ptr);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, newsize);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, hint);
		CFAllocatorReallocate_FxnInst.invoke(nativeBuffer);
		final com.apple.jobjc.Pointer<Void> returnValue = (com.apple.jobjc.Pointer<Void>) (com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFAllocatorSetDefault_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAllocatorSetDefault_FxnInst(){
		return ((CFAllocatorSetDefault_FxnInst != null)
	? (CFAllocatorSetDefault_FxnInst)
	: (CFAllocatorSetDefault_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAllocatorSetDefault", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFAllocatorSetDefault(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator){
			final com.apple.jobjc.Invoke.FunCall CFAllocatorSetDefault_FxnInst = get_CFAllocatorSetDefault_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAllocatorSetDefault_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		CFAllocatorSetDefault_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFArrayAppendArray_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFArrayAppendArray_FxnInst(){
		return ((CFArrayAppendArray_FxnInst != null)
	? (CFArrayAppendArray_FxnInst)
	: (CFArrayAppendArray_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFArrayAppendArray", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder())));
	}

	 public void CFArrayAppendArray(final com.apple.jobjc.corefoundation.CFMutableArrayRefCFType theArray, final com.apple.jobjc.corefoundation.CFArrayRefCFType otherArray, final com.apple.jobjc.corefoundation.CFRange otherRange){
			final com.apple.jobjc.Invoke.FunCall CFArrayAppendArray_FxnInst = get_CFArrayAppendArray_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFArrayAppendArray_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theArray);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, otherArray);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, otherRange);
		CFArrayAppendArray_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFArrayAppendValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFArrayAppendValue_FxnInst(){
		return ((CFArrayAppendValue_FxnInst != null)
	? (CFArrayAppendValue_FxnInst)
	: (CFArrayAppendValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFArrayAppendValue", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFArrayAppendValue(final com.apple.jobjc.corefoundation.CFMutableArrayRefCFType theArray, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFArrayAppendValue_FxnInst = get_CFArrayAppendValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFArrayAppendValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theArray);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFArrayAppendValue_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFArrayApplyFunction_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFArrayApplyFunction_FxnInst(){
		return ((CFArrayApplyFunction_FxnInst != null)
	? (CFArrayApplyFunction_FxnInst)
	: (CFArrayApplyFunction_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFArrayApplyFunction", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFArrayApplyFunction(final com.apple.jobjc.corefoundation.CFArrayRefCFType theArray, final com.apple.jobjc.corefoundation.CFRange range, final Object /* CFArrayApplierFunction (^?, ^?) */ applier, final com.apple.jobjc.Pointer<Void> context){
			final com.apple.jobjc.Invoke.FunCall CFArrayApplyFunction_FxnInst = get_CFArrayApplyFunction_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFArrayApplyFunction_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theArray);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, applier);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFArrayApplyFunction_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFArrayBSearchValues_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFArrayBSearchValues_FxnInst(){
		return ((CFArrayBSearchValues_FxnInst != null)
	? (CFArrayBSearchValues_FxnInst)
	: (CFArrayBSearchValues_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFArrayBSearchValues", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFArrayBSearchValues(final com.apple.jobjc.corefoundation.CFArrayRefCFType theArray, final com.apple.jobjc.corefoundation.CFRange range, final com.apple.jobjc.Pointer<Void> value, final Object /* CFComparatorFunction (^?, ^?) */ comparator, final com.apple.jobjc.Pointer<Void> context){
			final com.apple.jobjc.Invoke.FunCall CFArrayBSearchValues_FxnInst = get_CFArrayBSearchValues_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFArrayBSearchValues_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theArray);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, comparator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFArrayBSearchValues_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFArrayContainsValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFArrayContainsValue_FxnInst(){
		return ((CFArrayContainsValue_FxnInst != null)
	? (CFArrayContainsValue_FxnInst)
	: (CFArrayContainsValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFArrayContainsValue", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFArrayContainsValue(final com.apple.jobjc.corefoundation.CFArrayRefCFType theArray, final com.apple.jobjc.corefoundation.CFRange range, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFArrayContainsValue_FxnInst = get_CFArrayContainsValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFArrayContainsValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theArray);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFArrayContainsValue_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFArrayCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFArrayCreate_FxnInst(){
		return ((CFArrayCreate_FxnInst != null)
	? (CFArrayCreate_FxnInst)
	: (CFArrayCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFArrayCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFArrayRefCFType CFArrayCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.Pointer<com.apple.jobjc.Pointer<Void>> values, final long numValues, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFArrayCallBacks> callBacks){
			final com.apple.jobjc.Invoke.FunCall CFArrayCreate_FxnInst = get_CFArrayCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFArrayCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, values);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, numValues);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, callBacks);
		CFArrayCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFArrayRefCFType) new com.apple.jobjc.corefoundation.CFArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFArrayCreateCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFArrayCreateCopy_FxnInst(){
		return ((CFArrayCreateCopy_FxnInst != null)
	? (CFArrayCreateCopy_FxnInst)
	: (CFArrayCreateCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFArrayCreateCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFArrayRefCFType CFArrayCreateCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFArrayRefCFType theArray){
			final com.apple.jobjc.Invoke.FunCall CFArrayCreateCopy_FxnInst = get_CFArrayCreateCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFArrayCreateCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theArray);
		CFArrayCreateCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFArrayRefCFType) new com.apple.jobjc.corefoundation.CFArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFArrayCreateMutable_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFArrayCreateMutable_FxnInst(){
		return ((CFArrayCreateMutable_FxnInst != null)
	? (CFArrayCreateMutable_FxnInst)
	: (CFArrayCreateMutable_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFArrayCreateMutable", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFMutableArrayRefCFType CFArrayCreateMutable(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final long capacity, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFArrayCallBacks> callBacks){
			final com.apple.jobjc.Invoke.FunCall CFArrayCreateMutable_FxnInst = get_CFArrayCreateMutable_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFArrayCreateMutable_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, capacity);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, callBacks);
		CFArrayCreateMutable_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFMutableArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFMutableArrayRefCFType) new com.apple.jobjc.corefoundation.CFMutableArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFArrayCreateMutableCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFArrayCreateMutableCopy_FxnInst(){
		return ((CFArrayCreateMutableCopy_FxnInst != null)
	? (CFArrayCreateMutableCopy_FxnInst)
	: (CFArrayCreateMutableCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFArrayCreateMutableCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFMutableArrayRefCFType CFArrayCreateMutableCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final long capacity, final com.apple.jobjc.corefoundation.CFArrayRefCFType theArray){
			final com.apple.jobjc.Invoke.FunCall CFArrayCreateMutableCopy_FxnInst = get_CFArrayCreateMutableCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFArrayCreateMutableCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, capacity);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theArray);
		CFArrayCreateMutableCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFMutableArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFMutableArrayRefCFType) new com.apple.jobjc.corefoundation.CFMutableArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFArrayExchangeValuesAtIndices_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFArrayExchangeValuesAtIndices_FxnInst(){
		return ((CFArrayExchangeValuesAtIndices_FxnInst != null)
	? (CFArrayExchangeValuesAtIndices_FxnInst)
	: (CFArrayExchangeValuesAtIndices_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFArrayExchangeValuesAtIndices", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public void CFArrayExchangeValuesAtIndices(final com.apple.jobjc.corefoundation.CFMutableArrayRefCFType theArray, final long idx1, final long idx2){
			final com.apple.jobjc.Invoke.FunCall CFArrayExchangeValuesAtIndices_FxnInst = get_CFArrayExchangeValuesAtIndices_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFArrayExchangeValuesAtIndices_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theArray);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, idx1);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, idx2);
		CFArrayExchangeValuesAtIndices_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFArrayGetCount_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFArrayGetCount_FxnInst(){
		return ((CFArrayGetCount_FxnInst != null)
	? (CFArrayGetCount_FxnInst)
	: (CFArrayGetCount_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFArrayGetCount", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFArrayGetCount(final com.apple.jobjc.corefoundation.CFArrayRefCFType theArray){
			final com.apple.jobjc.Invoke.FunCall CFArrayGetCount_FxnInst = get_CFArrayGetCount_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFArrayGetCount_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theArray);
		CFArrayGetCount_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFArrayGetCountOfValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFArrayGetCountOfValue_FxnInst(){
		return ((CFArrayGetCountOfValue_FxnInst != null)
	? (CFArrayGetCountOfValue_FxnInst)
	: (CFArrayGetCountOfValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFArrayGetCountOfValue", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFArrayGetCountOfValue(final com.apple.jobjc.corefoundation.CFArrayRefCFType theArray, final com.apple.jobjc.corefoundation.CFRange range, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFArrayGetCountOfValue_FxnInst = get_CFArrayGetCountOfValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFArrayGetCountOfValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theArray);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFArrayGetCountOfValue_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFArrayGetFirstIndexOfValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFArrayGetFirstIndexOfValue_FxnInst(){
		return ((CFArrayGetFirstIndexOfValue_FxnInst != null)
	? (CFArrayGetFirstIndexOfValue_FxnInst)
	: (CFArrayGetFirstIndexOfValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFArrayGetFirstIndexOfValue", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFArrayGetFirstIndexOfValue(final com.apple.jobjc.corefoundation.CFArrayRefCFType theArray, final com.apple.jobjc.corefoundation.CFRange range, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFArrayGetFirstIndexOfValue_FxnInst = get_CFArrayGetFirstIndexOfValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFArrayGetFirstIndexOfValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theArray);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFArrayGetFirstIndexOfValue_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFArrayGetLastIndexOfValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFArrayGetLastIndexOfValue_FxnInst(){
		return ((CFArrayGetLastIndexOfValue_FxnInst != null)
	? (CFArrayGetLastIndexOfValue_FxnInst)
	: (CFArrayGetLastIndexOfValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFArrayGetLastIndexOfValue", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFArrayGetLastIndexOfValue(final com.apple.jobjc.corefoundation.CFArrayRefCFType theArray, final com.apple.jobjc.corefoundation.CFRange range, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFArrayGetLastIndexOfValue_FxnInst = get_CFArrayGetLastIndexOfValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFArrayGetLastIndexOfValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theArray);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFArrayGetLastIndexOfValue_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFArrayGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFArrayGetTypeID_FxnInst(){
		return ((CFArrayGetTypeID_FxnInst != null)
	? (CFArrayGetTypeID_FxnInst)
	: (CFArrayGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFArrayGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFArrayGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFArrayGetTypeID_FxnInst = get_CFArrayGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFArrayGetTypeID_FxnInst.init(nativeBuffer);
		CFArrayGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFArrayGetValueAtIndex_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFArrayGetValueAtIndex_FxnInst(){
		return ((CFArrayGetValueAtIndex_FxnInst != null)
	? (CFArrayGetValueAtIndex_FxnInst)
	: (CFArrayGetValueAtIndex_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFArrayGetValueAtIndex", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public com.apple.jobjc.Pointer<Void> CFArrayGetValueAtIndex(final com.apple.jobjc.corefoundation.CFArrayRefCFType theArray, final long idx){
			final com.apple.jobjc.Invoke.FunCall CFArrayGetValueAtIndex_FxnInst = get_CFArrayGetValueAtIndex_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFArrayGetValueAtIndex_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theArray);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, idx);
		CFArrayGetValueAtIndex_FxnInst.invoke(nativeBuffer);
		final com.apple.jobjc.Pointer<Void> returnValue = (com.apple.jobjc.Pointer<Void>) (com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFArrayGetValues_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFArrayGetValues_FxnInst(){
		return ((CFArrayGetValues_FxnInst != null)
	? (CFArrayGetValues_FxnInst)
	: (CFArrayGetValues_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFArrayGetValues", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFArrayGetValues(final com.apple.jobjc.corefoundation.CFArrayRefCFType theArray, final com.apple.jobjc.corefoundation.CFRange range, final com.apple.jobjc.Pointer<com.apple.jobjc.Pointer<Void>> values){
			final com.apple.jobjc.Invoke.FunCall CFArrayGetValues_FxnInst = get_CFArrayGetValues_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFArrayGetValues_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theArray);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, values);
		CFArrayGetValues_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFArrayInsertValueAtIndex_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFArrayInsertValueAtIndex_FxnInst(){
		return ((CFArrayInsertValueAtIndex_FxnInst != null)
	? (CFArrayInsertValueAtIndex_FxnInst)
	: (CFArrayInsertValueAtIndex_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFArrayInsertValueAtIndex", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFArrayInsertValueAtIndex(final com.apple.jobjc.corefoundation.CFMutableArrayRefCFType theArray, final long idx, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFArrayInsertValueAtIndex_FxnInst = get_CFArrayInsertValueAtIndex_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFArrayInsertValueAtIndex_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theArray);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, idx);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFArrayInsertValueAtIndex_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFArrayRemoveAllValues_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFArrayRemoveAllValues_FxnInst(){
		return ((CFArrayRemoveAllValues_FxnInst != null)
	? (CFArrayRemoveAllValues_FxnInst)
	: (CFArrayRemoveAllValues_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFArrayRemoveAllValues", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFArrayRemoveAllValues(final com.apple.jobjc.corefoundation.CFMutableArrayRefCFType theArray){
			final com.apple.jobjc.Invoke.FunCall CFArrayRemoveAllValues_FxnInst = get_CFArrayRemoveAllValues_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFArrayRemoveAllValues_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theArray);
		CFArrayRemoveAllValues_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFArrayRemoveValueAtIndex_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFArrayRemoveValueAtIndex_FxnInst(){
		return ((CFArrayRemoveValueAtIndex_FxnInst != null)
	? (CFArrayRemoveValueAtIndex_FxnInst)
	: (CFArrayRemoveValueAtIndex_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFArrayRemoveValueAtIndex", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public void CFArrayRemoveValueAtIndex(final com.apple.jobjc.corefoundation.CFMutableArrayRefCFType theArray, final long idx){
			final com.apple.jobjc.Invoke.FunCall CFArrayRemoveValueAtIndex_FxnInst = get_CFArrayRemoveValueAtIndex_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFArrayRemoveValueAtIndex_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theArray);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, idx);
		CFArrayRemoveValueAtIndex_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFArrayReplaceValues_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFArrayReplaceValues_FxnInst(){
		return ((CFArrayReplaceValues_FxnInst != null)
	? (CFArrayReplaceValues_FxnInst)
	: (CFArrayReplaceValues_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFArrayReplaceValues", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public void CFArrayReplaceValues(final com.apple.jobjc.corefoundation.CFMutableArrayRefCFType theArray, final com.apple.jobjc.corefoundation.CFRange range, final com.apple.jobjc.Pointer<com.apple.jobjc.Pointer<Void>> newValues, final long newCount){
			final com.apple.jobjc.Invoke.FunCall CFArrayReplaceValues_FxnInst = get_CFArrayReplaceValues_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFArrayReplaceValues_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theArray);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, newValues);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, newCount);
		CFArrayReplaceValues_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFArraySetValueAtIndex_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFArraySetValueAtIndex_FxnInst(){
		return ((CFArraySetValueAtIndex_FxnInst != null)
	? (CFArraySetValueAtIndex_FxnInst)
	: (CFArraySetValueAtIndex_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFArraySetValueAtIndex", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFArraySetValueAtIndex(final com.apple.jobjc.corefoundation.CFMutableArrayRefCFType theArray, final long idx, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFArraySetValueAtIndex_FxnInst = get_CFArraySetValueAtIndex_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFArraySetValueAtIndex_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theArray);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, idx);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFArraySetValueAtIndex_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFArraySortValues_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFArraySortValues_FxnInst(){
		return ((CFArraySortValues_FxnInst != null)
	? (CFArraySortValues_FxnInst)
	: (CFArraySortValues_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFArraySortValues", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFArraySortValues(final com.apple.jobjc.corefoundation.CFMutableArrayRefCFType theArray, final com.apple.jobjc.corefoundation.CFRange range, final Object /* CFComparatorFunction (^?, ^?) */ comparator, final com.apple.jobjc.Pointer<Void> context){
			final com.apple.jobjc.Invoke.FunCall CFArraySortValues_FxnInst = get_CFArraySortValues_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFArraySortValues_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theArray);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, comparator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFArraySortValues_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFAttributedStringBeginEditing_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAttributedStringBeginEditing_FxnInst(){
		return ((CFAttributedStringBeginEditing_FxnInst != null)
	? (CFAttributedStringBeginEditing_FxnInst)
	: (CFAttributedStringBeginEditing_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAttributedStringBeginEditing", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFAttributedStringBeginEditing(final com.apple.jobjc.corefoundation.CFMutableAttributedStringRefCFType aStr){
			final com.apple.jobjc.Invoke.FunCall CFAttributedStringBeginEditing_FxnInst = get_CFAttributedStringBeginEditing_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAttributedStringBeginEditing_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, aStr);
		CFAttributedStringBeginEditing_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFAttributedStringCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAttributedStringCreate_FxnInst(){
		return ((CFAttributedStringCreate_FxnInst != null)
	? (CFAttributedStringCreate_FxnInst)
	: (CFAttributedStringCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAttributedStringCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFAttributedStringRefCFType CFAttributedStringCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFStringRefCFType str, final com.apple.jobjc.corefoundation.CFDictionaryRefCFType attributes){
			final com.apple.jobjc.Invoke.FunCall CFAttributedStringCreate_FxnInst = get_CFAttributedStringCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAttributedStringCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, str);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, attributes);
		CFAttributedStringCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFAttributedStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFAttributedStringRefCFType) new com.apple.jobjc.corefoundation.CFAttributedStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFAttributedStringCreateCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAttributedStringCreateCopy_FxnInst(){
		return ((CFAttributedStringCreateCopy_FxnInst != null)
	? (CFAttributedStringCreateCopy_FxnInst)
	: (CFAttributedStringCreateCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAttributedStringCreateCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFAttributedStringRefCFType CFAttributedStringCreateCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFAttributedStringRefCFType aStr){
			final com.apple.jobjc.Invoke.FunCall CFAttributedStringCreateCopy_FxnInst = get_CFAttributedStringCreateCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAttributedStringCreateCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, aStr);
		CFAttributedStringCreateCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFAttributedStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFAttributedStringRefCFType) new com.apple.jobjc.corefoundation.CFAttributedStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFAttributedStringCreateMutable_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAttributedStringCreateMutable_FxnInst(){
		return ((CFAttributedStringCreateMutable_FxnInst != null)
	? (CFAttributedStringCreateMutable_FxnInst)
	: (CFAttributedStringCreateMutable_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAttributedStringCreateMutable", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFMutableAttributedStringRefCFType CFAttributedStringCreateMutable(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final long maxLength){
			final com.apple.jobjc.Invoke.FunCall CFAttributedStringCreateMutable_FxnInst = get_CFAttributedStringCreateMutable_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAttributedStringCreateMutable_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, maxLength);
		CFAttributedStringCreateMutable_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFMutableAttributedStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFMutableAttributedStringRefCFType) new com.apple.jobjc.corefoundation.CFMutableAttributedStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFAttributedStringCreateMutableCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAttributedStringCreateMutableCopy_FxnInst(){
		return ((CFAttributedStringCreateMutableCopy_FxnInst != null)
	? (CFAttributedStringCreateMutableCopy_FxnInst)
	: (CFAttributedStringCreateMutableCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAttributedStringCreateMutableCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFMutableAttributedStringRefCFType CFAttributedStringCreateMutableCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final long maxLength, final com.apple.jobjc.corefoundation.CFAttributedStringRefCFType aStr){
			final com.apple.jobjc.Invoke.FunCall CFAttributedStringCreateMutableCopy_FxnInst = get_CFAttributedStringCreateMutableCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAttributedStringCreateMutableCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, maxLength);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, aStr);
		CFAttributedStringCreateMutableCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFMutableAttributedStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFMutableAttributedStringRefCFType) new com.apple.jobjc.corefoundation.CFMutableAttributedStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFAttributedStringCreateWithSubstring_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAttributedStringCreateWithSubstring_FxnInst(){
		return ((CFAttributedStringCreateWithSubstring_FxnInst != null)
	? (CFAttributedStringCreateWithSubstring_FxnInst)
	: (CFAttributedStringCreateWithSubstring_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAttributedStringCreateWithSubstring", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder())));
	}

	 public com.apple.jobjc.corefoundation.CFAttributedStringRefCFType CFAttributedStringCreateWithSubstring(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFAttributedStringRefCFType aStr, final com.apple.jobjc.corefoundation.CFRange range){
			final com.apple.jobjc.Invoke.FunCall CFAttributedStringCreateWithSubstring_FxnInst = get_CFAttributedStringCreateWithSubstring_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAttributedStringCreateWithSubstring_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, aStr);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		CFAttributedStringCreateWithSubstring_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFAttributedStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFAttributedStringRefCFType) new com.apple.jobjc.corefoundation.CFAttributedStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFAttributedStringEndEditing_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAttributedStringEndEditing_FxnInst(){
		return ((CFAttributedStringEndEditing_FxnInst != null)
	? (CFAttributedStringEndEditing_FxnInst)
	: (CFAttributedStringEndEditing_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAttributedStringEndEditing", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFAttributedStringEndEditing(final com.apple.jobjc.corefoundation.CFMutableAttributedStringRefCFType aStr){
			final com.apple.jobjc.Invoke.FunCall CFAttributedStringEndEditing_FxnInst = get_CFAttributedStringEndEditing_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAttributedStringEndEditing_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, aStr);
		CFAttributedStringEndEditing_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFAttributedStringGetAttribute_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAttributedStringGetAttribute_FxnInst(){
		return ((CFAttributedStringGetAttribute_FxnInst != null)
	? (CFAttributedStringGetAttribute_FxnInst)
	: (CFAttributedStringGetAttribute_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAttributedStringGetAttribute", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFTypeRefCFType CFAttributedStringGetAttribute(final com.apple.jobjc.corefoundation.CFAttributedStringRefCFType aStr, final long loc, final com.apple.jobjc.corefoundation.CFStringRefCFType attrName, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFRange> effectiveRange){
			final com.apple.jobjc.Invoke.FunCall CFAttributedStringGetAttribute_FxnInst = get_CFAttributedStringGetAttribute_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAttributedStringGetAttribute_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, aStr);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, loc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, attrName);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, effectiveRange);
		CFAttributedStringGetAttribute_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFTypeRefCFType returnValue = (com.apple.jobjc.corefoundation.CFTypeRefCFType) new com.apple.jobjc.corefoundation.CFTypeRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFAttributedStringGetAttributeAndLongestEffectiveRange_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAttributedStringGetAttributeAndLongestEffectiveRange_FxnInst(){
		return ((CFAttributedStringGetAttributeAndLongestEffectiveRange_FxnInst != null)
	? (CFAttributedStringGetAttributeAndLongestEffectiveRange_FxnInst)
	: (CFAttributedStringGetAttributeAndLongestEffectiveRange_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAttributedStringGetAttributeAndLongestEffectiveRange", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFTypeRefCFType CFAttributedStringGetAttributeAndLongestEffectiveRange(final com.apple.jobjc.corefoundation.CFAttributedStringRefCFType aStr, final long loc, final com.apple.jobjc.corefoundation.CFStringRefCFType attrName, final com.apple.jobjc.corefoundation.CFRange inRange, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFRange> longestEffectiveRange){
			final com.apple.jobjc.Invoke.FunCall CFAttributedStringGetAttributeAndLongestEffectiveRange_FxnInst = get_CFAttributedStringGetAttributeAndLongestEffectiveRange_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAttributedStringGetAttributeAndLongestEffectiveRange_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, aStr);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, loc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, attrName);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, inRange);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, longestEffectiveRange);
		CFAttributedStringGetAttributeAndLongestEffectiveRange_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFTypeRefCFType returnValue = (com.apple.jobjc.corefoundation.CFTypeRefCFType) new com.apple.jobjc.corefoundation.CFTypeRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFAttributedStringGetAttributes_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAttributedStringGetAttributes_FxnInst(){
		return ((CFAttributedStringGetAttributes_FxnInst != null)
	? (CFAttributedStringGetAttributes_FxnInst)
	: (CFAttributedStringGetAttributes_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAttributedStringGetAttributes", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDictionaryRefCFType CFAttributedStringGetAttributes(final com.apple.jobjc.corefoundation.CFAttributedStringRefCFType aStr, final long loc, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFRange> effectiveRange){
			final com.apple.jobjc.Invoke.FunCall CFAttributedStringGetAttributes_FxnInst = get_CFAttributedStringGetAttributes_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAttributedStringGetAttributes_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, aStr);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, loc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, effectiveRange);
		CFAttributedStringGetAttributes_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDictionaryRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDictionaryRefCFType) new com.apple.jobjc.corefoundation.CFDictionaryRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFAttributedStringGetAttributesAndLongestEffectiveRange_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAttributedStringGetAttributesAndLongestEffectiveRange_FxnInst(){
		return ((CFAttributedStringGetAttributesAndLongestEffectiveRange_FxnInst != null)
	? (CFAttributedStringGetAttributesAndLongestEffectiveRange_FxnInst)
	: (CFAttributedStringGetAttributesAndLongestEffectiveRange_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAttributedStringGetAttributesAndLongestEffectiveRange", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDictionaryRefCFType CFAttributedStringGetAttributesAndLongestEffectiveRange(final com.apple.jobjc.corefoundation.CFAttributedStringRefCFType aStr, final long loc, final com.apple.jobjc.corefoundation.CFRange inRange, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFRange> longestEffectiveRange){
			final com.apple.jobjc.Invoke.FunCall CFAttributedStringGetAttributesAndLongestEffectiveRange_FxnInst = get_CFAttributedStringGetAttributesAndLongestEffectiveRange_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAttributedStringGetAttributesAndLongestEffectiveRange_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, aStr);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, loc);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, inRange);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, longestEffectiveRange);
		CFAttributedStringGetAttributesAndLongestEffectiveRange_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDictionaryRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDictionaryRefCFType) new com.apple.jobjc.corefoundation.CFDictionaryRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFAttributedStringGetLength_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAttributedStringGetLength_FxnInst(){
		return ((CFAttributedStringGetLength_FxnInst != null)
	? (CFAttributedStringGetLength_FxnInst)
	: (CFAttributedStringGetLength_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAttributedStringGetLength", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFAttributedStringGetLength(final com.apple.jobjc.corefoundation.CFAttributedStringRefCFType aStr){
			final com.apple.jobjc.Invoke.FunCall CFAttributedStringGetLength_FxnInst = get_CFAttributedStringGetLength_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAttributedStringGetLength_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, aStr);
		CFAttributedStringGetLength_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFAttributedStringGetMutableString_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAttributedStringGetMutableString_FxnInst(){
		return ((CFAttributedStringGetMutableString_FxnInst != null)
	? (CFAttributedStringGetMutableString_FxnInst)
	: (CFAttributedStringGetMutableString_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAttributedStringGetMutableString", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFMutableStringRefCFType CFAttributedStringGetMutableString(final com.apple.jobjc.corefoundation.CFMutableAttributedStringRefCFType aStr){
			final com.apple.jobjc.Invoke.FunCall CFAttributedStringGetMutableString_FxnInst = get_CFAttributedStringGetMutableString_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAttributedStringGetMutableString_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, aStr);
		CFAttributedStringGetMutableString_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFMutableStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFMutableStringRefCFType) new com.apple.jobjc.corefoundation.CFMutableStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFAttributedStringGetString_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAttributedStringGetString_FxnInst(){
		return ((CFAttributedStringGetString_FxnInst != null)
	? (CFAttributedStringGetString_FxnInst)
	: (CFAttributedStringGetString_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAttributedStringGetString", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFAttributedStringGetString(final com.apple.jobjc.corefoundation.CFAttributedStringRefCFType aStr){
			final com.apple.jobjc.Invoke.FunCall CFAttributedStringGetString_FxnInst = get_CFAttributedStringGetString_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAttributedStringGetString_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, aStr);
		CFAttributedStringGetString_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFAttributedStringGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAttributedStringGetTypeID_FxnInst(){
		return ((CFAttributedStringGetTypeID_FxnInst != null)
	? (CFAttributedStringGetTypeID_FxnInst)
	: (CFAttributedStringGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAttributedStringGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFAttributedStringGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFAttributedStringGetTypeID_FxnInst = get_CFAttributedStringGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAttributedStringGetTypeID_FxnInst.init(nativeBuffer);
		CFAttributedStringGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFAttributedStringRemoveAttribute_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAttributedStringRemoveAttribute_FxnInst(){
		return ((CFAttributedStringRemoveAttribute_FxnInst != null)
	? (CFAttributedStringRemoveAttribute_FxnInst)
	: (CFAttributedStringRemoveAttribute_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAttributedStringRemoveAttribute", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFAttributedStringRemoveAttribute(final com.apple.jobjc.corefoundation.CFMutableAttributedStringRefCFType aStr, final com.apple.jobjc.corefoundation.CFRange range, final com.apple.jobjc.corefoundation.CFStringRefCFType attrName){
			final com.apple.jobjc.Invoke.FunCall CFAttributedStringRemoveAttribute_FxnInst = get_CFAttributedStringRemoveAttribute_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAttributedStringRemoveAttribute_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, aStr);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, attrName);
		CFAttributedStringRemoveAttribute_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFAttributedStringReplaceAttributedString_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAttributedStringReplaceAttributedString_FxnInst(){
		return ((CFAttributedStringReplaceAttributedString_FxnInst != null)
	? (CFAttributedStringReplaceAttributedString_FxnInst)
	: (CFAttributedStringReplaceAttributedString_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAttributedStringReplaceAttributedString", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFAttributedStringReplaceAttributedString(final com.apple.jobjc.corefoundation.CFMutableAttributedStringRefCFType aStr, final com.apple.jobjc.corefoundation.CFRange range, final com.apple.jobjc.corefoundation.CFAttributedStringRefCFType replacement){
			final com.apple.jobjc.Invoke.FunCall CFAttributedStringReplaceAttributedString_FxnInst = get_CFAttributedStringReplaceAttributedString_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAttributedStringReplaceAttributedString_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, aStr);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, replacement);
		CFAttributedStringReplaceAttributedString_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFAttributedStringReplaceString_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAttributedStringReplaceString_FxnInst(){
		return ((CFAttributedStringReplaceString_FxnInst != null)
	? (CFAttributedStringReplaceString_FxnInst)
	: (CFAttributedStringReplaceString_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAttributedStringReplaceString", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFAttributedStringReplaceString(final com.apple.jobjc.corefoundation.CFMutableAttributedStringRefCFType aStr, final com.apple.jobjc.corefoundation.CFRange range, final com.apple.jobjc.corefoundation.CFStringRefCFType replacement){
			final com.apple.jobjc.Invoke.FunCall CFAttributedStringReplaceString_FxnInst = get_CFAttributedStringReplaceString_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAttributedStringReplaceString_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, aStr);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, replacement);
		CFAttributedStringReplaceString_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFAttributedStringSetAttribute_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAttributedStringSetAttribute_FxnInst(){
		return ((CFAttributedStringSetAttribute_FxnInst != null)
	? (CFAttributedStringSetAttribute_FxnInst)
	: (CFAttributedStringSetAttribute_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAttributedStringSetAttribute", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFAttributedStringSetAttribute(final com.apple.jobjc.corefoundation.CFMutableAttributedStringRefCFType aStr, final com.apple.jobjc.corefoundation.CFRange range, final com.apple.jobjc.corefoundation.CFStringRefCFType attrName, final com.apple.jobjc.corefoundation.CFTypeRefCFType value){
			final com.apple.jobjc.Invoke.FunCall CFAttributedStringSetAttribute_FxnInst = get_CFAttributedStringSetAttribute_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAttributedStringSetAttribute_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, aStr);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, attrName);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFAttributedStringSetAttribute_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFAttributedStringSetAttributes_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFAttributedStringSetAttributes_FxnInst(){
		return ((CFAttributedStringSetAttributes_FxnInst != null)
	? (CFAttributedStringSetAttributes_FxnInst)
	: (CFAttributedStringSetAttributes_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFAttributedStringSetAttributes", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.BoolCoder.INST)));
	}

	 public void CFAttributedStringSetAttributes(final com.apple.jobjc.corefoundation.CFMutableAttributedStringRefCFType aStr, final com.apple.jobjc.corefoundation.CFRange range, final com.apple.jobjc.corefoundation.CFDictionaryRefCFType replacement, final boolean clearOtherAttributes){
			final com.apple.jobjc.Invoke.FunCall CFAttributedStringSetAttributes_FxnInst = get_CFAttributedStringSetAttributes_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFAttributedStringSetAttributes_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, aStr);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, replacement);
		com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.push(nativeBuffer, clearOtherAttributes);
		CFAttributedStringSetAttributes_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFBagAddValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBagAddValue_FxnInst(){
		return ((CFBagAddValue_FxnInst != null)
	? (CFBagAddValue_FxnInst)
	: (CFBagAddValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBagAddValue", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFBagAddValue(final com.apple.jobjc.corefoundation.CFMutableBagRefCFType theBag, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFBagAddValue_FxnInst = get_CFBagAddValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBagAddValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theBag);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFBagAddValue_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFBagApplyFunction_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBagApplyFunction_FxnInst(){
		return ((CFBagApplyFunction_FxnInst != null)
	? (CFBagApplyFunction_FxnInst)
	: (CFBagApplyFunction_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBagApplyFunction", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFBagApplyFunction(final com.apple.jobjc.corefoundation.CFBagRefCFType theBag, final Object /* CFBagApplierFunction (^?, ^?) */ applier, final com.apple.jobjc.Pointer<Void> context){
			final com.apple.jobjc.Invoke.FunCall CFBagApplyFunction_FxnInst = get_CFBagApplyFunction_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBagApplyFunction_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theBag);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, applier);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFBagApplyFunction_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFBagContainsValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBagContainsValue_FxnInst(){
		return ((CFBagContainsValue_FxnInst != null)
	? (CFBagContainsValue_FxnInst)
	: (CFBagContainsValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBagContainsValue", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFBagContainsValue(final com.apple.jobjc.corefoundation.CFBagRefCFType theBag, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFBagContainsValue_FxnInst = get_CFBagContainsValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBagContainsValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theBag);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFBagContainsValue_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBagCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBagCreate_FxnInst(){
		return ((CFBagCreate_FxnInst != null)
	? (CFBagCreate_FxnInst)
	: (CFBagCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBagCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFBagRefCFType CFBagCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.Pointer<com.apple.jobjc.Pointer<Void>> values, final long numValues, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFBagCallBacks> callBacks){
			final com.apple.jobjc.Invoke.FunCall CFBagCreate_FxnInst = get_CFBagCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBagCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, values);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, numValues);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, callBacks);
		CFBagCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFBagRefCFType returnValue = (com.apple.jobjc.corefoundation.CFBagRefCFType) new com.apple.jobjc.corefoundation.CFBagRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBagCreateCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBagCreateCopy_FxnInst(){
		return ((CFBagCreateCopy_FxnInst != null)
	? (CFBagCreateCopy_FxnInst)
	: (CFBagCreateCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBagCreateCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFBagRefCFType CFBagCreateCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFBagRefCFType theBag){
			final com.apple.jobjc.Invoke.FunCall CFBagCreateCopy_FxnInst = get_CFBagCreateCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBagCreateCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theBag);
		CFBagCreateCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFBagRefCFType returnValue = (com.apple.jobjc.corefoundation.CFBagRefCFType) new com.apple.jobjc.corefoundation.CFBagRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBagCreateMutable_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBagCreateMutable_FxnInst(){
		return ((CFBagCreateMutable_FxnInst != null)
	? (CFBagCreateMutable_FxnInst)
	: (CFBagCreateMutable_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBagCreateMutable", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFMutableBagRefCFType CFBagCreateMutable(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final long capacity, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFBagCallBacks> callBacks){
			final com.apple.jobjc.Invoke.FunCall CFBagCreateMutable_FxnInst = get_CFBagCreateMutable_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBagCreateMutable_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, capacity);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, callBacks);
		CFBagCreateMutable_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFMutableBagRefCFType returnValue = (com.apple.jobjc.corefoundation.CFMutableBagRefCFType) new com.apple.jobjc.corefoundation.CFMutableBagRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBagCreateMutableCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBagCreateMutableCopy_FxnInst(){
		return ((CFBagCreateMutableCopy_FxnInst != null)
	? (CFBagCreateMutableCopy_FxnInst)
	: (CFBagCreateMutableCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBagCreateMutableCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFMutableBagRefCFType CFBagCreateMutableCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final long capacity, final com.apple.jobjc.corefoundation.CFBagRefCFType theBag){
			final com.apple.jobjc.Invoke.FunCall CFBagCreateMutableCopy_FxnInst = get_CFBagCreateMutableCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBagCreateMutableCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, capacity);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theBag);
		CFBagCreateMutableCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFMutableBagRefCFType returnValue = (com.apple.jobjc.corefoundation.CFMutableBagRefCFType) new com.apple.jobjc.corefoundation.CFMutableBagRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBagGetCount_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBagGetCount_FxnInst(){
		return ((CFBagGetCount_FxnInst != null)
	? (CFBagGetCount_FxnInst)
	: (CFBagGetCount_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBagGetCount", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFBagGetCount(final com.apple.jobjc.corefoundation.CFBagRefCFType theBag){
			final com.apple.jobjc.Invoke.FunCall CFBagGetCount_FxnInst = get_CFBagGetCount_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBagGetCount_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theBag);
		CFBagGetCount_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBagGetCountOfValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBagGetCountOfValue_FxnInst(){
		return ((CFBagGetCountOfValue_FxnInst != null)
	? (CFBagGetCountOfValue_FxnInst)
	: (CFBagGetCountOfValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBagGetCountOfValue", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFBagGetCountOfValue(final com.apple.jobjc.corefoundation.CFBagRefCFType theBag, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFBagGetCountOfValue_FxnInst = get_CFBagGetCountOfValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBagGetCountOfValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theBag);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFBagGetCountOfValue_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBagGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBagGetTypeID_FxnInst(){
		return ((CFBagGetTypeID_FxnInst != null)
	? (CFBagGetTypeID_FxnInst)
	: (CFBagGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBagGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFBagGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFBagGetTypeID_FxnInst = get_CFBagGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBagGetTypeID_FxnInst.init(nativeBuffer);
		CFBagGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBagGetValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBagGetValue_FxnInst(){
		return ((CFBagGetValue_FxnInst != null)
	? (CFBagGetValue_FxnInst)
	: (CFBagGetValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBagGetValue", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.Pointer<Void> CFBagGetValue(final com.apple.jobjc.corefoundation.CFBagRefCFType theBag, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFBagGetValue_FxnInst = get_CFBagGetValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBagGetValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theBag);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFBagGetValue_FxnInst.invoke(nativeBuffer);
		final com.apple.jobjc.Pointer<Void> returnValue = (com.apple.jobjc.Pointer<Void>) (com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBagGetValueIfPresent_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBagGetValueIfPresent_FxnInst(){
		return ((CFBagGetValueIfPresent_FxnInst != null)
	? (CFBagGetValueIfPresent_FxnInst)
	: (CFBagGetValueIfPresent_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBagGetValueIfPresent", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFBagGetValueIfPresent(final com.apple.jobjc.corefoundation.CFBagRefCFType theBag, final com.apple.jobjc.Pointer<Void> candidate, final com.apple.jobjc.Pointer<com.apple.jobjc.Pointer<Void>> value){
			final com.apple.jobjc.Invoke.FunCall CFBagGetValueIfPresent_FxnInst = get_CFBagGetValueIfPresent_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBagGetValueIfPresent_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theBag);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, candidate);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFBagGetValueIfPresent_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBagGetValues_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBagGetValues_FxnInst(){
		return ((CFBagGetValues_FxnInst != null)
	? (CFBagGetValues_FxnInst)
	: (CFBagGetValues_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBagGetValues", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFBagGetValues(final com.apple.jobjc.corefoundation.CFBagRefCFType theBag, final com.apple.jobjc.Pointer<com.apple.jobjc.Pointer<Void>> values){
			final com.apple.jobjc.Invoke.FunCall CFBagGetValues_FxnInst = get_CFBagGetValues_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBagGetValues_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theBag);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, values);
		CFBagGetValues_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFBagRemoveAllValues_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBagRemoveAllValues_FxnInst(){
		return ((CFBagRemoveAllValues_FxnInst != null)
	? (CFBagRemoveAllValues_FxnInst)
	: (CFBagRemoveAllValues_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBagRemoveAllValues", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFBagRemoveAllValues(final com.apple.jobjc.corefoundation.CFMutableBagRefCFType theBag){
			final com.apple.jobjc.Invoke.FunCall CFBagRemoveAllValues_FxnInst = get_CFBagRemoveAllValues_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBagRemoveAllValues_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theBag);
		CFBagRemoveAllValues_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFBagRemoveValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBagRemoveValue_FxnInst(){
		return ((CFBagRemoveValue_FxnInst != null)
	? (CFBagRemoveValue_FxnInst)
	: (CFBagRemoveValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBagRemoveValue", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFBagRemoveValue(final com.apple.jobjc.corefoundation.CFMutableBagRefCFType theBag, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFBagRemoveValue_FxnInst = get_CFBagRemoveValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBagRemoveValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theBag);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFBagRemoveValue_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFBagReplaceValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBagReplaceValue_FxnInst(){
		return ((CFBagReplaceValue_FxnInst != null)
	? (CFBagReplaceValue_FxnInst)
	: (CFBagReplaceValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBagReplaceValue", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFBagReplaceValue(final com.apple.jobjc.corefoundation.CFMutableBagRefCFType theBag, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFBagReplaceValue_FxnInst = get_CFBagReplaceValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBagReplaceValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theBag);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFBagReplaceValue_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFBagSetValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBagSetValue_FxnInst(){
		return ((CFBagSetValue_FxnInst != null)
	? (CFBagSetValue_FxnInst)
	: (CFBagSetValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBagSetValue", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFBagSetValue(final com.apple.jobjc.corefoundation.CFMutableBagRefCFType theBag, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFBagSetValue_FxnInst = get_CFBagSetValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBagSetValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theBag);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFBagSetValue_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFBinaryHeapAddValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBinaryHeapAddValue_FxnInst(){
		return ((CFBinaryHeapAddValue_FxnInst != null)
	? (CFBinaryHeapAddValue_FxnInst)
	: (CFBinaryHeapAddValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBinaryHeapAddValue", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFBinaryHeapAddValue(final com.apple.jobjc.corefoundation.CFBinaryHeapRefCFType heap, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFBinaryHeapAddValue_FxnInst = get_CFBinaryHeapAddValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBinaryHeapAddValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, heap);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFBinaryHeapAddValue_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFBinaryHeapApplyFunction_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBinaryHeapApplyFunction_FxnInst(){
		return ((CFBinaryHeapApplyFunction_FxnInst != null)
	? (CFBinaryHeapApplyFunction_FxnInst)
	: (CFBinaryHeapApplyFunction_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBinaryHeapApplyFunction", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFBinaryHeapApplyFunction(final com.apple.jobjc.corefoundation.CFBinaryHeapRefCFType heap, final Object /* CFBinaryHeapApplierFunction (^?, ^?) */ applier, final com.apple.jobjc.Pointer<Void> context){
			final com.apple.jobjc.Invoke.FunCall CFBinaryHeapApplyFunction_FxnInst = get_CFBinaryHeapApplyFunction_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBinaryHeapApplyFunction_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, heap);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, applier);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFBinaryHeapApplyFunction_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFBinaryHeapContainsValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBinaryHeapContainsValue_FxnInst(){
		return ((CFBinaryHeapContainsValue_FxnInst != null)
	? (CFBinaryHeapContainsValue_FxnInst)
	: (CFBinaryHeapContainsValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBinaryHeapContainsValue", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFBinaryHeapContainsValue(final com.apple.jobjc.corefoundation.CFBinaryHeapRefCFType heap, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFBinaryHeapContainsValue_FxnInst = get_CFBinaryHeapContainsValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBinaryHeapContainsValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, heap);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFBinaryHeapContainsValue_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBinaryHeapCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBinaryHeapCreate_FxnInst(){
		return ((CFBinaryHeapCreate_FxnInst != null)
	? (CFBinaryHeapCreate_FxnInst)
	: (CFBinaryHeapCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBinaryHeapCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFBinaryHeapRefCFType CFBinaryHeapCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final long capacity, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFBinaryHeapCallBacks> callBacks, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFBinaryHeapCompareContext> compareContext){
			final com.apple.jobjc.Invoke.FunCall CFBinaryHeapCreate_FxnInst = get_CFBinaryHeapCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBinaryHeapCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, capacity);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, callBacks);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, compareContext);
		CFBinaryHeapCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFBinaryHeapRefCFType returnValue = (com.apple.jobjc.corefoundation.CFBinaryHeapRefCFType) new com.apple.jobjc.corefoundation.CFBinaryHeapRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBinaryHeapCreateCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBinaryHeapCreateCopy_FxnInst(){
		return ((CFBinaryHeapCreateCopy_FxnInst != null)
	? (CFBinaryHeapCreateCopy_FxnInst)
	: (CFBinaryHeapCreateCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBinaryHeapCreateCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFBinaryHeapRefCFType CFBinaryHeapCreateCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final long capacity, final com.apple.jobjc.corefoundation.CFBinaryHeapRefCFType heap){
			final com.apple.jobjc.Invoke.FunCall CFBinaryHeapCreateCopy_FxnInst = get_CFBinaryHeapCreateCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBinaryHeapCreateCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, capacity);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, heap);
		CFBinaryHeapCreateCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFBinaryHeapRefCFType returnValue = (com.apple.jobjc.corefoundation.CFBinaryHeapRefCFType) new com.apple.jobjc.corefoundation.CFBinaryHeapRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBinaryHeapGetCount_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBinaryHeapGetCount_FxnInst(){
		return ((CFBinaryHeapGetCount_FxnInst != null)
	? (CFBinaryHeapGetCount_FxnInst)
	: (CFBinaryHeapGetCount_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBinaryHeapGetCount", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFBinaryHeapGetCount(final com.apple.jobjc.corefoundation.CFBinaryHeapRefCFType heap){
			final com.apple.jobjc.Invoke.FunCall CFBinaryHeapGetCount_FxnInst = get_CFBinaryHeapGetCount_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBinaryHeapGetCount_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, heap);
		CFBinaryHeapGetCount_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBinaryHeapGetCountOfValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBinaryHeapGetCountOfValue_FxnInst(){
		return ((CFBinaryHeapGetCountOfValue_FxnInst != null)
	? (CFBinaryHeapGetCountOfValue_FxnInst)
	: (CFBinaryHeapGetCountOfValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBinaryHeapGetCountOfValue", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFBinaryHeapGetCountOfValue(final com.apple.jobjc.corefoundation.CFBinaryHeapRefCFType heap, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFBinaryHeapGetCountOfValue_FxnInst = get_CFBinaryHeapGetCountOfValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBinaryHeapGetCountOfValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, heap);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFBinaryHeapGetCountOfValue_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBinaryHeapGetMinimum_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBinaryHeapGetMinimum_FxnInst(){
		return ((CFBinaryHeapGetMinimum_FxnInst != null)
	? (CFBinaryHeapGetMinimum_FxnInst)
	: (CFBinaryHeapGetMinimum_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBinaryHeapGetMinimum", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.Pointer<Void> CFBinaryHeapGetMinimum(final com.apple.jobjc.corefoundation.CFBinaryHeapRefCFType heap){
			final com.apple.jobjc.Invoke.FunCall CFBinaryHeapGetMinimum_FxnInst = get_CFBinaryHeapGetMinimum_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBinaryHeapGetMinimum_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, heap);
		CFBinaryHeapGetMinimum_FxnInst.invoke(nativeBuffer);
		final com.apple.jobjc.Pointer<Void> returnValue = (com.apple.jobjc.Pointer<Void>) (com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBinaryHeapGetMinimumIfPresent_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBinaryHeapGetMinimumIfPresent_FxnInst(){
		return ((CFBinaryHeapGetMinimumIfPresent_FxnInst != null)
	? (CFBinaryHeapGetMinimumIfPresent_FxnInst)
	: (CFBinaryHeapGetMinimumIfPresent_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBinaryHeapGetMinimumIfPresent", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFBinaryHeapGetMinimumIfPresent(final com.apple.jobjc.corefoundation.CFBinaryHeapRefCFType heap, final com.apple.jobjc.Pointer<com.apple.jobjc.Pointer<Void>> value){
			final com.apple.jobjc.Invoke.FunCall CFBinaryHeapGetMinimumIfPresent_FxnInst = get_CFBinaryHeapGetMinimumIfPresent_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBinaryHeapGetMinimumIfPresent_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, heap);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFBinaryHeapGetMinimumIfPresent_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBinaryHeapGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBinaryHeapGetTypeID_FxnInst(){
		return ((CFBinaryHeapGetTypeID_FxnInst != null)
	? (CFBinaryHeapGetTypeID_FxnInst)
	: (CFBinaryHeapGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBinaryHeapGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFBinaryHeapGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFBinaryHeapGetTypeID_FxnInst = get_CFBinaryHeapGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBinaryHeapGetTypeID_FxnInst.init(nativeBuffer);
		CFBinaryHeapGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBinaryHeapGetValues_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBinaryHeapGetValues_FxnInst(){
		return ((CFBinaryHeapGetValues_FxnInst != null)
	? (CFBinaryHeapGetValues_FxnInst)
	: (CFBinaryHeapGetValues_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBinaryHeapGetValues", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFBinaryHeapGetValues(final com.apple.jobjc.corefoundation.CFBinaryHeapRefCFType heap, final com.apple.jobjc.Pointer<com.apple.jobjc.Pointer<Void>> values){
			final com.apple.jobjc.Invoke.FunCall CFBinaryHeapGetValues_FxnInst = get_CFBinaryHeapGetValues_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBinaryHeapGetValues_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, heap);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, values);
		CFBinaryHeapGetValues_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFBinaryHeapRemoveAllValues_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBinaryHeapRemoveAllValues_FxnInst(){
		return ((CFBinaryHeapRemoveAllValues_FxnInst != null)
	? (CFBinaryHeapRemoveAllValues_FxnInst)
	: (CFBinaryHeapRemoveAllValues_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBinaryHeapRemoveAllValues", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFBinaryHeapRemoveAllValues(final com.apple.jobjc.corefoundation.CFBinaryHeapRefCFType heap){
			final com.apple.jobjc.Invoke.FunCall CFBinaryHeapRemoveAllValues_FxnInst = get_CFBinaryHeapRemoveAllValues_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBinaryHeapRemoveAllValues_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, heap);
		CFBinaryHeapRemoveAllValues_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFBinaryHeapRemoveMinimumValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBinaryHeapRemoveMinimumValue_FxnInst(){
		return ((CFBinaryHeapRemoveMinimumValue_FxnInst != null)
	? (CFBinaryHeapRemoveMinimumValue_FxnInst)
	: (CFBinaryHeapRemoveMinimumValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBinaryHeapRemoveMinimumValue", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFBinaryHeapRemoveMinimumValue(final com.apple.jobjc.corefoundation.CFBinaryHeapRefCFType heap){
			final com.apple.jobjc.Invoke.FunCall CFBinaryHeapRemoveMinimumValue_FxnInst = get_CFBinaryHeapRemoveMinimumValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBinaryHeapRemoveMinimumValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, heap);
		CFBinaryHeapRemoveMinimumValue_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFBitVectorContainsBit_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBitVectorContainsBit_FxnInst(){
		return ((CFBitVectorContainsBit_FxnInst != null)
	? (CFBitVectorContainsBit_FxnInst)
	: (CFBitVectorContainsBit_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBitVectorContainsBit", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder)));
	}

	 public boolean CFBitVectorContainsBit(final com.apple.jobjc.corefoundation.CFBitVectorRefCFType bv, final com.apple.jobjc.corefoundation.CFRange range, final int value){
			final com.apple.jobjc.Invoke.FunCall CFBitVectorContainsBit_FxnInst = get_CFBitVectorContainsBit_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBitVectorContainsBit_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bv);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, value);
		CFBitVectorContainsBit_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBitVectorCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBitVectorCreate_FxnInst(){
		return ((CFBitVectorCreate_FxnInst != null)
	? (CFBitVectorCreate_FxnInst)
	: (CFBitVectorCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBitVectorCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFBitVectorRefCFType CFBitVectorCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.Pointer<java.lang.Byte> bytes, final long numBits){
			final com.apple.jobjc.Invoke.FunCall CFBitVectorCreate_FxnInst = get_CFBitVectorCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBitVectorCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bytes);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, numBits);
		CFBitVectorCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFBitVectorRefCFType returnValue = (com.apple.jobjc.corefoundation.CFBitVectorRefCFType) new com.apple.jobjc.corefoundation.CFBitVectorRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBitVectorCreateCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBitVectorCreateCopy_FxnInst(){
		return ((CFBitVectorCreateCopy_FxnInst != null)
	? (CFBitVectorCreateCopy_FxnInst)
	: (CFBitVectorCreateCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBitVectorCreateCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFBitVectorRefCFType CFBitVectorCreateCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFBitVectorRefCFType bv){
			final com.apple.jobjc.Invoke.FunCall CFBitVectorCreateCopy_FxnInst = get_CFBitVectorCreateCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBitVectorCreateCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bv);
		CFBitVectorCreateCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFBitVectorRefCFType returnValue = (com.apple.jobjc.corefoundation.CFBitVectorRefCFType) new com.apple.jobjc.corefoundation.CFBitVectorRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBitVectorCreateMutable_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBitVectorCreateMutable_FxnInst(){
		return ((CFBitVectorCreateMutable_FxnInst != null)
	? (CFBitVectorCreateMutable_FxnInst)
	: (CFBitVectorCreateMutable_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBitVectorCreateMutable", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFMutableBitVectorRefCFType CFBitVectorCreateMutable(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final long capacity){
			final com.apple.jobjc.Invoke.FunCall CFBitVectorCreateMutable_FxnInst = get_CFBitVectorCreateMutable_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBitVectorCreateMutable_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, capacity);
		CFBitVectorCreateMutable_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFMutableBitVectorRefCFType returnValue = (com.apple.jobjc.corefoundation.CFMutableBitVectorRefCFType) new com.apple.jobjc.corefoundation.CFMutableBitVectorRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBitVectorCreateMutableCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBitVectorCreateMutableCopy_FxnInst(){
		return ((CFBitVectorCreateMutableCopy_FxnInst != null)
	? (CFBitVectorCreateMutableCopy_FxnInst)
	: (CFBitVectorCreateMutableCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBitVectorCreateMutableCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFMutableBitVectorRefCFType CFBitVectorCreateMutableCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final long capacity, final com.apple.jobjc.corefoundation.CFBitVectorRefCFType bv){
			final com.apple.jobjc.Invoke.FunCall CFBitVectorCreateMutableCopy_FxnInst = get_CFBitVectorCreateMutableCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBitVectorCreateMutableCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, capacity);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bv);
		CFBitVectorCreateMutableCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFMutableBitVectorRefCFType returnValue = (com.apple.jobjc.corefoundation.CFMutableBitVectorRefCFType) new com.apple.jobjc.corefoundation.CFMutableBitVectorRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBitVectorFlipBitAtIndex_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBitVectorFlipBitAtIndex_FxnInst(){
		return ((CFBitVectorFlipBitAtIndex_FxnInst != null)
	? (CFBitVectorFlipBitAtIndex_FxnInst)
	: (CFBitVectorFlipBitAtIndex_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBitVectorFlipBitAtIndex", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public void CFBitVectorFlipBitAtIndex(final com.apple.jobjc.corefoundation.CFMutableBitVectorRefCFType bv, final long idx){
			final com.apple.jobjc.Invoke.FunCall CFBitVectorFlipBitAtIndex_FxnInst = get_CFBitVectorFlipBitAtIndex_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBitVectorFlipBitAtIndex_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bv);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, idx);
		CFBitVectorFlipBitAtIndex_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFBitVectorFlipBits_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBitVectorFlipBits_FxnInst(){
		return ((CFBitVectorFlipBits_FxnInst != null)
	? (CFBitVectorFlipBits_FxnInst)
	: (CFBitVectorFlipBits_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBitVectorFlipBits", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder())));
	}

	 public void CFBitVectorFlipBits(final com.apple.jobjc.corefoundation.CFMutableBitVectorRefCFType bv, final com.apple.jobjc.corefoundation.CFRange range){
			final com.apple.jobjc.Invoke.FunCall CFBitVectorFlipBits_FxnInst = get_CFBitVectorFlipBits_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBitVectorFlipBits_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bv);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		CFBitVectorFlipBits_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFBitVectorGetBitAtIndex_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBitVectorGetBitAtIndex_FxnInst(){
		return ((CFBitVectorGetBitAtIndex_FxnInst != null)
	? (CFBitVectorGetBitAtIndex_FxnInst)
	: (CFBitVectorGetBitAtIndex_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBitVectorGetBitAtIndex", com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public int CFBitVectorGetBitAtIndex(final com.apple.jobjc.corefoundation.CFBitVectorRefCFType bv, final long idx){
			final com.apple.jobjc.Invoke.FunCall CFBitVectorGetBitAtIndex_FxnInst = get_CFBitVectorGetBitAtIndex_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBitVectorGetBitAtIndex_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bv);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, idx);
		CFBitVectorGetBitAtIndex_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBitVectorGetBits_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBitVectorGetBits_FxnInst(){
		return ((CFBitVectorGetBits_FxnInst != null)
	? (CFBitVectorGetBits_FxnInst)
	: (CFBitVectorGetBits_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBitVectorGetBits", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFBitVectorGetBits(final com.apple.jobjc.corefoundation.CFBitVectorRefCFType bv, final com.apple.jobjc.corefoundation.CFRange range, final com.apple.jobjc.Pointer<java.lang.Byte> bytes){
			final com.apple.jobjc.Invoke.FunCall CFBitVectorGetBits_FxnInst = get_CFBitVectorGetBits_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBitVectorGetBits_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bv);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bytes);
		CFBitVectorGetBits_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFBitVectorGetCount_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBitVectorGetCount_FxnInst(){
		return ((CFBitVectorGetCount_FxnInst != null)
	? (CFBitVectorGetCount_FxnInst)
	: (CFBitVectorGetCount_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBitVectorGetCount", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFBitVectorGetCount(final com.apple.jobjc.corefoundation.CFBitVectorRefCFType bv){
			final com.apple.jobjc.Invoke.FunCall CFBitVectorGetCount_FxnInst = get_CFBitVectorGetCount_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBitVectorGetCount_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bv);
		CFBitVectorGetCount_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBitVectorGetCountOfBit_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBitVectorGetCountOfBit_FxnInst(){
		return ((CFBitVectorGetCountOfBit_FxnInst != null)
	? (CFBitVectorGetCountOfBit_FxnInst)
	: (CFBitVectorGetCountOfBit_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBitVectorGetCountOfBit", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder)));
	}

	 public long CFBitVectorGetCountOfBit(final com.apple.jobjc.corefoundation.CFBitVectorRefCFType bv, final com.apple.jobjc.corefoundation.CFRange range, final int value){
			final com.apple.jobjc.Invoke.FunCall CFBitVectorGetCountOfBit_FxnInst = get_CFBitVectorGetCountOfBit_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBitVectorGetCountOfBit_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bv);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, value);
		CFBitVectorGetCountOfBit_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBitVectorGetFirstIndexOfBit_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBitVectorGetFirstIndexOfBit_FxnInst(){
		return ((CFBitVectorGetFirstIndexOfBit_FxnInst != null)
	? (CFBitVectorGetFirstIndexOfBit_FxnInst)
	: (CFBitVectorGetFirstIndexOfBit_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBitVectorGetFirstIndexOfBit", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder)));
	}

	 public long CFBitVectorGetFirstIndexOfBit(final com.apple.jobjc.corefoundation.CFBitVectorRefCFType bv, final com.apple.jobjc.corefoundation.CFRange range, final int value){
			final com.apple.jobjc.Invoke.FunCall CFBitVectorGetFirstIndexOfBit_FxnInst = get_CFBitVectorGetFirstIndexOfBit_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBitVectorGetFirstIndexOfBit_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bv);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, value);
		CFBitVectorGetFirstIndexOfBit_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBitVectorGetLastIndexOfBit_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBitVectorGetLastIndexOfBit_FxnInst(){
		return ((CFBitVectorGetLastIndexOfBit_FxnInst != null)
	? (CFBitVectorGetLastIndexOfBit_FxnInst)
	: (CFBitVectorGetLastIndexOfBit_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBitVectorGetLastIndexOfBit", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder)));
	}

	 public long CFBitVectorGetLastIndexOfBit(final com.apple.jobjc.corefoundation.CFBitVectorRefCFType bv, final com.apple.jobjc.corefoundation.CFRange range, final int value){
			final com.apple.jobjc.Invoke.FunCall CFBitVectorGetLastIndexOfBit_FxnInst = get_CFBitVectorGetLastIndexOfBit_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBitVectorGetLastIndexOfBit_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bv);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, value);
		CFBitVectorGetLastIndexOfBit_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBitVectorGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBitVectorGetTypeID_FxnInst(){
		return ((CFBitVectorGetTypeID_FxnInst != null)
	? (CFBitVectorGetTypeID_FxnInst)
	: (CFBitVectorGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBitVectorGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFBitVectorGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFBitVectorGetTypeID_FxnInst = get_CFBitVectorGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBitVectorGetTypeID_FxnInst.init(nativeBuffer);
		CFBitVectorGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBitVectorSetAllBits_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBitVectorSetAllBits_FxnInst(){
		return ((CFBitVectorSetAllBits_FxnInst != null)
	? (CFBitVectorSetAllBits_FxnInst)
	: (CFBitVectorSetAllBits_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBitVectorSetAllBits", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder)));
	}

	 public void CFBitVectorSetAllBits(final com.apple.jobjc.corefoundation.CFMutableBitVectorRefCFType bv, final int value){
			final com.apple.jobjc.Invoke.FunCall CFBitVectorSetAllBits_FxnInst = get_CFBitVectorSetAllBits_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBitVectorSetAllBits_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bv);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, value);
		CFBitVectorSetAllBits_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFBitVectorSetBitAtIndex_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBitVectorSetBitAtIndex_FxnInst(){
		return ((CFBitVectorSetBitAtIndex_FxnInst != null)
	? (CFBitVectorSetBitAtIndex_FxnInst)
	: (CFBitVectorSetBitAtIndex_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBitVectorSetBitAtIndex", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder)));
	}

	 public void CFBitVectorSetBitAtIndex(final com.apple.jobjc.corefoundation.CFMutableBitVectorRefCFType bv, final long idx, final int value){
			final com.apple.jobjc.Invoke.FunCall CFBitVectorSetBitAtIndex_FxnInst = get_CFBitVectorSetBitAtIndex_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBitVectorSetBitAtIndex_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bv);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, idx);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, value);
		CFBitVectorSetBitAtIndex_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFBitVectorSetBits_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBitVectorSetBits_FxnInst(){
		return ((CFBitVectorSetBits_FxnInst != null)
	? (CFBitVectorSetBits_FxnInst)
	: (CFBitVectorSetBits_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBitVectorSetBits", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder)));
	}

	 public void CFBitVectorSetBits(final com.apple.jobjc.corefoundation.CFMutableBitVectorRefCFType bv, final com.apple.jobjc.corefoundation.CFRange range, final int value){
			final com.apple.jobjc.Invoke.FunCall CFBitVectorSetBits_FxnInst = get_CFBitVectorSetBits_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBitVectorSetBits_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bv);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, value);
		CFBitVectorSetBits_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFBitVectorSetCount_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBitVectorSetCount_FxnInst(){
		return ((CFBitVectorSetCount_FxnInst != null)
	? (CFBitVectorSetCount_FxnInst)
	: (CFBitVectorSetCount_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBitVectorSetCount", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public void CFBitVectorSetCount(final com.apple.jobjc.corefoundation.CFMutableBitVectorRefCFType bv, final long count){
			final com.apple.jobjc.Invoke.FunCall CFBitVectorSetCount_FxnInst = get_CFBitVectorSetCount_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBitVectorSetCount_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bv);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, count);
		CFBitVectorSetCount_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFBooleanGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBooleanGetTypeID_FxnInst(){
		return ((CFBooleanGetTypeID_FxnInst != null)
	? (CFBooleanGetTypeID_FxnInst)
	: (CFBooleanGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBooleanGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFBooleanGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFBooleanGetTypeID_FxnInst = get_CFBooleanGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBooleanGetTypeID_FxnInst.init(nativeBuffer);
		CFBooleanGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBooleanGetValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBooleanGetValue_FxnInst(){
		return ((CFBooleanGetValue_FxnInst != null)
	? (CFBooleanGetValue_FxnInst)
	: (CFBooleanGetValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBooleanGetValue", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFBooleanGetValue(final com.apple.jobjc.corefoundation.CFBooleanRefCFType boolean0){
			final com.apple.jobjc.Invoke.FunCall CFBooleanGetValue_FxnInst = get_CFBooleanGetValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBooleanGetValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, boolean0);
		CFBooleanGetValue_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleCloseBundleResourceMap_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleCloseBundleResourceMap_FxnInst(){
		return ((CFBundleCloseBundleResourceMap_FxnInst != null)
	? (CFBundleCloseBundleResourceMap_FxnInst)
	: (CFBundleCloseBundleResourceMap_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleCloseBundleResourceMap", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SShortSIntCoder)));
	}

	 public void CFBundleCloseBundleResourceMap(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle, final int refNum){
			final com.apple.jobjc.Invoke.FunCall CFBundleCloseBundleResourceMap_FxnInst = get_CFBundleCloseBundleResourceMap_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleCloseBundleResourceMap_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		com.apple.jobjc.MixedPrimitiveCoder.SShortSIntCoder.push(nativeBuffer, refNum);
		CFBundleCloseBundleResourceMap_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleCopyAuxiliaryExecutableURL_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleCopyAuxiliaryExecutableURL_FxnInst(){
		return ((CFBundleCopyAuxiliaryExecutableURL_FxnInst != null)
	? (CFBundleCopyAuxiliaryExecutableURL_FxnInst)
	: (CFBundleCopyAuxiliaryExecutableURL_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleCopyAuxiliaryExecutableURL", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFBundleCopyAuxiliaryExecutableURL(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle, final com.apple.jobjc.corefoundation.CFStringRefCFType executableName){
			final com.apple.jobjc.Invoke.FunCall CFBundleCopyAuxiliaryExecutableURL_FxnInst = get_CFBundleCopyAuxiliaryExecutableURL_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleCopyAuxiliaryExecutableURL_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, executableName);
		CFBundleCopyAuxiliaryExecutableURL_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleCopyBuiltInPlugInsURL_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleCopyBuiltInPlugInsURL_FxnInst(){
		return ((CFBundleCopyBuiltInPlugInsURL_FxnInst != null)
	? (CFBundleCopyBuiltInPlugInsURL_FxnInst)
	: (CFBundleCopyBuiltInPlugInsURL_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleCopyBuiltInPlugInsURL", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFBundleCopyBuiltInPlugInsURL(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle){
			final com.apple.jobjc.Invoke.FunCall CFBundleCopyBuiltInPlugInsURL_FxnInst = get_CFBundleCopyBuiltInPlugInsURL_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleCopyBuiltInPlugInsURL_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		CFBundleCopyBuiltInPlugInsURL_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleCopyBundleLocalizations_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleCopyBundleLocalizations_FxnInst(){
		return ((CFBundleCopyBundleLocalizations_FxnInst != null)
	? (CFBundleCopyBundleLocalizations_FxnInst)
	: (CFBundleCopyBundleLocalizations_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleCopyBundleLocalizations", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFArrayRefCFType CFBundleCopyBundleLocalizations(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle){
			final com.apple.jobjc.Invoke.FunCall CFBundleCopyBundleLocalizations_FxnInst = get_CFBundleCopyBundleLocalizations_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleCopyBundleLocalizations_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		CFBundleCopyBundleLocalizations_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFArrayRefCFType) new com.apple.jobjc.corefoundation.CFArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleCopyBundleURL_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleCopyBundleURL_FxnInst(){
		return ((CFBundleCopyBundleURL_FxnInst != null)
	? (CFBundleCopyBundleURL_FxnInst)
	: (CFBundleCopyBundleURL_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleCopyBundleURL", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFBundleCopyBundleURL(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle){
			final com.apple.jobjc.Invoke.FunCall CFBundleCopyBundleURL_FxnInst = get_CFBundleCopyBundleURL_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleCopyBundleURL_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		CFBundleCopyBundleURL_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleCopyExecutableArchitectures_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleCopyExecutableArchitectures_FxnInst(){
		return ((CFBundleCopyExecutableArchitectures_FxnInst != null)
	? (CFBundleCopyExecutableArchitectures_FxnInst)
	: (CFBundleCopyExecutableArchitectures_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleCopyExecutableArchitectures", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFArrayRefCFType CFBundleCopyExecutableArchitectures(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle){
			final com.apple.jobjc.Invoke.FunCall CFBundleCopyExecutableArchitectures_FxnInst = get_CFBundleCopyExecutableArchitectures_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleCopyExecutableArchitectures_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		CFBundleCopyExecutableArchitectures_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFArrayRefCFType) new com.apple.jobjc.corefoundation.CFArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleCopyExecutableArchitecturesForURL_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleCopyExecutableArchitecturesForURL_FxnInst(){
		return ((CFBundleCopyExecutableArchitecturesForURL_FxnInst != null)
	? (CFBundleCopyExecutableArchitecturesForURL_FxnInst)
	: (CFBundleCopyExecutableArchitecturesForURL_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleCopyExecutableArchitecturesForURL", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFArrayRefCFType CFBundleCopyExecutableArchitecturesForURL(final com.apple.jobjc.corefoundation.CFURLRefCFType url){
			final com.apple.jobjc.Invoke.FunCall CFBundleCopyExecutableArchitecturesForURL_FxnInst = get_CFBundleCopyExecutableArchitecturesForURL_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleCopyExecutableArchitecturesForURL_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		CFBundleCopyExecutableArchitecturesForURL_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFArrayRefCFType) new com.apple.jobjc.corefoundation.CFArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleCopyExecutableURL_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleCopyExecutableURL_FxnInst(){
		return ((CFBundleCopyExecutableURL_FxnInst != null)
	? (CFBundleCopyExecutableURL_FxnInst)
	: (CFBundleCopyExecutableURL_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleCopyExecutableURL", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFBundleCopyExecutableURL(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle){
			final com.apple.jobjc.Invoke.FunCall CFBundleCopyExecutableURL_FxnInst = get_CFBundleCopyExecutableURL_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleCopyExecutableURL_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		CFBundleCopyExecutableURL_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleCopyInfoDictionaryForURL_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleCopyInfoDictionaryForURL_FxnInst(){
		return ((CFBundleCopyInfoDictionaryForURL_FxnInst != null)
	? (CFBundleCopyInfoDictionaryForURL_FxnInst)
	: (CFBundleCopyInfoDictionaryForURL_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleCopyInfoDictionaryForURL", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDictionaryRefCFType CFBundleCopyInfoDictionaryForURL(final com.apple.jobjc.corefoundation.CFURLRefCFType url){
			final com.apple.jobjc.Invoke.FunCall CFBundleCopyInfoDictionaryForURL_FxnInst = get_CFBundleCopyInfoDictionaryForURL_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleCopyInfoDictionaryForURL_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		CFBundleCopyInfoDictionaryForURL_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDictionaryRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDictionaryRefCFType) new com.apple.jobjc.corefoundation.CFDictionaryRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleCopyInfoDictionaryInDirectory_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleCopyInfoDictionaryInDirectory_FxnInst(){
		return ((CFBundleCopyInfoDictionaryInDirectory_FxnInst != null)
	? (CFBundleCopyInfoDictionaryInDirectory_FxnInst)
	: (CFBundleCopyInfoDictionaryInDirectory_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleCopyInfoDictionaryInDirectory", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDictionaryRefCFType CFBundleCopyInfoDictionaryInDirectory(final com.apple.jobjc.corefoundation.CFURLRefCFType bundleURL){
			final com.apple.jobjc.Invoke.FunCall CFBundleCopyInfoDictionaryInDirectory_FxnInst = get_CFBundleCopyInfoDictionaryInDirectory_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleCopyInfoDictionaryInDirectory_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundleURL);
		CFBundleCopyInfoDictionaryInDirectory_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDictionaryRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDictionaryRefCFType) new com.apple.jobjc.corefoundation.CFDictionaryRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleCopyLocalizationsForPreferences_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleCopyLocalizationsForPreferences_FxnInst(){
		return ((CFBundleCopyLocalizationsForPreferences_FxnInst != null)
	? (CFBundleCopyLocalizationsForPreferences_FxnInst)
	: (CFBundleCopyLocalizationsForPreferences_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleCopyLocalizationsForPreferences", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFArrayRefCFType CFBundleCopyLocalizationsForPreferences(final com.apple.jobjc.corefoundation.CFArrayRefCFType locArray, final com.apple.jobjc.corefoundation.CFArrayRefCFType prefArray){
			final com.apple.jobjc.Invoke.FunCall CFBundleCopyLocalizationsForPreferences_FxnInst = get_CFBundleCopyLocalizationsForPreferences_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleCopyLocalizationsForPreferences_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, locArray);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, prefArray);
		CFBundleCopyLocalizationsForPreferences_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFArrayRefCFType) new com.apple.jobjc.corefoundation.CFArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleCopyLocalizationsForURL_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleCopyLocalizationsForURL_FxnInst(){
		return ((CFBundleCopyLocalizationsForURL_FxnInst != null)
	? (CFBundleCopyLocalizationsForURL_FxnInst)
	: (CFBundleCopyLocalizationsForURL_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleCopyLocalizationsForURL", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFArrayRefCFType CFBundleCopyLocalizationsForURL(final com.apple.jobjc.corefoundation.CFURLRefCFType url){
			final com.apple.jobjc.Invoke.FunCall CFBundleCopyLocalizationsForURL_FxnInst = get_CFBundleCopyLocalizationsForURL_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleCopyLocalizationsForURL_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		CFBundleCopyLocalizationsForURL_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFArrayRefCFType) new com.apple.jobjc.corefoundation.CFArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleCopyLocalizedString_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleCopyLocalizedString_FxnInst(){
		return ((CFBundleCopyLocalizedString_FxnInst != null)
	? (CFBundleCopyLocalizedString_FxnInst)
	: (CFBundleCopyLocalizedString_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleCopyLocalizedString", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFBundleCopyLocalizedString(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle, final com.apple.jobjc.corefoundation.CFStringRefCFType key, final com.apple.jobjc.corefoundation.CFStringRefCFType value, final com.apple.jobjc.corefoundation.CFStringRefCFType tableName){
			final com.apple.jobjc.Invoke.FunCall CFBundleCopyLocalizedString_FxnInst = get_CFBundleCopyLocalizedString_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleCopyLocalizedString_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, key);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tableName);
		CFBundleCopyLocalizedString_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleCopyPreferredLocalizationsFromArray_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleCopyPreferredLocalizationsFromArray_FxnInst(){
		return ((CFBundleCopyPreferredLocalizationsFromArray_FxnInst != null)
	? (CFBundleCopyPreferredLocalizationsFromArray_FxnInst)
	: (CFBundleCopyPreferredLocalizationsFromArray_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleCopyPreferredLocalizationsFromArray", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFArrayRefCFType CFBundleCopyPreferredLocalizationsFromArray(final com.apple.jobjc.corefoundation.CFArrayRefCFType locArray){
			final com.apple.jobjc.Invoke.FunCall CFBundleCopyPreferredLocalizationsFromArray_FxnInst = get_CFBundleCopyPreferredLocalizationsFromArray_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleCopyPreferredLocalizationsFromArray_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, locArray);
		CFBundleCopyPreferredLocalizationsFromArray_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFArrayRefCFType) new com.apple.jobjc.corefoundation.CFArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleCopyPrivateFrameworksURL_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleCopyPrivateFrameworksURL_FxnInst(){
		return ((CFBundleCopyPrivateFrameworksURL_FxnInst != null)
	? (CFBundleCopyPrivateFrameworksURL_FxnInst)
	: (CFBundleCopyPrivateFrameworksURL_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleCopyPrivateFrameworksURL", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFBundleCopyPrivateFrameworksURL(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle){
			final com.apple.jobjc.Invoke.FunCall CFBundleCopyPrivateFrameworksURL_FxnInst = get_CFBundleCopyPrivateFrameworksURL_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleCopyPrivateFrameworksURL_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		CFBundleCopyPrivateFrameworksURL_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleCopyResourceURL_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleCopyResourceURL_FxnInst(){
		return ((CFBundleCopyResourceURL_FxnInst != null)
	? (CFBundleCopyResourceURL_FxnInst)
	: (CFBundleCopyResourceURL_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleCopyResourceURL", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFBundleCopyResourceURL(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle, final com.apple.jobjc.corefoundation.CFStringRefCFType resourceName, final com.apple.jobjc.corefoundation.CFStringRefCFType resourceType, final com.apple.jobjc.corefoundation.CFStringRefCFType subDirName){
			final com.apple.jobjc.Invoke.FunCall CFBundleCopyResourceURL_FxnInst = get_CFBundleCopyResourceURL_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleCopyResourceURL_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, resourceName);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, resourceType);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, subDirName);
		CFBundleCopyResourceURL_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleCopyResourceURLForLocalization_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleCopyResourceURLForLocalization_FxnInst(){
		return ((CFBundleCopyResourceURLForLocalization_FxnInst != null)
	? (CFBundleCopyResourceURLForLocalization_FxnInst)
	: (CFBundleCopyResourceURLForLocalization_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleCopyResourceURLForLocalization", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFBundleCopyResourceURLForLocalization(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle, final com.apple.jobjc.corefoundation.CFStringRefCFType resourceName, final com.apple.jobjc.corefoundation.CFStringRefCFType resourceType, final com.apple.jobjc.corefoundation.CFStringRefCFType subDirName, final com.apple.jobjc.corefoundation.CFStringRefCFType localizationName){
			final com.apple.jobjc.Invoke.FunCall CFBundleCopyResourceURLForLocalization_FxnInst = get_CFBundleCopyResourceURLForLocalization_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleCopyResourceURLForLocalization_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, resourceName);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, resourceType);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, subDirName);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, localizationName);
		CFBundleCopyResourceURLForLocalization_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleCopyResourceURLInDirectory_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleCopyResourceURLInDirectory_FxnInst(){
		return ((CFBundleCopyResourceURLInDirectory_FxnInst != null)
	? (CFBundleCopyResourceURLInDirectory_FxnInst)
	: (CFBundleCopyResourceURLInDirectory_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleCopyResourceURLInDirectory", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFBundleCopyResourceURLInDirectory(final com.apple.jobjc.corefoundation.CFURLRefCFType bundleURL, final com.apple.jobjc.corefoundation.CFStringRefCFType resourceName, final com.apple.jobjc.corefoundation.CFStringRefCFType resourceType, final com.apple.jobjc.corefoundation.CFStringRefCFType subDirName){
			final com.apple.jobjc.Invoke.FunCall CFBundleCopyResourceURLInDirectory_FxnInst = get_CFBundleCopyResourceURLInDirectory_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleCopyResourceURLInDirectory_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundleURL);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, resourceName);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, resourceType);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, subDirName);
		CFBundleCopyResourceURLInDirectory_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleCopyResourceURLsOfType_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleCopyResourceURLsOfType_FxnInst(){
		return ((CFBundleCopyResourceURLsOfType_FxnInst != null)
	? (CFBundleCopyResourceURLsOfType_FxnInst)
	: (CFBundleCopyResourceURLsOfType_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleCopyResourceURLsOfType", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFArrayRefCFType CFBundleCopyResourceURLsOfType(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle, final com.apple.jobjc.corefoundation.CFStringRefCFType resourceType, final com.apple.jobjc.corefoundation.CFStringRefCFType subDirName){
			final com.apple.jobjc.Invoke.FunCall CFBundleCopyResourceURLsOfType_FxnInst = get_CFBundleCopyResourceURLsOfType_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleCopyResourceURLsOfType_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, resourceType);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, subDirName);
		CFBundleCopyResourceURLsOfType_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFArrayRefCFType) new com.apple.jobjc.corefoundation.CFArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleCopyResourceURLsOfTypeForLocalization_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleCopyResourceURLsOfTypeForLocalization_FxnInst(){
		return ((CFBundleCopyResourceURLsOfTypeForLocalization_FxnInst != null)
	? (CFBundleCopyResourceURLsOfTypeForLocalization_FxnInst)
	: (CFBundleCopyResourceURLsOfTypeForLocalization_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleCopyResourceURLsOfTypeForLocalization", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFArrayRefCFType CFBundleCopyResourceURLsOfTypeForLocalization(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle, final com.apple.jobjc.corefoundation.CFStringRefCFType resourceType, final com.apple.jobjc.corefoundation.CFStringRefCFType subDirName, final com.apple.jobjc.corefoundation.CFStringRefCFType localizationName){
			final com.apple.jobjc.Invoke.FunCall CFBundleCopyResourceURLsOfTypeForLocalization_FxnInst = get_CFBundleCopyResourceURLsOfTypeForLocalization_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleCopyResourceURLsOfTypeForLocalization_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, resourceType);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, subDirName);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, localizationName);
		CFBundleCopyResourceURLsOfTypeForLocalization_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFArrayRefCFType) new com.apple.jobjc.corefoundation.CFArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleCopyResourceURLsOfTypeInDirectory_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleCopyResourceURLsOfTypeInDirectory_FxnInst(){
		return ((CFBundleCopyResourceURLsOfTypeInDirectory_FxnInst != null)
	? (CFBundleCopyResourceURLsOfTypeInDirectory_FxnInst)
	: (CFBundleCopyResourceURLsOfTypeInDirectory_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleCopyResourceURLsOfTypeInDirectory", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFArrayRefCFType CFBundleCopyResourceURLsOfTypeInDirectory(final com.apple.jobjc.corefoundation.CFURLRefCFType bundleURL, final com.apple.jobjc.corefoundation.CFStringRefCFType resourceType, final com.apple.jobjc.corefoundation.CFStringRefCFType subDirName){
			final com.apple.jobjc.Invoke.FunCall CFBundleCopyResourceURLsOfTypeInDirectory_FxnInst = get_CFBundleCopyResourceURLsOfTypeInDirectory_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleCopyResourceURLsOfTypeInDirectory_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundleURL);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, resourceType);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, subDirName);
		CFBundleCopyResourceURLsOfTypeInDirectory_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFArrayRefCFType) new com.apple.jobjc.corefoundation.CFArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleCopyResourcesDirectoryURL_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleCopyResourcesDirectoryURL_FxnInst(){
		return ((CFBundleCopyResourcesDirectoryURL_FxnInst != null)
	? (CFBundleCopyResourcesDirectoryURL_FxnInst)
	: (CFBundleCopyResourcesDirectoryURL_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleCopyResourcesDirectoryURL", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFBundleCopyResourcesDirectoryURL(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle){
			final com.apple.jobjc.Invoke.FunCall CFBundleCopyResourcesDirectoryURL_FxnInst = get_CFBundleCopyResourcesDirectoryURL_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleCopyResourcesDirectoryURL_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		CFBundleCopyResourcesDirectoryURL_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleCopySharedFrameworksURL_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleCopySharedFrameworksURL_FxnInst(){
		return ((CFBundleCopySharedFrameworksURL_FxnInst != null)
	? (CFBundleCopySharedFrameworksURL_FxnInst)
	: (CFBundleCopySharedFrameworksURL_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleCopySharedFrameworksURL", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFBundleCopySharedFrameworksURL(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle){
			final com.apple.jobjc.Invoke.FunCall CFBundleCopySharedFrameworksURL_FxnInst = get_CFBundleCopySharedFrameworksURL_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleCopySharedFrameworksURL_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		CFBundleCopySharedFrameworksURL_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleCopySharedSupportURL_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleCopySharedSupportURL_FxnInst(){
		return ((CFBundleCopySharedSupportURL_FxnInst != null)
	? (CFBundleCopySharedSupportURL_FxnInst)
	: (CFBundleCopySharedSupportURL_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleCopySharedSupportURL", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFBundleCopySharedSupportURL(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle){
			final com.apple.jobjc.Invoke.FunCall CFBundleCopySharedSupportURL_FxnInst = get_CFBundleCopySharedSupportURL_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleCopySharedSupportURL_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		CFBundleCopySharedSupportURL_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleCopySupportFilesDirectoryURL_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleCopySupportFilesDirectoryURL_FxnInst(){
		return ((CFBundleCopySupportFilesDirectoryURL_FxnInst != null)
	? (CFBundleCopySupportFilesDirectoryURL_FxnInst)
	: (CFBundleCopySupportFilesDirectoryURL_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleCopySupportFilesDirectoryURL", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFBundleCopySupportFilesDirectoryURL(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle){
			final com.apple.jobjc.Invoke.FunCall CFBundleCopySupportFilesDirectoryURL_FxnInst = get_CFBundleCopySupportFilesDirectoryURL_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleCopySupportFilesDirectoryURL_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		CFBundleCopySupportFilesDirectoryURL_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleCreate_FxnInst(){
		return ((CFBundleCreate_FxnInst != null)
	? (CFBundleCreate_FxnInst)
	: (CFBundleCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFBundleRefCFType CFBundleCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFURLRefCFType bundleURL){
			final com.apple.jobjc.Invoke.FunCall CFBundleCreate_FxnInst = get_CFBundleCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundleURL);
		CFBundleCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFBundleRefCFType returnValue = (com.apple.jobjc.corefoundation.CFBundleRefCFType) new com.apple.jobjc.corefoundation.CFBundleRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleCreateBundlesFromDirectory_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleCreateBundlesFromDirectory_FxnInst(){
		return ((CFBundleCreateBundlesFromDirectory_FxnInst != null)
	? (CFBundleCreateBundlesFromDirectory_FxnInst)
	: (CFBundleCreateBundlesFromDirectory_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleCreateBundlesFromDirectory", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFArrayRefCFType CFBundleCreateBundlesFromDirectory(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFURLRefCFType directoryURL, final com.apple.jobjc.corefoundation.CFStringRefCFType bundleType){
			final com.apple.jobjc.Invoke.FunCall CFBundleCreateBundlesFromDirectory_FxnInst = get_CFBundleCreateBundlesFromDirectory_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleCreateBundlesFromDirectory_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, directoryURL);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundleType);
		CFBundleCreateBundlesFromDirectory_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFArrayRefCFType) new com.apple.jobjc.corefoundation.CFArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleGetAllBundles_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleGetAllBundles_FxnInst(){
		return ((CFBundleGetAllBundles_FxnInst != null)
	? (CFBundleGetAllBundles_FxnInst)
	: (CFBundleGetAllBundles_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleGetAllBundles", com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFArrayRefCFType CFBundleGetAllBundles(){
			final com.apple.jobjc.Invoke.FunCall CFBundleGetAllBundles_FxnInst = get_CFBundleGetAllBundles_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleGetAllBundles_FxnInst.init(nativeBuffer);
		CFBundleGetAllBundles_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFArrayRefCFType) new com.apple.jobjc.corefoundation.CFArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleGetBundleWithIdentifier_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleGetBundleWithIdentifier_FxnInst(){
		return ((CFBundleGetBundleWithIdentifier_FxnInst != null)
	? (CFBundleGetBundleWithIdentifier_FxnInst)
	: (CFBundleGetBundleWithIdentifier_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleGetBundleWithIdentifier", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFBundleRefCFType CFBundleGetBundleWithIdentifier(final com.apple.jobjc.corefoundation.CFStringRefCFType bundleID){
			final com.apple.jobjc.Invoke.FunCall CFBundleGetBundleWithIdentifier_FxnInst = get_CFBundleGetBundleWithIdentifier_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleGetBundleWithIdentifier_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundleID);
		CFBundleGetBundleWithIdentifier_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFBundleRefCFType returnValue = (com.apple.jobjc.corefoundation.CFBundleRefCFType) new com.apple.jobjc.corefoundation.CFBundleRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleGetDataPointerForName_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleGetDataPointerForName_FxnInst(){
		return ((CFBundleGetDataPointerForName_FxnInst != null)
	? (CFBundleGetDataPointerForName_FxnInst)
	: (CFBundleGetDataPointerForName_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleGetDataPointerForName", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.Pointer<Void> CFBundleGetDataPointerForName(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle, final com.apple.jobjc.corefoundation.CFStringRefCFType symbolName){
			final com.apple.jobjc.Invoke.FunCall CFBundleGetDataPointerForName_FxnInst = get_CFBundleGetDataPointerForName_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleGetDataPointerForName_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, symbolName);
		CFBundleGetDataPointerForName_FxnInst.invoke(nativeBuffer);
		final com.apple.jobjc.Pointer<Void> returnValue = (com.apple.jobjc.Pointer<Void>) (com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleGetDataPointersForNames_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleGetDataPointersForNames_FxnInst(){
		return ((CFBundleGetDataPointersForNames_FxnInst != null)
	? (CFBundleGetDataPointersForNames_FxnInst)
	: (CFBundleGetDataPointersForNames_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleGetDataPointersForNames", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFBundleGetDataPointersForNames(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle, final com.apple.jobjc.corefoundation.CFArrayRefCFType symbolNames, final com.apple.jobjc.Pointer<com.apple.jobjc.Pointer<Void>> stbl){
			final com.apple.jobjc.Invoke.FunCall CFBundleGetDataPointersForNames_FxnInst = get_CFBundleGetDataPointersForNames_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleGetDataPointersForNames_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, symbolNames);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stbl);
		CFBundleGetDataPointersForNames_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleGetDevelopmentRegion_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleGetDevelopmentRegion_FxnInst(){
		return ((CFBundleGetDevelopmentRegion_FxnInst != null)
	? (CFBundleGetDevelopmentRegion_FxnInst)
	: (CFBundleGetDevelopmentRegion_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleGetDevelopmentRegion", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFBundleGetDevelopmentRegion(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle){
			final com.apple.jobjc.Invoke.FunCall CFBundleGetDevelopmentRegion_FxnInst = get_CFBundleGetDevelopmentRegion_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleGetDevelopmentRegion_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		CFBundleGetDevelopmentRegion_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleGetFunctionPointerForName_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleGetFunctionPointerForName_FxnInst(){
		return ((CFBundleGetFunctionPointerForName_FxnInst != null)
	? (CFBundleGetFunctionPointerForName_FxnInst)
	: (CFBundleGetFunctionPointerForName_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleGetFunctionPointerForName", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.Pointer<Void> CFBundleGetFunctionPointerForName(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle, final com.apple.jobjc.corefoundation.CFStringRefCFType functionName){
			final com.apple.jobjc.Invoke.FunCall CFBundleGetFunctionPointerForName_FxnInst = get_CFBundleGetFunctionPointerForName_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleGetFunctionPointerForName_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, functionName);
		CFBundleGetFunctionPointerForName_FxnInst.invoke(nativeBuffer);
		final com.apple.jobjc.Pointer<Void> returnValue = (com.apple.jobjc.Pointer<Void>) (com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleGetFunctionPointersForNames_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleGetFunctionPointersForNames_FxnInst(){
		return ((CFBundleGetFunctionPointersForNames_FxnInst != null)
	? (CFBundleGetFunctionPointersForNames_FxnInst)
	: (CFBundleGetFunctionPointersForNames_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleGetFunctionPointersForNames", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFBundleGetFunctionPointersForNames(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle, final com.apple.jobjc.corefoundation.CFArrayRefCFType functionNames, final com.apple.jobjc.Pointer<com.apple.jobjc.Pointer<Void>> ftbl){
			final com.apple.jobjc.Invoke.FunCall CFBundleGetFunctionPointersForNames_FxnInst = get_CFBundleGetFunctionPointersForNames_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleGetFunctionPointersForNames_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, functionNames);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, ftbl);
		CFBundleGetFunctionPointersForNames_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleGetIdentifier_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleGetIdentifier_FxnInst(){
		return ((CFBundleGetIdentifier_FxnInst != null)
	? (CFBundleGetIdentifier_FxnInst)
	: (CFBundleGetIdentifier_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleGetIdentifier", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFBundleGetIdentifier(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle){
			final com.apple.jobjc.Invoke.FunCall CFBundleGetIdentifier_FxnInst = get_CFBundleGetIdentifier_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleGetIdentifier_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		CFBundleGetIdentifier_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleGetInfoDictionary_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleGetInfoDictionary_FxnInst(){
		return ((CFBundleGetInfoDictionary_FxnInst != null)
	? (CFBundleGetInfoDictionary_FxnInst)
	: (CFBundleGetInfoDictionary_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleGetInfoDictionary", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDictionaryRefCFType CFBundleGetInfoDictionary(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle){
			final com.apple.jobjc.Invoke.FunCall CFBundleGetInfoDictionary_FxnInst = get_CFBundleGetInfoDictionary_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleGetInfoDictionary_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		CFBundleGetInfoDictionary_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDictionaryRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDictionaryRefCFType) new com.apple.jobjc.corefoundation.CFDictionaryRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleGetLocalInfoDictionary_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleGetLocalInfoDictionary_FxnInst(){
		return ((CFBundleGetLocalInfoDictionary_FxnInst != null)
	? (CFBundleGetLocalInfoDictionary_FxnInst)
	: (CFBundleGetLocalInfoDictionary_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleGetLocalInfoDictionary", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDictionaryRefCFType CFBundleGetLocalInfoDictionary(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle){
			final com.apple.jobjc.Invoke.FunCall CFBundleGetLocalInfoDictionary_FxnInst = get_CFBundleGetLocalInfoDictionary_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleGetLocalInfoDictionary_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		CFBundleGetLocalInfoDictionary_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDictionaryRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDictionaryRefCFType) new com.apple.jobjc.corefoundation.CFDictionaryRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleGetMainBundle_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleGetMainBundle_FxnInst(){
		return ((CFBundleGetMainBundle_FxnInst != null)
	? (CFBundleGetMainBundle_FxnInst)
	: (CFBundleGetMainBundle_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleGetMainBundle", com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFBundleRefCFType CFBundleGetMainBundle(){
			final com.apple.jobjc.Invoke.FunCall CFBundleGetMainBundle_FxnInst = get_CFBundleGetMainBundle_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleGetMainBundle_FxnInst.init(nativeBuffer);
		CFBundleGetMainBundle_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFBundleRefCFType returnValue = (com.apple.jobjc.corefoundation.CFBundleRefCFType) new com.apple.jobjc.corefoundation.CFBundleRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleGetPackageInfo_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleGetPackageInfo_FxnInst(){
		return ((CFBundleGetPackageInfo_FxnInst != null)
	? (CFBundleGetPackageInfo_FxnInst)
	: (CFBundleGetPackageInfo_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleGetPackageInfo", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFBundleGetPackageInfo(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle, final com.apple.jobjc.Pointer<java.lang.Integer> packageType, final com.apple.jobjc.Pointer<java.lang.Integer> packageCreator){
			final com.apple.jobjc.Invoke.FunCall CFBundleGetPackageInfo_FxnInst = get_CFBundleGetPackageInfo_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleGetPackageInfo_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, packageType);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, packageCreator);
		CFBundleGetPackageInfo_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleGetPackageInfoInDirectory_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleGetPackageInfoInDirectory_FxnInst(){
		return ((CFBundleGetPackageInfoInDirectory_FxnInst != null)
	? (CFBundleGetPackageInfoInDirectory_FxnInst)
	: (CFBundleGetPackageInfoInDirectory_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleGetPackageInfoInDirectory", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFBundleGetPackageInfoInDirectory(final com.apple.jobjc.corefoundation.CFURLRefCFType url, final com.apple.jobjc.Pointer<java.lang.Integer> packageType, final com.apple.jobjc.Pointer<java.lang.Integer> packageCreator){
			final com.apple.jobjc.Invoke.FunCall CFBundleGetPackageInfoInDirectory_FxnInst = get_CFBundleGetPackageInfoInDirectory_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleGetPackageInfoInDirectory_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, packageType);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, packageCreator);
		CFBundleGetPackageInfoInDirectory_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleGetPlugIn_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleGetPlugIn_FxnInst(){
		return ((CFBundleGetPlugIn_FxnInst != null)
	? (CFBundleGetPlugIn_FxnInst)
	: (CFBundleGetPlugIn_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleGetPlugIn", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFPlugInRefCFType CFBundleGetPlugIn(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle){
			final com.apple.jobjc.Invoke.FunCall CFBundleGetPlugIn_FxnInst = get_CFBundleGetPlugIn_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleGetPlugIn_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		CFBundleGetPlugIn_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFPlugInRefCFType returnValue = (com.apple.jobjc.corefoundation.CFPlugInRefCFType) new com.apple.jobjc.corefoundation.CFPlugInRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleGetTypeID_FxnInst(){
		return ((CFBundleGetTypeID_FxnInst != null)
	? (CFBundleGetTypeID_FxnInst)
	: (CFBundleGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFBundleGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFBundleGetTypeID_FxnInst = get_CFBundleGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleGetTypeID_FxnInst.init(nativeBuffer);
		CFBundleGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleGetValueForInfoDictionaryKey_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleGetValueForInfoDictionaryKey_FxnInst(){
		return ((CFBundleGetValueForInfoDictionaryKey_FxnInst != null)
	? (CFBundleGetValueForInfoDictionaryKey_FxnInst)
	: (CFBundleGetValueForInfoDictionaryKey_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleGetValueForInfoDictionaryKey", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFTypeRefCFType CFBundleGetValueForInfoDictionaryKey(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle, final com.apple.jobjc.corefoundation.CFStringRefCFType key){
			final com.apple.jobjc.Invoke.FunCall CFBundleGetValueForInfoDictionaryKey_FxnInst = get_CFBundleGetValueForInfoDictionaryKey_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleGetValueForInfoDictionaryKey_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, key);
		CFBundleGetValueForInfoDictionaryKey_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFTypeRefCFType returnValue = (com.apple.jobjc.corefoundation.CFTypeRefCFType) new com.apple.jobjc.corefoundation.CFTypeRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleGetVersionNumber_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleGetVersionNumber_FxnInst(){
		return ((CFBundleGetVersionNumber_FxnInst != null)
	? (CFBundleGetVersionNumber_FxnInst)
	: (CFBundleGetVersionNumber_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleGetVersionNumber", com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public int CFBundleGetVersionNumber(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle){
			final com.apple.jobjc.Invoke.FunCall CFBundleGetVersionNumber_FxnInst = get_CFBundleGetVersionNumber_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleGetVersionNumber_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		CFBundleGetVersionNumber_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleIsExecutableLoaded_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleIsExecutableLoaded_FxnInst(){
		return ((CFBundleIsExecutableLoaded_FxnInst != null)
	? (CFBundleIsExecutableLoaded_FxnInst)
	: (CFBundleIsExecutableLoaded_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleIsExecutableLoaded", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFBundleIsExecutableLoaded(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle){
			final com.apple.jobjc.Invoke.FunCall CFBundleIsExecutableLoaded_FxnInst = get_CFBundleIsExecutableLoaded_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleIsExecutableLoaded_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		CFBundleIsExecutableLoaded_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleLoadExecutable_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleLoadExecutable_FxnInst(){
		return ((CFBundleLoadExecutable_FxnInst != null)
	? (CFBundleLoadExecutable_FxnInst)
	: (CFBundleLoadExecutable_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleLoadExecutable", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFBundleLoadExecutable(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle){
			final com.apple.jobjc.Invoke.FunCall CFBundleLoadExecutable_FxnInst = get_CFBundleLoadExecutable_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleLoadExecutable_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		CFBundleLoadExecutable_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleLoadExecutableAndReturnError_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleLoadExecutableAndReturnError_FxnInst(){
		return ((CFBundleLoadExecutableAndReturnError_FxnInst != null)
	? (CFBundleLoadExecutableAndReturnError_FxnInst)
	: (CFBundleLoadExecutableAndReturnError_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleLoadExecutableAndReturnError", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFBundleLoadExecutableAndReturnError(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFErrorRefCFType> error){
			final com.apple.jobjc.Invoke.FunCall CFBundleLoadExecutableAndReturnError_FxnInst = get_CFBundleLoadExecutableAndReturnError_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleLoadExecutableAndReturnError_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, error);
		CFBundleLoadExecutableAndReturnError_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleOpenBundleResourceFiles_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleOpenBundleResourceFiles_FxnInst(){
		return ((CFBundleOpenBundleResourceFiles_FxnInst != null)
	? (CFBundleOpenBundleResourceFiles_FxnInst)
	: (CFBundleOpenBundleResourceFiles_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleOpenBundleResourceFiles", com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public int CFBundleOpenBundleResourceFiles(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle, final com.apple.jobjc.Pointer<java.lang.Integer> refNum, final com.apple.jobjc.Pointer<java.lang.Integer> localizedRefNum){
			final com.apple.jobjc.Invoke.FunCall CFBundleOpenBundleResourceFiles_FxnInst = get_CFBundleOpenBundleResourceFiles_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleOpenBundleResourceFiles_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, refNum);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, localizedRefNum);
		CFBundleOpenBundleResourceFiles_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleOpenBundleResourceMap_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleOpenBundleResourceMap_FxnInst(){
		return ((CFBundleOpenBundleResourceMap_FxnInst != null)
	? (CFBundleOpenBundleResourceMap_FxnInst)
	: (CFBundleOpenBundleResourceMap_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleOpenBundleResourceMap", com.apple.jobjc.MixedPrimitiveCoder.SShortSIntCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public int CFBundleOpenBundleResourceMap(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle){
			final com.apple.jobjc.Invoke.FunCall CFBundleOpenBundleResourceMap_FxnInst = get_CFBundleOpenBundleResourceMap_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleOpenBundleResourceMap_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		CFBundleOpenBundleResourceMap_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.MixedPrimitiveCoder.SShortSIntCoder.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundlePreflightExecutable_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundlePreflightExecutable_FxnInst(){
		return ((CFBundlePreflightExecutable_FxnInst != null)
	? (CFBundlePreflightExecutable_FxnInst)
	: (CFBundlePreflightExecutable_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundlePreflightExecutable", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFBundlePreflightExecutable(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFErrorRefCFType> error){
			final com.apple.jobjc.Invoke.FunCall CFBundlePreflightExecutable_FxnInst = get_CFBundlePreflightExecutable_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundlePreflightExecutable_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, error);
		CFBundlePreflightExecutable_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFBundleUnloadExecutable_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFBundleUnloadExecutable_FxnInst(){
		return ((CFBundleUnloadExecutable_FxnInst != null)
	? (CFBundleUnloadExecutable_FxnInst)
	: (CFBundleUnloadExecutable_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFBundleUnloadExecutable", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFBundleUnloadExecutable(final com.apple.jobjc.corefoundation.CFBundleRefCFType bundle){
			final com.apple.jobjc.Invoke.FunCall CFBundleUnloadExecutable_FxnInst = get_CFBundleUnloadExecutable_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFBundleUnloadExecutable_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bundle);
		CFBundleUnloadExecutable_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFByteOrderGetCurrent_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFByteOrderGetCurrent_FxnInst(){
		return ((CFByteOrderGetCurrent_FxnInst != null)
	? (CFByteOrderGetCurrent_FxnInst)
	: (CFByteOrderGetCurrent_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFByteOrderGetCurrent", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public long CFByteOrderGetCurrent(){
			final com.apple.jobjc.Invoke.FunCall CFByteOrderGetCurrent_FxnInst = get_CFByteOrderGetCurrent_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFByteOrderGetCurrent_FxnInst.init(nativeBuffer);
		CFByteOrderGetCurrent_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	 public boolean CFCalendarAddComponents(final com.apple.jobjc.corefoundation.CFCalendarRefCFType calendar, final com.apple.jobjc.Pointer<java.lang.Double> at, final long options, final com.apple.jobjc.Pointer<java.lang.Byte> componentDesc, final Object... varargs){
		com.apple.jobjc.Coder[] argCoders = new com.apple.jobjc.Coder[4 + varargs.length];
argCoders[0] = com.apple.jobjc.Coder.PointerCoder.INST;
argCoders[1] = com.apple.jobjc.Coder.PointerCoder.INST;
argCoders[2] = com.apple.jobjc.Coder.PointerCoder.INST;
argCoders[3] = com.apple.jobjc.Coder.PointerCoder.INST;
for(int i = 4; i < (4 + varargs.length); i++)
	argCoders[i] = com.apple.jobjc.Coder.getCoderAtRuntime(varargs[i - 4]);
final com.apple.jobjc.Invoke.FunCall CFCalendarAddComponents_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCalendarAddComponents", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, argCoders);
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCalendarAddComponents_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, calendar);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, at);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, options);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, componentDesc);
		for(int i = 4; i < (4 + varargs.length); i++)
			argCoders[i].push(nativeBuffer, varargs[i - 4]);
		CFCalendarAddComponents_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	 public boolean CFCalendarComposeAbsoluteTime(final com.apple.jobjc.corefoundation.CFCalendarRefCFType calendar, final com.apple.jobjc.Pointer<java.lang.Double> at, final com.apple.jobjc.Pointer<java.lang.Byte> componentDesc, final Object... varargs){
		com.apple.jobjc.Coder[] argCoders = new com.apple.jobjc.Coder[3 + varargs.length];
argCoders[0] = com.apple.jobjc.Coder.PointerCoder.INST;
argCoders[1] = com.apple.jobjc.Coder.PointerCoder.INST;
argCoders[2] = com.apple.jobjc.Coder.PointerCoder.INST;
for(int i = 3; i < (3 + varargs.length); i++)
	argCoders[i] = com.apple.jobjc.Coder.getCoderAtRuntime(varargs[i - 3]);
final com.apple.jobjc.Invoke.FunCall CFCalendarComposeAbsoluteTime_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCalendarComposeAbsoluteTime", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, argCoders);
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCalendarComposeAbsoluteTime_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, calendar);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, at);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, componentDesc);
		for(int i = 3; i < (3 + varargs.length); i++)
			argCoders[i].push(nativeBuffer, varargs[i - 3]);
		CFCalendarComposeAbsoluteTime_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCalendarCopyCurrent_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCalendarCopyCurrent_FxnInst(){
		return ((CFCalendarCopyCurrent_FxnInst != null)
	? (CFCalendarCopyCurrent_FxnInst)
	: (CFCalendarCopyCurrent_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCalendarCopyCurrent", com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFCalendarRefCFType CFCalendarCopyCurrent(){
			final com.apple.jobjc.Invoke.FunCall CFCalendarCopyCurrent_FxnInst = get_CFCalendarCopyCurrent_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCalendarCopyCurrent_FxnInst.init(nativeBuffer);
		CFCalendarCopyCurrent_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFCalendarRefCFType returnValue = (com.apple.jobjc.corefoundation.CFCalendarRefCFType) new com.apple.jobjc.corefoundation.CFCalendarRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCalendarCopyLocale_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCalendarCopyLocale_FxnInst(){
		return ((CFCalendarCopyLocale_FxnInst != null)
	? (CFCalendarCopyLocale_FxnInst)
	: (CFCalendarCopyLocale_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCalendarCopyLocale", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFLocaleRefCFType CFCalendarCopyLocale(final com.apple.jobjc.corefoundation.CFCalendarRefCFType calendar){
			final com.apple.jobjc.Invoke.FunCall CFCalendarCopyLocale_FxnInst = get_CFCalendarCopyLocale_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCalendarCopyLocale_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, calendar);
		CFCalendarCopyLocale_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFLocaleRefCFType returnValue = (com.apple.jobjc.corefoundation.CFLocaleRefCFType) new com.apple.jobjc.corefoundation.CFLocaleRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCalendarCopyTimeZone_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCalendarCopyTimeZone_FxnInst(){
		return ((CFCalendarCopyTimeZone_FxnInst != null)
	? (CFCalendarCopyTimeZone_FxnInst)
	: (CFCalendarCopyTimeZone_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCalendarCopyTimeZone", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFTimeZoneRefCFType CFCalendarCopyTimeZone(final com.apple.jobjc.corefoundation.CFCalendarRefCFType calendar){
			final com.apple.jobjc.Invoke.FunCall CFCalendarCopyTimeZone_FxnInst = get_CFCalendarCopyTimeZone_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCalendarCopyTimeZone_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, calendar);
		CFCalendarCopyTimeZone_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFTimeZoneRefCFType returnValue = (com.apple.jobjc.corefoundation.CFTimeZoneRefCFType) new com.apple.jobjc.corefoundation.CFTimeZoneRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCalendarCreateWithIdentifier_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCalendarCreateWithIdentifier_FxnInst(){
		return ((CFCalendarCreateWithIdentifier_FxnInst != null)
	? (CFCalendarCreateWithIdentifier_FxnInst)
	: (CFCalendarCreateWithIdentifier_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCalendarCreateWithIdentifier", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFCalendarRefCFType CFCalendarCreateWithIdentifier(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFStringRefCFType identifier){
			final com.apple.jobjc.Invoke.FunCall CFCalendarCreateWithIdentifier_FxnInst = get_CFCalendarCreateWithIdentifier_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCalendarCreateWithIdentifier_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, identifier);
		CFCalendarCreateWithIdentifier_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFCalendarRefCFType returnValue = (com.apple.jobjc.corefoundation.CFCalendarRefCFType) new com.apple.jobjc.corefoundation.CFCalendarRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	 public boolean CFCalendarDecomposeAbsoluteTime(final com.apple.jobjc.corefoundation.CFCalendarRefCFType calendar, final double at, final com.apple.jobjc.Pointer<java.lang.Byte> componentDesc, final Object... varargs){
		com.apple.jobjc.Coder[] argCoders = new com.apple.jobjc.Coder[3 + varargs.length];
argCoders[0] = com.apple.jobjc.Coder.PointerCoder.INST;
argCoders[1] = com.apple.jobjc.Coder.PointerCoder.INST;
argCoders[2] = com.apple.jobjc.Coder.PointerCoder.INST;
for(int i = 3; i < (3 + varargs.length); i++)
	argCoders[i] = com.apple.jobjc.Coder.getCoderAtRuntime(varargs[i - 3]);
final com.apple.jobjc.Invoke.FunCall CFCalendarDecomposeAbsoluteTime_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCalendarDecomposeAbsoluteTime", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, argCoders);
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCalendarDecomposeAbsoluteTime_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, calendar);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, at);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, componentDesc);
		for(int i = 3; i < (3 + varargs.length); i++)
			argCoders[i].push(nativeBuffer, varargs[i - 3]);
		CFCalendarDecomposeAbsoluteTime_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	 public boolean CFCalendarGetComponentDifference(final com.apple.jobjc.corefoundation.CFCalendarRefCFType calendar, final double startingAT, final double resultAT, final long options, final com.apple.jobjc.Pointer<java.lang.Byte> componentDesc, final Object... varargs){
		com.apple.jobjc.Coder[] argCoders = new com.apple.jobjc.Coder[5 + varargs.length];
argCoders[0] = com.apple.jobjc.Coder.PointerCoder.INST;
argCoders[1] = com.apple.jobjc.Coder.PointerCoder.INST;
argCoders[2] = com.apple.jobjc.Coder.PointerCoder.INST;
argCoders[3] = com.apple.jobjc.Coder.PointerCoder.INST;
argCoders[4] = com.apple.jobjc.Coder.PointerCoder.INST;
for(int i = 5; i < (5 + varargs.length); i++)
	argCoders[i] = com.apple.jobjc.Coder.getCoderAtRuntime(varargs[i - 5]);
final com.apple.jobjc.Invoke.FunCall CFCalendarGetComponentDifference_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCalendarGetComponentDifference", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, argCoders);
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCalendarGetComponentDifference_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, calendar);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, startingAT);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, resultAT);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, options);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, componentDesc);
		for(int i = 5; i < (5 + varargs.length); i++)
			argCoders[i].push(nativeBuffer, varargs[i - 5]);
		CFCalendarGetComponentDifference_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCalendarGetFirstWeekday_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCalendarGetFirstWeekday_FxnInst(){
		return ((CFCalendarGetFirstWeekday_FxnInst != null)
	? (CFCalendarGetFirstWeekday_FxnInst)
	: (CFCalendarGetFirstWeekday_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCalendarGetFirstWeekday", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFCalendarGetFirstWeekday(final com.apple.jobjc.corefoundation.CFCalendarRefCFType calendar){
			final com.apple.jobjc.Invoke.FunCall CFCalendarGetFirstWeekday_FxnInst = get_CFCalendarGetFirstWeekday_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCalendarGetFirstWeekday_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, calendar);
		CFCalendarGetFirstWeekday_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCalendarGetIdentifier_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCalendarGetIdentifier_FxnInst(){
		return ((CFCalendarGetIdentifier_FxnInst != null)
	? (CFCalendarGetIdentifier_FxnInst)
	: (CFCalendarGetIdentifier_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCalendarGetIdentifier", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFCalendarGetIdentifier(final com.apple.jobjc.corefoundation.CFCalendarRefCFType calendar){
			final com.apple.jobjc.Invoke.FunCall CFCalendarGetIdentifier_FxnInst = get_CFCalendarGetIdentifier_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCalendarGetIdentifier_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, calendar);
		CFCalendarGetIdentifier_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCalendarGetMaximumRangeOfUnit_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCalendarGetMaximumRangeOfUnit_FxnInst(){
		return ((CFCalendarGetMaximumRangeOfUnit_FxnInst != null)
	? (CFCalendarGetMaximumRangeOfUnit_FxnInst)
	: (CFCalendarGetMaximumRangeOfUnit_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCalendarGetMaximumRangeOfUnit", com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFRange CFCalendarGetMaximumRangeOfUnit(final com.apple.jobjc.corefoundation.CFCalendarRefCFType calendar, final long unit){
			final com.apple.jobjc.Invoke.FunCall CFCalendarGetMaximumRangeOfUnit_FxnInst = get_CFCalendarGetMaximumRangeOfUnit_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCalendarGetMaximumRangeOfUnit_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, calendar);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, unit);
				com.apple.jobjc.corefoundation.CFRange returnValue = com.apple.jobjc.JObjC.getInstance(getRuntime()).CoreFoundation().makeCFRange();
		CFCalendarGetMaximumRangeOfUnit_FxnInst.invoke(nativeBuffer, returnValue);
		
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCalendarGetMinimumDaysInFirstWeek_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCalendarGetMinimumDaysInFirstWeek_FxnInst(){
		return ((CFCalendarGetMinimumDaysInFirstWeek_FxnInst != null)
	? (CFCalendarGetMinimumDaysInFirstWeek_FxnInst)
	: (CFCalendarGetMinimumDaysInFirstWeek_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCalendarGetMinimumDaysInFirstWeek", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFCalendarGetMinimumDaysInFirstWeek(final com.apple.jobjc.corefoundation.CFCalendarRefCFType calendar){
			final com.apple.jobjc.Invoke.FunCall CFCalendarGetMinimumDaysInFirstWeek_FxnInst = get_CFCalendarGetMinimumDaysInFirstWeek_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCalendarGetMinimumDaysInFirstWeek_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, calendar);
		CFCalendarGetMinimumDaysInFirstWeek_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCalendarGetMinimumRangeOfUnit_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCalendarGetMinimumRangeOfUnit_FxnInst(){
		return ((CFCalendarGetMinimumRangeOfUnit_FxnInst != null)
	? (CFCalendarGetMinimumRangeOfUnit_FxnInst)
	: (CFCalendarGetMinimumRangeOfUnit_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCalendarGetMinimumRangeOfUnit", com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFRange CFCalendarGetMinimumRangeOfUnit(final com.apple.jobjc.corefoundation.CFCalendarRefCFType calendar, final long unit){
			final com.apple.jobjc.Invoke.FunCall CFCalendarGetMinimumRangeOfUnit_FxnInst = get_CFCalendarGetMinimumRangeOfUnit_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCalendarGetMinimumRangeOfUnit_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, calendar);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, unit);
				com.apple.jobjc.corefoundation.CFRange returnValue = com.apple.jobjc.JObjC.getInstance(getRuntime()).CoreFoundation().makeCFRange();
		CFCalendarGetMinimumRangeOfUnit_FxnInst.invoke(nativeBuffer, returnValue);
		
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCalendarGetOrdinalityOfUnit_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCalendarGetOrdinalityOfUnit_FxnInst(){
		return ((CFCalendarGetOrdinalityOfUnit_FxnInst != null)
	? (CFCalendarGetOrdinalityOfUnit_FxnInst)
	: (CFCalendarGetOrdinalityOfUnit_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCalendarGetOrdinalityOfUnit", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST)));
	}

	 public long CFCalendarGetOrdinalityOfUnit(final com.apple.jobjc.corefoundation.CFCalendarRefCFType calendar, final long smallerUnit, final long biggerUnit, final double at){
			final com.apple.jobjc.Invoke.FunCall CFCalendarGetOrdinalityOfUnit_FxnInst = get_CFCalendarGetOrdinalityOfUnit_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCalendarGetOrdinalityOfUnit_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, calendar);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, smallerUnit);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, biggerUnit);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, at);
		CFCalendarGetOrdinalityOfUnit_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCalendarGetRangeOfUnit_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCalendarGetRangeOfUnit_FxnInst(){
		return ((CFCalendarGetRangeOfUnit_FxnInst != null)
	? (CFCalendarGetRangeOfUnit_FxnInst)
	: (CFCalendarGetRangeOfUnit_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCalendarGetRangeOfUnit", com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFRange CFCalendarGetRangeOfUnit(final com.apple.jobjc.corefoundation.CFCalendarRefCFType calendar, final long smallerUnit, final long biggerUnit, final double at){
			final com.apple.jobjc.Invoke.FunCall CFCalendarGetRangeOfUnit_FxnInst = get_CFCalendarGetRangeOfUnit_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCalendarGetRangeOfUnit_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, calendar);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, smallerUnit);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, biggerUnit);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, at);
				com.apple.jobjc.corefoundation.CFRange returnValue = com.apple.jobjc.JObjC.getInstance(getRuntime()).CoreFoundation().makeCFRange();
		CFCalendarGetRangeOfUnit_FxnInst.invoke(nativeBuffer, returnValue);
		
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCalendarGetTimeRangeOfUnit_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCalendarGetTimeRangeOfUnit_FxnInst(){
		return ((CFCalendarGetTimeRangeOfUnit_FxnInst != null)
	? (CFCalendarGetTimeRangeOfUnit_FxnInst)
	: (CFCalendarGetTimeRangeOfUnit_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCalendarGetTimeRangeOfUnit", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFCalendarGetTimeRangeOfUnit(final com.apple.jobjc.corefoundation.CFCalendarRefCFType calendar, final long unit, final double at, final com.apple.jobjc.Pointer<java.lang.Double> startp, final com.apple.jobjc.Pointer<java.lang.Double> tip){
			final com.apple.jobjc.Invoke.FunCall CFCalendarGetTimeRangeOfUnit_FxnInst = get_CFCalendarGetTimeRangeOfUnit_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCalendarGetTimeRangeOfUnit_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, calendar);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, unit);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, at);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, startp);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tip);
		CFCalendarGetTimeRangeOfUnit_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCalendarGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCalendarGetTypeID_FxnInst(){
		return ((CFCalendarGetTypeID_FxnInst != null)
	? (CFCalendarGetTypeID_FxnInst)
	: (CFCalendarGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCalendarGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFCalendarGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFCalendarGetTypeID_FxnInst = get_CFCalendarGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCalendarGetTypeID_FxnInst.init(nativeBuffer);
		CFCalendarGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCalendarSetFirstWeekday_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCalendarSetFirstWeekday_FxnInst(){
		return ((CFCalendarSetFirstWeekday_FxnInst != null)
	? (CFCalendarSetFirstWeekday_FxnInst)
	: (CFCalendarSetFirstWeekday_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCalendarSetFirstWeekday", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public void CFCalendarSetFirstWeekday(final com.apple.jobjc.corefoundation.CFCalendarRefCFType calendar, final long wkdy){
			final com.apple.jobjc.Invoke.FunCall CFCalendarSetFirstWeekday_FxnInst = get_CFCalendarSetFirstWeekday_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCalendarSetFirstWeekday_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, calendar);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, wkdy);
		CFCalendarSetFirstWeekday_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFCalendarSetLocale_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCalendarSetLocale_FxnInst(){
		return ((CFCalendarSetLocale_FxnInst != null)
	? (CFCalendarSetLocale_FxnInst)
	: (CFCalendarSetLocale_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCalendarSetLocale", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFCalendarSetLocale(final com.apple.jobjc.corefoundation.CFCalendarRefCFType calendar, final com.apple.jobjc.corefoundation.CFLocaleRefCFType locale){
			final com.apple.jobjc.Invoke.FunCall CFCalendarSetLocale_FxnInst = get_CFCalendarSetLocale_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCalendarSetLocale_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, calendar);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, locale);
		CFCalendarSetLocale_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFCalendarSetMinimumDaysInFirstWeek_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCalendarSetMinimumDaysInFirstWeek_FxnInst(){
		return ((CFCalendarSetMinimumDaysInFirstWeek_FxnInst != null)
	? (CFCalendarSetMinimumDaysInFirstWeek_FxnInst)
	: (CFCalendarSetMinimumDaysInFirstWeek_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCalendarSetMinimumDaysInFirstWeek", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public void CFCalendarSetMinimumDaysInFirstWeek(final com.apple.jobjc.corefoundation.CFCalendarRefCFType calendar, final long mwd){
			final com.apple.jobjc.Invoke.FunCall CFCalendarSetMinimumDaysInFirstWeek_FxnInst = get_CFCalendarSetMinimumDaysInFirstWeek_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCalendarSetMinimumDaysInFirstWeek_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, calendar);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, mwd);
		CFCalendarSetMinimumDaysInFirstWeek_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFCalendarSetTimeZone_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCalendarSetTimeZone_FxnInst(){
		return ((CFCalendarSetTimeZone_FxnInst != null)
	? (CFCalendarSetTimeZone_FxnInst)
	: (CFCalendarSetTimeZone_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCalendarSetTimeZone", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFCalendarSetTimeZone(final com.apple.jobjc.corefoundation.CFCalendarRefCFType calendar, final com.apple.jobjc.corefoundation.CFTimeZoneRefCFType tz){
			final com.apple.jobjc.Invoke.FunCall CFCalendarSetTimeZone_FxnInst = get_CFCalendarSetTimeZone_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCalendarSetTimeZone_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, calendar);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tz);
		CFCalendarSetTimeZone_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFCharacterSetAddCharactersInRange_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCharacterSetAddCharactersInRange_FxnInst(){
		return ((CFCharacterSetAddCharactersInRange_FxnInst != null)
	? (CFCharacterSetAddCharactersInRange_FxnInst)
	: (CFCharacterSetAddCharactersInRange_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCharacterSetAddCharactersInRange", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder())));
	}

	 public void CFCharacterSetAddCharactersInRange(final com.apple.jobjc.corefoundation.CFMutableCharacterSetRefCFType theSet, final com.apple.jobjc.corefoundation.CFRange theRange){
			final com.apple.jobjc.Invoke.FunCall CFCharacterSetAddCharactersInRange_FxnInst = get_CFCharacterSetAddCharactersInRange_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCharacterSetAddCharactersInRange_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, theRange);
		CFCharacterSetAddCharactersInRange_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFCharacterSetAddCharactersInString_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCharacterSetAddCharactersInString_FxnInst(){
		return ((CFCharacterSetAddCharactersInString_FxnInst != null)
	? (CFCharacterSetAddCharactersInString_FxnInst)
	: (CFCharacterSetAddCharactersInString_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCharacterSetAddCharactersInString", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFCharacterSetAddCharactersInString(final com.apple.jobjc.corefoundation.CFMutableCharacterSetRefCFType theSet, final com.apple.jobjc.corefoundation.CFStringRefCFType theString){
			final com.apple.jobjc.Invoke.FunCall CFCharacterSetAddCharactersInString_FxnInst = get_CFCharacterSetAddCharactersInString_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCharacterSetAddCharactersInString_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		CFCharacterSetAddCharactersInString_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFCharacterSetCreateBitmapRepresentation_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCharacterSetCreateBitmapRepresentation_FxnInst(){
		return ((CFCharacterSetCreateBitmapRepresentation_FxnInst != null)
	? (CFCharacterSetCreateBitmapRepresentation_FxnInst)
	: (CFCharacterSetCreateBitmapRepresentation_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCharacterSetCreateBitmapRepresentation", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDataRefCFType CFCharacterSetCreateBitmapRepresentation(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFCharacterSetRefCFType theSet){
			final com.apple.jobjc.Invoke.FunCall CFCharacterSetCreateBitmapRepresentation_FxnInst = get_CFCharacterSetCreateBitmapRepresentation_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCharacterSetCreateBitmapRepresentation_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		CFCharacterSetCreateBitmapRepresentation_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDataRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDataRefCFType) new com.apple.jobjc.corefoundation.CFDataRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCharacterSetCreateCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCharacterSetCreateCopy_FxnInst(){
		return ((CFCharacterSetCreateCopy_FxnInst != null)
	? (CFCharacterSetCreateCopy_FxnInst)
	: (CFCharacterSetCreateCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCharacterSetCreateCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFCharacterSetRefCFType CFCharacterSetCreateCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFCharacterSetRefCFType theSet){
			final com.apple.jobjc.Invoke.FunCall CFCharacterSetCreateCopy_FxnInst = get_CFCharacterSetCreateCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCharacterSetCreateCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		CFCharacterSetCreateCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFCharacterSetRefCFType returnValue = (com.apple.jobjc.corefoundation.CFCharacterSetRefCFType) new com.apple.jobjc.corefoundation.CFCharacterSetRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCharacterSetCreateInvertedSet_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCharacterSetCreateInvertedSet_FxnInst(){
		return ((CFCharacterSetCreateInvertedSet_FxnInst != null)
	? (CFCharacterSetCreateInvertedSet_FxnInst)
	: (CFCharacterSetCreateInvertedSet_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCharacterSetCreateInvertedSet", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFCharacterSetRefCFType CFCharacterSetCreateInvertedSet(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFCharacterSetRefCFType theSet){
			final com.apple.jobjc.Invoke.FunCall CFCharacterSetCreateInvertedSet_FxnInst = get_CFCharacterSetCreateInvertedSet_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCharacterSetCreateInvertedSet_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		CFCharacterSetCreateInvertedSet_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFCharacterSetRefCFType returnValue = (com.apple.jobjc.corefoundation.CFCharacterSetRefCFType) new com.apple.jobjc.corefoundation.CFCharacterSetRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCharacterSetCreateMutable_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCharacterSetCreateMutable_FxnInst(){
		return ((CFCharacterSetCreateMutable_FxnInst != null)
	? (CFCharacterSetCreateMutable_FxnInst)
	: (CFCharacterSetCreateMutable_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCharacterSetCreateMutable", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFMutableCharacterSetRefCFType CFCharacterSetCreateMutable(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc){
			final com.apple.jobjc.Invoke.FunCall CFCharacterSetCreateMutable_FxnInst = get_CFCharacterSetCreateMutable_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCharacterSetCreateMutable_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		CFCharacterSetCreateMutable_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFMutableCharacterSetRefCFType returnValue = (com.apple.jobjc.corefoundation.CFMutableCharacterSetRefCFType) new com.apple.jobjc.corefoundation.CFMutableCharacterSetRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCharacterSetCreateMutableCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCharacterSetCreateMutableCopy_FxnInst(){
		return ((CFCharacterSetCreateMutableCopy_FxnInst != null)
	? (CFCharacterSetCreateMutableCopy_FxnInst)
	: (CFCharacterSetCreateMutableCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCharacterSetCreateMutableCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFMutableCharacterSetRefCFType CFCharacterSetCreateMutableCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFCharacterSetRefCFType theSet){
			final com.apple.jobjc.Invoke.FunCall CFCharacterSetCreateMutableCopy_FxnInst = get_CFCharacterSetCreateMutableCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCharacterSetCreateMutableCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		CFCharacterSetCreateMutableCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFMutableCharacterSetRefCFType returnValue = (com.apple.jobjc.corefoundation.CFMutableCharacterSetRefCFType) new com.apple.jobjc.corefoundation.CFMutableCharacterSetRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCharacterSetCreateWithBitmapRepresentation_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCharacterSetCreateWithBitmapRepresentation_FxnInst(){
		return ((CFCharacterSetCreateWithBitmapRepresentation_FxnInst != null)
	? (CFCharacterSetCreateWithBitmapRepresentation_FxnInst)
	: (CFCharacterSetCreateWithBitmapRepresentation_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCharacterSetCreateWithBitmapRepresentation", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFCharacterSetRefCFType CFCharacterSetCreateWithBitmapRepresentation(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFDataRefCFType theData){
			final com.apple.jobjc.Invoke.FunCall CFCharacterSetCreateWithBitmapRepresentation_FxnInst = get_CFCharacterSetCreateWithBitmapRepresentation_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCharacterSetCreateWithBitmapRepresentation_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theData);
		CFCharacterSetCreateWithBitmapRepresentation_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFCharacterSetRefCFType returnValue = (com.apple.jobjc.corefoundation.CFCharacterSetRefCFType) new com.apple.jobjc.corefoundation.CFCharacterSetRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCharacterSetCreateWithCharactersInRange_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCharacterSetCreateWithCharactersInRange_FxnInst(){
		return ((CFCharacterSetCreateWithCharactersInRange_FxnInst != null)
	? (CFCharacterSetCreateWithCharactersInRange_FxnInst)
	: (CFCharacterSetCreateWithCharactersInRange_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCharacterSetCreateWithCharactersInRange", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder())));
	}

	 public com.apple.jobjc.corefoundation.CFCharacterSetRefCFType CFCharacterSetCreateWithCharactersInRange(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFRange theRange){
			final com.apple.jobjc.Invoke.FunCall CFCharacterSetCreateWithCharactersInRange_FxnInst = get_CFCharacterSetCreateWithCharactersInRange_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCharacterSetCreateWithCharactersInRange_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, theRange);
		CFCharacterSetCreateWithCharactersInRange_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFCharacterSetRefCFType returnValue = (com.apple.jobjc.corefoundation.CFCharacterSetRefCFType) new com.apple.jobjc.corefoundation.CFCharacterSetRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCharacterSetCreateWithCharactersInString_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCharacterSetCreateWithCharactersInString_FxnInst(){
		return ((CFCharacterSetCreateWithCharactersInString_FxnInst != null)
	? (CFCharacterSetCreateWithCharactersInString_FxnInst)
	: (CFCharacterSetCreateWithCharactersInString_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCharacterSetCreateWithCharactersInString", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFCharacterSetRefCFType CFCharacterSetCreateWithCharactersInString(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFStringRefCFType theString){
			final com.apple.jobjc.Invoke.FunCall CFCharacterSetCreateWithCharactersInString_FxnInst = get_CFCharacterSetCreateWithCharactersInString_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCharacterSetCreateWithCharactersInString_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		CFCharacterSetCreateWithCharactersInString_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFCharacterSetRefCFType returnValue = (com.apple.jobjc.corefoundation.CFCharacterSetRefCFType) new com.apple.jobjc.corefoundation.CFCharacterSetRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCharacterSetGetPredefined_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCharacterSetGetPredefined_FxnInst(){
		return ((CFCharacterSetGetPredefined_FxnInst != null)
	? (CFCharacterSetGetPredefined_FxnInst)
	: (CFCharacterSetGetPredefined_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCharacterSetGetPredefined", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFCharacterSetRefCFType CFCharacterSetGetPredefined(final long theSetIdentifier){
			final com.apple.jobjc.Invoke.FunCall CFCharacterSetGetPredefined_FxnInst = get_CFCharacterSetGetPredefined_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCharacterSetGetPredefined_FxnInst.init(nativeBuffer);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, theSetIdentifier);
		CFCharacterSetGetPredefined_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFCharacterSetRefCFType returnValue = (com.apple.jobjc.corefoundation.CFCharacterSetRefCFType) new com.apple.jobjc.corefoundation.CFCharacterSetRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCharacterSetGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCharacterSetGetTypeID_FxnInst(){
		return ((CFCharacterSetGetTypeID_FxnInst != null)
	? (CFCharacterSetGetTypeID_FxnInst)
	: (CFCharacterSetGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCharacterSetGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFCharacterSetGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFCharacterSetGetTypeID_FxnInst = get_CFCharacterSetGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCharacterSetGetTypeID_FxnInst.init(nativeBuffer);
		CFCharacterSetGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCharacterSetHasMemberInPlane_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCharacterSetHasMemberInPlane_FxnInst(){
		return ((CFCharacterSetHasMemberInPlane_FxnInst != null)
	? (CFCharacterSetHasMemberInPlane_FxnInst)
	: (CFCharacterSetHasMemberInPlane_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCharacterSetHasMemberInPlane", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public boolean CFCharacterSetHasMemberInPlane(final com.apple.jobjc.corefoundation.CFCharacterSetRefCFType theSet, final long thePlane){
			final com.apple.jobjc.Invoke.FunCall CFCharacterSetHasMemberInPlane_FxnInst = get_CFCharacterSetHasMemberInPlane_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCharacterSetHasMemberInPlane_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, thePlane);
		CFCharacterSetHasMemberInPlane_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCharacterSetIntersect_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCharacterSetIntersect_FxnInst(){
		return ((CFCharacterSetIntersect_FxnInst != null)
	? (CFCharacterSetIntersect_FxnInst)
	: (CFCharacterSetIntersect_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCharacterSetIntersect", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFCharacterSetIntersect(final com.apple.jobjc.corefoundation.CFMutableCharacterSetRefCFType theSet, final com.apple.jobjc.corefoundation.CFCharacterSetRefCFType theOtherSet){
			final com.apple.jobjc.Invoke.FunCall CFCharacterSetIntersect_FxnInst = get_CFCharacterSetIntersect_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCharacterSetIntersect_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theOtherSet);
		CFCharacterSetIntersect_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFCharacterSetInvert_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCharacterSetInvert_FxnInst(){
		return ((CFCharacterSetInvert_FxnInst != null)
	? (CFCharacterSetInvert_FxnInst)
	: (CFCharacterSetInvert_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCharacterSetInvert", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFCharacterSetInvert(final com.apple.jobjc.corefoundation.CFMutableCharacterSetRefCFType theSet){
			final com.apple.jobjc.Invoke.FunCall CFCharacterSetInvert_FxnInst = get_CFCharacterSetInvert_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCharacterSetInvert_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		CFCharacterSetInvert_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFCharacterSetIsCharacterMember_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCharacterSetIsCharacterMember_FxnInst(){
		return ((CFCharacterSetIsCharacterMember_FxnInst != null)
	? (CFCharacterSetIsCharacterMember_FxnInst)
	: (CFCharacterSetIsCharacterMember_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCharacterSetIsCharacterMember", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.UShortCoder.INST)));
	}

	 public boolean CFCharacterSetIsCharacterMember(final com.apple.jobjc.corefoundation.CFCharacterSetRefCFType theSet, final short theChar){
			final com.apple.jobjc.Invoke.FunCall CFCharacterSetIsCharacterMember_FxnInst = get_CFCharacterSetIsCharacterMember_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCharacterSetIsCharacterMember_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		com.apple.jobjc.PrimitiveCoder.UShortCoder.INST.push(nativeBuffer, theChar);
		CFCharacterSetIsCharacterMember_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCharacterSetIsLongCharacterMember_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCharacterSetIsLongCharacterMember_FxnInst(){
		return ((CFCharacterSetIsLongCharacterMember_FxnInst != null)
	? (CFCharacterSetIsLongCharacterMember_FxnInst)
	: (CFCharacterSetIsLongCharacterMember_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCharacterSetIsLongCharacterMember", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder)));
	}

	 public boolean CFCharacterSetIsLongCharacterMember(final com.apple.jobjc.corefoundation.CFCharacterSetRefCFType theSet, final int theChar){
			final com.apple.jobjc.Invoke.FunCall CFCharacterSetIsLongCharacterMember_FxnInst = get_CFCharacterSetIsLongCharacterMember_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCharacterSetIsLongCharacterMember_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, theChar);
		CFCharacterSetIsLongCharacterMember_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCharacterSetIsSupersetOfSet_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCharacterSetIsSupersetOfSet_FxnInst(){
		return ((CFCharacterSetIsSupersetOfSet_FxnInst != null)
	? (CFCharacterSetIsSupersetOfSet_FxnInst)
	: (CFCharacterSetIsSupersetOfSet_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCharacterSetIsSupersetOfSet", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFCharacterSetIsSupersetOfSet(final com.apple.jobjc.corefoundation.CFCharacterSetRefCFType theSet, final com.apple.jobjc.corefoundation.CFCharacterSetRefCFType theOtherset){
			final com.apple.jobjc.Invoke.FunCall CFCharacterSetIsSupersetOfSet_FxnInst = get_CFCharacterSetIsSupersetOfSet_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCharacterSetIsSupersetOfSet_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theOtherset);
		CFCharacterSetIsSupersetOfSet_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCharacterSetRemoveCharactersInRange_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCharacterSetRemoveCharactersInRange_FxnInst(){
		return ((CFCharacterSetRemoveCharactersInRange_FxnInst != null)
	? (CFCharacterSetRemoveCharactersInRange_FxnInst)
	: (CFCharacterSetRemoveCharactersInRange_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCharacterSetRemoveCharactersInRange", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder())));
	}

	 public void CFCharacterSetRemoveCharactersInRange(final com.apple.jobjc.corefoundation.CFMutableCharacterSetRefCFType theSet, final com.apple.jobjc.corefoundation.CFRange theRange){
			final com.apple.jobjc.Invoke.FunCall CFCharacterSetRemoveCharactersInRange_FxnInst = get_CFCharacterSetRemoveCharactersInRange_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCharacterSetRemoveCharactersInRange_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, theRange);
		CFCharacterSetRemoveCharactersInRange_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFCharacterSetRemoveCharactersInString_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCharacterSetRemoveCharactersInString_FxnInst(){
		return ((CFCharacterSetRemoveCharactersInString_FxnInst != null)
	? (CFCharacterSetRemoveCharactersInString_FxnInst)
	: (CFCharacterSetRemoveCharactersInString_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCharacterSetRemoveCharactersInString", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFCharacterSetRemoveCharactersInString(final com.apple.jobjc.corefoundation.CFMutableCharacterSetRefCFType theSet, final com.apple.jobjc.corefoundation.CFStringRefCFType theString){
			final com.apple.jobjc.Invoke.FunCall CFCharacterSetRemoveCharactersInString_FxnInst = get_CFCharacterSetRemoveCharactersInString_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCharacterSetRemoveCharactersInString_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		CFCharacterSetRemoveCharactersInString_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFCharacterSetUnion_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCharacterSetUnion_FxnInst(){
		return ((CFCharacterSetUnion_FxnInst != null)
	? (CFCharacterSetUnion_FxnInst)
	: (CFCharacterSetUnion_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCharacterSetUnion", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFCharacterSetUnion(final com.apple.jobjc.corefoundation.CFMutableCharacterSetRefCFType theSet, final com.apple.jobjc.corefoundation.CFCharacterSetRefCFType theOtherSet){
			final com.apple.jobjc.Invoke.FunCall CFCharacterSetUnion_FxnInst = get_CFCharacterSetUnion_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCharacterSetUnion_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theOtherSet);
		CFCharacterSetUnion_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFConvertDoubleHostToSwapped_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFConvertDoubleHostToSwapped_FxnInst(){
		return ((CFConvertDoubleHostToSwapped_FxnInst != null)
	? (CFConvertDoubleHostToSwapped_FxnInst)
	: (CFConvertDoubleHostToSwapped_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFConvertDoubleHostToSwapped", com.apple.jobjc.corefoundation.CFSwappedFloat64.getStructCoder(), com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFSwappedFloat64 CFConvertDoubleHostToSwapped(final double arg){
			final com.apple.jobjc.Invoke.FunCall CFConvertDoubleHostToSwapped_FxnInst = get_CFConvertDoubleHostToSwapped_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFConvertDoubleHostToSwapped_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, arg);
				com.apple.jobjc.corefoundation.CFSwappedFloat64 returnValue = com.apple.jobjc.JObjC.getInstance(getRuntime()).CoreFoundation().makeCFSwappedFloat64();
		CFConvertDoubleHostToSwapped_FxnInst.invoke(nativeBuffer, returnValue);
		
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFConvertDoubleSwappedToHost_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFConvertDoubleSwappedToHost_FxnInst(){
		return ((CFConvertDoubleSwappedToHost_FxnInst != null)
	? (CFConvertDoubleSwappedToHost_FxnInst)
	: (CFConvertDoubleSwappedToHost_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFConvertDoubleSwappedToHost", com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.corefoundation.CFSwappedFloat64.getStructCoder())));
	}

	 public double CFConvertDoubleSwappedToHost(final com.apple.jobjc.corefoundation.CFSwappedFloat64 arg){
			final com.apple.jobjc.Invoke.FunCall CFConvertDoubleSwappedToHost_FxnInst = get_CFConvertDoubleSwappedToHost_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFConvertDoubleSwappedToHost_FxnInst.init(nativeBuffer);
		com.apple.jobjc.corefoundation.CFSwappedFloat64.getStructCoder().push(nativeBuffer, arg);
		CFConvertDoubleSwappedToHost_FxnInst.invoke(nativeBuffer);
		final double returnValue = (double) (com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.popDouble(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFConvertFloat32HostToSwapped_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFConvertFloat32HostToSwapped_FxnInst(){
		return ((CFConvertFloat32HostToSwapped_FxnInst != null)
	? (CFConvertFloat32HostToSwapped_FxnInst)
	: (CFConvertFloat32HostToSwapped_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFConvertFloat32HostToSwapped", com.apple.jobjc.corefoundation.CFSwappedFloat32.getStructCoder(), com.apple.jobjc.PrimitiveCoder.FloatCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFSwappedFloat32 CFConvertFloat32HostToSwapped(final float arg){
			final com.apple.jobjc.Invoke.FunCall CFConvertFloat32HostToSwapped_FxnInst = get_CFConvertFloat32HostToSwapped_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFConvertFloat32HostToSwapped_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.FloatCoder.INST.push(nativeBuffer, arg);
				com.apple.jobjc.corefoundation.CFSwappedFloat32 returnValue = com.apple.jobjc.JObjC.getInstance(getRuntime()).CoreFoundation().makeCFSwappedFloat32();
		CFConvertFloat32HostToSwapped_FxnInst.invoke(nativeBuffer, returnValue);
		
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFConvertFloat32SwappedToHost_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFConvertFloat32SwappedToHost_FxnInst(){
		return ((CFConvertFloat32SwappedToHost_FxnInst != null)
	? (CFConvertFloat32SwappedToHost_FxnInst)
	: (CFConvertFloat32SwappedToHost_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFConvertFloat32SwappedToHost", com.apple.jobjc.PrimitiveCoder.FloatCoder.INST, com.apple.jobjc.corefoundation.CFSwappedFloat32.getStructCoder())));
	}

	 public float CFConvertFloat32SwappedToHost(final com.apple.jobjc.corefoundation.CFSwappedFloat32 arg){
			final com.apple.jobjc.Invoke.FunCall CFConvertFloat32SwappedToHost_FxnInst = get_CFConvertFloat32SwappedToHost_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFConvertFloat32SwappedToHost_FxnInst.init(nativeBuffer);
		com.apple.jobjc.corefoundation.CFSwappedFloat32.getStructCoder().push(nativeBuffer, arg);
		CFConvertFloat32SwappedToHost_FxnInst.invoke(nativeBuffer);
		final float returnValue = (float) (com.apple.jobjc.PrimitiveCoder.FloatCoder.INST.popFloat(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFConvertFloat64HostToSwapped_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFConvertFloat64HostToSwapped_FxnInst(){
		return ((CFConvertFloat64HostToSwapped_FxnInst != null)
	? (CFConvertFloat64HostToSwapped_FxnInst)
	: (CFConvertFloat64HostToSwapped_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFConvertFloat64HostToSwapped", com.apple.jobjc.corefoundation.CFSwappedFloat64.getStructCoder(), com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFSwappedFloat64 CFConvertFloat64HostToSwapped(final double arg){
			final com.apple.jobjc.Invoke.FunCall CFConvertFloat64HostToSwapped_FxnInst = get_CFConvertFloat64HostToSwapped_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFConvertFloat64HostToSwapped_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, arg);
				com.apple.jobjc.corefoundation.CFSwappedFloat64 returnValue = com.apple.jobjc.JObjC.getInstance(getRuntime()).CoreFoundation().makeCFSwappedFloat64();
		CFConvertFloat64HostToSwapped_FxnInst.invoke(nativeBuffer, returnValue);
		
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFConvertFloat64SwappedToHost_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFConvertFloat64SwappedToHost_FxnInst(){
		return ((CFConvertFloat64SwappedToHost_FxnInst != null)
	? (CFConvertFloat64SwappedToHost_FxnInst)
	: (CFConvertFloat64SwappedToHost_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFConvertFloat64SwappedToHost", com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.corefoundation.CFSwappedFloat64.getStructCoder())));
	}

	 public double CFConvertFloat64SwappedToHost(final com.apple.jobjc.corefoundation.CFSwappedFloat64 arg){
			final com.apple.jobjc.Invoke.FunCall CFConvertFloat64SwappedToHost_FxnInst = get_CFConvertFloat64SwappedToHost_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFConvertFloat64SwappedToHost_FxnInst.init(nativeBuffer);
		com.apple.jobjc.corefoundation.CFSwappedFloat64.getStructCoder().push(nativeBuffer, arg);
		CFConvertFloat64SwappedToHost_FxnInst.invoke(nativeBuffer);
		final double returnValue = (double) (com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.popDouble(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFConvertFloatHostToSwapped_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFConvertFloatHostToSwapped_FxnInst(){
		return ((CFConvertFloatHostToSwapped_FxnInst != null)
	? (CFConvertFloatHostToSwapped_FxnInst)
	: (CFConvertFloatHostToSwapped_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFConvertFloatHostToSwapped", com.apple.jobjc.corefoundation.CFSwappedFloat32.getStructCoder(), com.apple.jobjc.PrimitiveCoder.FloatCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFSwappedFloat32 CFConvertFloatHostToSwapped(final float arg){
			final com.apple.jobjc.Invoke.FunCall CFConvertFloatHostToSwapped_FxnInst = get_CFConvertFloatHostToSwapped_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFConvertFloatHostToSwapped_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.FloatCoder.INST.push(nativeBuffer, arg);
				com.apple.jobjc.corefoundation.CFSwappedFloat32 returnValue = com.apple.jobjc.JObjC.getInstance(getRuntime()).CoreFoundation().makeCFSwappedFloat32();
		CFConvertFloatHostToSwapped_FxnInst.invoke(nativeBuffer, returnValue);
		
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFConvertFloatSwappedToHost_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFConvertFloatSwappedToHost_FxnInst(){
		return ((CFConvertFloatSwappedToHost_FxnInst != null)
	? (CFConvertFloatSwappedToHost_FxnInst)
	: (CFConvertFloatSwappedToHost_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFConvertFloatSwappedToHost", com.apple.jobjc.PrimitiveCoder.FloatCoder.INST, com.apple.jobjc.corefoundation.CFSwappedFloat32.getStructCoder())));
	}

	 public float CFConvertFloatSwappedToHost(final com.apple.jobjc.corefoundation.CFSwappedFloat32 arg){
			final com.apple.jobjc.Invoke.FunCall CFConvertFloatSwappedToHost_FxnInst = get_CFConvertFloatSwappedToHost_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFConvertFloatSwappedToHost_FxnInst.init(nativeBuffer);
		com.apple.jobjc.corefoundation.CFSwappedFloat32.getStructCoder().push(nativeBuffer, arg);
		CFConvertFloatSwappedToHost_FxnInst.invoke(nativeBuffer);
		final float returnValue = (float) (com.apple.jobjc.PrimitiveCoder.FloatCoder.INST.popFloat(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCopyDescription_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCopyDescription_FxnInst(){
		return ((CFCopyDescription_FxnInst != null)
	? (CFCopyDescription_FxnInst)
	: (CFCopyDescription_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCopyDescription", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFCopyDescription(final com.apple.jobjc.corefoundation.CFTypeRefCFType cf){
			final com.apple.jobjc.Invoke.FunCall CFCopyDescription_FxnInst = get_CFCopyDescription_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCopyDescription_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, cf);
		CFCopyDescription_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFCopyTypeIDDescription_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFCopyTypeIDDescription_FxnInst(){
		return ((CFCopyTypeIDDescription_FxnInst != null)
	? (CFCopyTypeIDDescription_FxnInst)
	: (CFCopyTypeIDDescription_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFCopyTypeIDDescription", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFCopyTypeIDDescription(final long type_id){
			final com.apple.jobjc.Invoke.FunCall CFCopyTypeIDDescription_FxnInst = get_CFCopyTypeIDDescription_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFCopyTypeIDDescription_FxnInst.init(nativeBuffer);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, type_id);
		CFCopyTypeIDDescription_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDataAppendBytes_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDataAppendBytes_FxnInst(){
		return ((CFDataAppendBytes_FxnInst != null)
	? (CFDataAppendBytes_FxnInst)
	: (CFDataAppendBytes_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDataAppendBytes", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public void CFDataAppendBytes(final com.apple.jobjc.corefoundation.CFMutableDataRefCFType theData, final com.apple.jobjc.Pointer<java.lang.Byte> bytes, final long length){
			final com.apple.jobjc.Invoke.FunCall CFDataAppendBytes_FxnInst = get_CFDataAppendBytes_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDataAppendBytes_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theData);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bytes);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, length);
		CFDataAppendBytes_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFDataCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDataCreate_FxnInst(){
		return ((CFDataCreate_FxnInst != null)
	? (CFDataCreate_FxnInst)
	: (CFDataCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDataCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFDataRefCFType CFDataCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.Pointer<java.lang.Byte> bytes, final long length){
			final com.apple.jobjc.Invoke.FunCall CFDataCreate_FxnInst = get_CFDataCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDataCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bytes);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, length);
		CFDataCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDataRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDataRefCFType) new com.apple.jobjc.corefoundation.CFDataRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDataCreateCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDataCreateCopy_FxnInst(){
		return ((CFDataCreateCopy_FxnInst != null)
	? (CFDataCreateCopy_FxnInst)
	: (CFDataCreateCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDataCreateCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDataRefCFType CFDataCreateCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFDataRefCFType theData){
			final com.apple.jobjc.Invoke.FunCall CFDataCreateCopy_FxnInst = get_CFDataCreateCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDataCreateCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theData);
		CFDataCreateCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDataRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDataRefCFType) new com.apple.jobjc.corefoundation.CFDataRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDataCreateMutable_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDataCreateMutable_FxnInst(){
		return ((CFDataCreateMutable_FxnInst != null)
	? (CFDataCreateMutable_FxnInst)
	: (CFDataCreateMutable_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDataCreateMutable", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFMutableDataRefCFType CFDataCreateMutable(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final long capacity){
			final com.apple.jobjc.Invoke.FunCall CFDataCreateMutable_FxnInst = get_CFDataCreateMutable_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDataCreateMutable_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, capacity);
		CFDataCreateMutable_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFMutableDataRefCFType returnValue = (com.apple.jobjc.corefoundation.CFMutableDataRefCFType) new com.apple.jobjc.corefoundation.CFMutableDataRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDataCreateMutableCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDataCreateMutableCopy_FxnInst(){
		return ((CFDataCreateMutableCopy_FxnInst != null)
	? (CFDataCreateMutableCopy_FxnInst)
	: (CFDataCreateMutableCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDataCreateMutableCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFMutableDataRefCFType CFDataCreateMutableCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final long capacity, final com.apple.jobjc.corefoundation.CFDataRefCFType theData){
			final com.apple.jobjc.Invoke.FunCall CFDataCreateMutableCopy_FxnInst = get_CFDataCreateMutableCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDataCreateMutableCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, capacity);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theData);
		CFDataCreateMutableCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFMutableDataRefCFType returnValue = (com.apple.jobjc.corefoundation.CFMutableDataRefCFType) new com.apple.jobjc.corefoundation.CFMutableDataRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDataCreateWithBytesNoCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDataCreateWithBytesNoCopy_FxnInst(){
		return ((CFDataCreateWithBytesNoCopy_FxnInst != null)
	? (CFDataCreateWithBytesNoCopy_FxnInst)
	: (CFDataCreateWithBytesNoCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDataCreateWithBytesNoCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDataRefCFType CFDataCreateWithBytesNoCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.Pointer<java.lang.Byte> bytes, final long length, final com.apple.jobjc.corefoundation.CFAllocatorRefCFType bytesDeallocator){
			final com.apple.jobjc.Invoke.FunCall CFDataCreateWithBytesNoCopy_FxnInst = get_CFDataCreateWithBytesNoCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDataCreateWithBytesNoCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bytes);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, length);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bytesDeallocator);
		CFDataCreateWithBytesNoCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDataRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDataRefCFType) new com.apple.jobjc.corefoundation.CFDataRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDataDeleteBytes_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDataDeleteBytes_FxnInst(){
		return ((CFDataDeleteBytes_FxnInst != null)
	? (CFDataDeleteBytes_FxnInst)
	: (CFDataDeleteBytes_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDataDeleteBytes", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder())));
	}

	 public void CFDataDeleteBytes(final com.apple.jobjc.corefoundation.CFMutableDataRefCFType theData, final com.apple.jobjc.corefoundation.CFRange range){
			final com.apple.jobjc.Invoke.FunCall CFDataDeleteBytes_FxnInst = get_CFDataDeleteBytes_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDataDeleteBytes_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theData);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		CFDataDeleteBytes_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFDataFind_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDataFind_FxnInst(){
		return ((CFDataFind_FxnInst != null)
	? (CFDataFind_FxnInst)
	: (CFDataFind_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDataFind", com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFRange CFDataFind(final com.apple.jobjc.corefoundation.CFDataRefCFType theData, final com.apple.jobjc.corefoundation.CFDataRefCFType dataToFind, final com.apple.jobjc.corefoundation.CFRange searchRange, final long compareOptions){
			final com.apple.jobjc.Invoke.FunCall CFDataFind_FxnInst = get_CFDataFind_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDataFind_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theData);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, dataToFind);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, searchRange);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, compareOptions);
				com.apple.jobjc.corefoundation.CFRange returnValue = com.apple.jobjc.JObjC.getInstance(getRuntime()).CoreFoundation().makeCFRange();
		CFDataFind_FxnInst.invoke(nativeBuffer, returnValue);
		
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDataGetBytePtr_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDataGetBytePtr_FxnInst(){
		return ((CFDataGetBytePtr_FxnInst != null)
	? (CFDataGetBytePtr_FxnInst)
	: (CFDataGetBytePtr_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDataGetBytePtr", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.Pointer<java.lang.Byte> CFDataGetBytePtr(final com.apple.jobjc.corefoundation.CFDataRefCFType theData){
			final com.apple.jobjc.Invoke.FunCall CFDataGetBytePtr_FxnInst = get_CFDataGetBytePtr_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDataGetBytePtr_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theData);
		CFDataGetBytePtr_FxnInst.invoke(nativeBuffer);
		final com.apple.jobjc.Pointer<java.lang.Byte> returnValue = (com.apple.jobjc.Pointer<java.lang.Byte>) (com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDataGetBytes_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDataGetBytes_FxnInst(){
		return ((CFDataGetBytes_FxnInst != null)
	? (CFDataGetBytes_FxnInst)
	: (CFDataGetBytes_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDataGetBytes", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFDataGetBytes(final com.apple.jobjc.corefoundation.CFDataRefCFType theData, final com.apple.jobjc.corefoundation.CFRange range, final com.apple.jobjc.Pointer<java.lang.Byte> buffer){
			final com.apple.jobjc.Invoke.FunCall CFDataGetBytes_FxnInst = get_CFDataGetBytes_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDataGetBytes_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theData);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, buffer);
		CFDataGetBytes_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFDataGetLength_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDataGetLength_FxnInst(){
		return ((CFDataGetLength_FxnInst != null)
	? (CFDataGetLength_FxnInst)
	: (CFDataGetLength_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDataGetLength", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFDataGetLength(final com.apple.jobjc.corefoundation.CFDataRefCFType theData){
			final com.apple.jobjc.Invoke.FunCall CFDataGetLength_FxnInst = get_CFDataGetLength_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDataGetLength_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theData);
		CFDataGetLength_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDataGetMutableBytePtr_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDataGetMutableBytePtr_FxnInst(){
		return ((CFDataGetMutableBytePtr_FxnInst != null)
	? (CFDataGetMutableBytePtr_FxnInst)
	: (CFDataGetMutableBytePtr_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDataGetMutableBytePtr", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.Pointer<java.lang.Byte> CFDataGetMutableBytePtr(final com.apple.jobjc.corefoundation.CFMutableDataRefCFType theData){
			final com.apple.jobjc.Invoke.FunCall CFDataGetMutableBytePtr_FxnInst = get_CFDataGetMutableBytePtr_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDataGetMutableBytePtr_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theData);
		CFDataGetMutableBytePtr_FxnInst.invoke(nativeBuffer);
		final com.apple.jobjc.Pointer<java.lang.Byte> returnValue = (com.apple.jobjc.Pointer<java.lang.Byte>) (com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDataGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDataGetTypeID_FxnInst(){
		return ((CFDataGetTypeID_FxnInst != null)
	? (CFDataGetTypeID_FxnInst)
	: (CFDataGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDataGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFDataGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFDataGetTypeID_FxnInst = get_CFDataGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDataGetTypeID_FxnInst.init(nativeBuffer);
		CFDataGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDataIncreaseLength_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDataIncreaseLength_FxnInst(){
		return ((CFDataIncreaseLength_FxnInst != null)
	? (CFDataIncreaseLength_FxnInst)
	: (CFDataIncreaseLength_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDataIncreaseLength", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public void CFDataIncreaseLength(final com.apple.jobjc.corefoundation.CFMutableDataRefCFType theData, final long extraLength){
			final com.apple.jobjc.Invoke.FunCall CFDataIncreaseLength_FxnInst = get_CFDataIncreaseLength_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDataIncreaseLength_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theData);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, extraLength);
		CFDataIncreaseLength_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFDataReplaceBytes_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDataReplaceBytes_FxnInst(){
		return ((CFDataReplaceBytes_FxnInst != null)
	? (CFDataReplaceBytes_FxnInst)
	: (CFDataReplaceBytes_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDataReplaceBytes", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public void CFDataReplaceBytes(final com.apple.jobjc.corefoundation.CFMutableDataRefCFType theData, final com.apple.jobjc.corefoundation.CFRange range, final com.apple.jobjc.Pointer<java.lang.Byte> newBytes, final long newLength){
			final com.apple.jobjc.Invoke.FunCall CFDataReplaceBytes_FxnInst = get_CFDataReplaceBytes_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDataReplaceBytes_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theData);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, newBytes);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, newLength);
		CFDataReplaceBytes_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFDataSetLength_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDataSetLength_FxnInst(){
		return ((CFDataSetLength_FxnInst != null)
	? (CFDataSetLength_FxnInst)
	: (CFDataSetLength_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDataSetLength", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public void CFDataSetLength(final com.apple.jobjc.corefoundation.CFMutableDataRefCFType theData, final long length){
			final com.apple.jobjc.Invoke.FunCall CFDataSetLength_FxnInst = get_CFDataSetLength_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDataSetLength_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theData);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, length);
		CFDataSetLength_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFDateCompare_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDateCompare_FxnInst(){
		return ((CFDateCompare_FxnInst != null)
	? (CFDateCompare_FxnInst)
	: (CFDateCompare_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDateCompare", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFDateCompare(final com.apple.jobjc.corefoundation.CFDateRefCFType theDate, final com.apple.jobjc.corefoundation.CFDateRefCFType otherDate, final com.apple.jobjc.Pointer<Void> context){
			final com.apple.jobjc.Invoke.FunCall CFDateCompare_FxnInst = get_CFDateCompare_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDateCompare_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theDate);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, otherDate);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFDateCompare_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDateCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDateCreate_FxnInst(){
		return ((CFDateCreate_FxnInst != null)
	? (CFDateCreate_FxnInst)
	: (CFDateCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDateCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDateRefCFType CFDateCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final double at){
			final com.apple.jobjc.Invoke.FunCall CFDateCreate_FxnInst = get_CFDateCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDateCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, at);
		CFDateCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDateRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDateRefCFType) new com.apple.jobjc.corefoundation.CFDateRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDateFormatterCopyProperty_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDateFormatterCopyProperty_FxnInst(){
		return ((CFDateFormatterCopyProperty_FxnInst != null)
	? (CFDateFormatterCopyProperty_FxnInst)
	: (CFDateFormatterCopyProperty_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDateFormatterCopyProperty", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFTypeRefCFType CFDateFormatterCopyProperty(final com.apple.jobjc.corefoundation.CFDateFormatterRefCFType formatter, final com.apple.jobjc.corefoundation.CFStringRefCFType key){
			final com.apple.jobjc.Invoke.FunCall CFDateFormatterCopyProperty_FxnInst = get_CFDateFormatterCopyProperty_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDateFormatterCopyProperty_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, formatter);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, key);
		CFDateFormatterCopyProperty_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFTypeRefCFType returnValue = (com.apple.jobjc.corefoundation.CFTypeRefCFType) new com.apple.jobjc.corefoundation.CFTypeRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDateFormatterCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDateFormatterCreate_FxnInst(){
		return ((CFDateFormatterCreate_FxnInst != null)
	? (CFDateFormatterCreate_FxnInst)
	: (CFDateFormatterCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDateFormatterCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFDateFormatterRefCFType CFDateFormatterCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFLocaleRefCFType locale, final long dateStyle, final long timeStyle){
			final com.apple.jobjc.Invoke.FunCall CFDateFormatterCreate_FxnInst = get_CFDateFormatterCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDateFormatterCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, locale);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, dateStyle);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, timeStyle);
		CFDateFormatterCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDateFormatterRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDateFormatterRefCFType) new com.apple.jobjc.corefoundation.CFDateFormatterRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDateFormatterCreateDateFormatFromTemplate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDateFormatterCreateDateFormatFromTemplate_FxnInst(){
		return ((CFDateFormatterCreateDateFormatFromTemplate_FxnInst != null)
	? (CFDateFormatterCreateDateFormatFromTemplate_FxnInst)
	: (CFDateFormatterCreateDateFormatFromTemplate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDateFormatterCreateDateFormatFromTemplate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFDateFormatterCreateDateFormatFromTemplate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFStringRefCFType tmplate, final long options, final com.apple.jobjc.corefoundation.CFLocaleRefCFType locale){
			final com.apple.jobjc.Invoke.FunCall CFDateFormatterCreateDateFormatFromTemplate_FxnInst = get_CFDateFormatterCreateDateFormatFromTemplate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDateFormatterCreateDateFormatFromTemplate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tmplate);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, options);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, locale);
		CFDateFormatterCreateDateFormatFromTemplate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDateFormatterCreateDateFromString_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDateFormatterCreateDateFromString_FxnInst(){
		return ((CFDateFormatterCreateDateFromString_FxnInst != null)
	? (CFDateFormatterCreateDateFromString_FxnInst)
	: (CFDateFormatterCreateDateFromString_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDateFormatterCreateDateFromString", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDateRefCFType CFDateFormatterCreateDateFromString(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFDateFormatterRefCFType formatter, final com.apple.jobjc.corefoundation.CFStringRefCFType string, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFRange> rangep){
			final com.apple.jobjc.Invoke.FunCall CFDateFormatterCreateDateFromString_FxnInst = get_CFDateFormatterCreateDateFromString_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDateFormatterCreateDateFromString_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, formatter);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, string);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, rangep);
		CFDateFormatterCreateDateFromString_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDateRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDateRefCFType) new com.apple.jobjc.corefoundation.CFDateRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDateFormatterCreateStringWithAbsoluteTime_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDateFormatterCreateStringWithAbsoluteTime_FxnInst(){
		return ((CFDateFormatterCreateStringWithAbsoluteTime_FxnInst != null)
	? (CFDateFormatterCreateStringWithAbsoluteTime_FxnInst)
	: (CFDateFormatterCreateStringWithAbsoluteTime_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDateFormatterCreateStringWithAbsoluteTime", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFDateFormatterCreateStringWithAbsoluteTime(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFDateFormatterRefCFType formatter, final double at){
			final com.apple.jobjc.Invoke.FunCall CFDateFormatterCreateStringWithAbsoluteTime_FxnInst = get_CFDateFormatterCreateStringWithAbsoluteTime_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDateFormatterCreateStringWithAbsoluteTime_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, formatter);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, at);
		CFDateFormatterCreateStringWithAbsoluteTime_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDateFormatterCreateStringWithDate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDateFormatterCreateStringWithDate_FxnInst(){
		return ((CFDateFormatterCreateStringWithDate_FxnInst != null)
	? (CFDateFormatterCreateStringWithDate_FxnInst)
	: (CFDateFormatterCreateStringWithDate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDateFormatterCreateStringWithDate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFDateFormatterCreateStringWithDate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFDateFormatterRefCFType formatter, final com.apple.jobjc.corefoundation.CFDateRefCFType date){
			final com.apple.jobjc.Invoke.FunCall CFDateFormatterCreateStringWithDate_FxnInst = get_CFDateFormatterCreateStringWithDate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDateFormatterCreateStringWithDate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, formatter);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, date);
		CFDateFormatterCreateStringWithDate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDateFormatterGetAbsoluteTimeFromString_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDateFormatterGetAbsoluteTimeFromString_FxnInst(){
		return ((CFDateFormatterGetAbsoluteTimeFromString_FxnInst != null)
	? (CFDateFormatterGetAbsoluteTimeFromString_FxnInst)
	: (CFDateFormatterGetAbsoluteTimeFromString_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDateFormatterGetAbsoluteTimeFromString", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFDateFormatterGetAbsoluteTimeFromString(final com.apple.jobjc.corefoundation.CFDateFormatterRefCFType formatter, final com.apple.jobjc.corefoundation.CFStringRefCFType string, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFRange> rangep, final com.apple.jobjc.Pointer<java.lang.Double> atp){
			final com.apple.jobjc.Invoke.FunCall CFDateFormatterGetAbsoluteTimeFromString_FxnInst = get_CFDateFormatterGetAbsoluteTimeFromString_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDateFormatterGetAbsoluteTimeFromString_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, formatter);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, string);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, rangep);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, atp);
		CFDateFormatterGetAbsoluteTimeFromString_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDateFormatterGetDateStyle_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDateFormatterGetDateStyle_FxnInst(){
		return ((CFDateFormatterGetDateStyle_FxnInst != null)
	? (CFDateFormatterGetDateStyle_FxnInst)
	: (CFDateFormatterGetDateStyle_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDateFormatterGetDateStyle", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFDateFormatterGetDateStyle(final com.apple.jobjc.corefoundation.CFDateFormatterRefCFType formatter){
			final com.apple.jobjc.Invoke.FunCall CFDateFormatterGetDateStyle_FxnInst = get_CFDateFormatterGetDateStyle_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDateFormatterGetDateStyle_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, formatter);
		CFDateFormatterGetDateStyle_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDateFormatterGetFormat_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDateFormatterGetFormat_FxnInst(){
		return ((CFDateFormatterGetFormat_FxnInst != null)
	? (CFDateFormatterGetFormat_FxnInst)
	: (CFDateFormatterGetFormat_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDateFormatterGetFormat", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFDateFormatterGetFormat(final com.apple.jobjc.corefoundation.CFDateFormatterRefCFType formatter){
			final com.apple.jobjc.Invoke.FunCall CFDateFormatterGetFormat_FxnInst = get_CFDateFormatterGetFormat_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDateFormatterGetFormat_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, formatter);
		CFDateFormatterGetFormat_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDateFormatterGetLocale_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDateFormatterGetLocale_FxnInst(){
		return ((CFDateFormatterGetLocale_FxnInst != null)
	? (CFDateFormatterGetLocale_FxnInst)
	: (CFDateFormatterGetLocale_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDateFormatterGetLocale", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFLocaleRefCFType CFDateFormatterGetLocale(final com.apple.jobjc.corefoundation.CFDateFormatterRefCFType formatter){
			final com.apple.jobjc.Invoke.FunCall CFDateFormatterGetLocale_FxnInst = get_CFDateFormatterGetLocale_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDateFormatterGetLocale_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, formatter);
		CFDateFormatterGetLocale_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFLocaleRefCFType returnValue = (com.apple.jobjc.corefoundation.CFLocaleRefCFType) new com.apple.jobjc.corefoundation.CFLocaleRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDateFormatterGetTimeStyle_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDateFormatterGetTimeStyle_FxnInst(){
		return ((CFDateFormatterGetTimeStyle_FxnInst != null)
	? (CFDateFormatterGetTimeStyle_FxnInst)
	: (CFDateFormatterGetTimeStyle_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDateFormatterGetTimeStyle", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFDateFormatterGetTimeStyle(final com.apple.jobjc.corefoundation.CFDateFormatterRefCFType formatter){
			final com.apple.jobjc.Invoke.FunCall CFDateFormatterGetTimeStyle_FxnInst = get_CFDateFormatterGetTimeStyle_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDateFormatterGetTimeStyle_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, formatter);
		CFDateFormatterGetTimeStyle_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDateFormatterGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDateFormatterGetTypeID_FxnInst(){
		return ((CFDateFormatterGetTypeID_FxnInst != null)
	? (CFDateFormatterGetTypeID_FxnInst)
	: (CFDateFormatterGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDateFormatterGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFDateFormatterGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFDateFormatterGetTypeID_FxnInst = get_CFDateFormatterGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDateFormatterGetTypeID_FxnInst.init(nativeBuffer);
		CFDateFormatterGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDateFormatterSetFormat_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDateFormatterSetFormat_FxnInst(){
		return ((CFDateFormatterSetFormat_FxnInst != null)
	? (CFDateFormatterSetFormat_FxnInst)
	: (CFDateFormatterSetFormat_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDateFormatterSetFormat", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFDateFormatterSetFormat(final com.apple.jobjc.corefoundation.CFDateFormatterRefCFType formatter, final com.apple.jobjc.corefoundation.CFStringRefCFType formatString){
			final com.apple.jobjc.Invoke.FunCall CFDateFormatterSetFormat_FxnInst = get_CFDateFormatterSetFormat_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDateFormatterSetFormat_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, formatter);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, formatString);
		CFDateFormatterSetFormat_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFDateFormatterSetProperty_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDateFormatterSetProperty_FxnInst(){
		return ((CFDateFormatterSetProperty_FxnInst != null)
	? (CFDateFormatterSetProperty_FxnInst)
	: (CFDateFormatterSetProperty_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDateFormatterSetProperty", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFDateFormatterSetProperty(final com.apple.jobjc.corefoundation.CFDateFormatterRefCFType formatter, final com.apple.jobjc.corefoundation.CFStringRefCFType key, final com.apple.jobjc.corefoundation.CFTypeRefCFType value){
			final com.apple.jobjc.Invoke.FunCall CFDateFormatterSetProperty_FxnInst = get_CFDateFormatterSetProperty_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDateFormatterSetProperty_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, formatter);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, key);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFDateFormatterSetProperty_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFDateGetAbsoluteTime_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDateGetAbsoluteTime_FxnInst(){
		return ((CFDateGetAbsoluteTime_FxnInst != null)
	? (CFDateGetAbsoluteTime_FxnInst)
	: (CFDateGetAbsoluteTime_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDateGetAbsoluteTime", com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public double CFDateGetAbsoluteTime(final com.apple.jobjc.corefoundation.CFDateRefCFType theDate){
			final com.apple.jobjc.Invoke.FunCall CFDateGetAbsoluteTime_FxnInst = get_CFDateGetAbsoluteTime_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDateGetAbsoluteTime_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theDate);
		CFDateGetAbsoluteTime_FxnInst.invoke(nativeBuffer);
		final double returnValue = (double) (com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.popDouble(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDateGetTimeIntervalSinceDate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDateGetTimeIntervalSinceDate_FxnInst(){
		return ((CFDateGetTimeIntervalSinceDate_FxnInst != null)
	? (CFDateGetTimeIntervalSinceDate_FxnInst)
	: (CFDateGetTimeIntervalSinceDate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDateGetTimeIntervalSinceDate", com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public double CFDateGetTimeIntervalSinceDate(final com.apple.jobjc.corefoundation.CFDateRefCFType theDate, final com.apple.jobjc.corefoundation.CFDateRefCFType otherDate){
			final com.apple.jobjc.Invoke.FunCall CFDateGetTimeIntervalSinceDate_FxnInst = get_CFDateGetTimeIntervalSinceDate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDateGetTimeIntervalSinceDate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theDate);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, otherDate);
		CFDateGetTimeIntervalSinceDate_FxnInst.invoke(nativeBuffer);
		final double returnValue = (double) (com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.popDouble(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDateGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDateGetTypeID_FxnInst(){
		return ((CFDateGetTypeID_FxnInst != null)
	? (CFDateGetTypeID_FxnInst)
	: (CFDateGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDateGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFDateGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFDateGetTypeID_FxnInst = get_CFDateGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDateGetTypeID_FxnInst.init(nativeBuffer);
		CFDateGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDictionaryAddValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDictionaryAddValue_FxnInst(){
		return ((CFDictionaryAddValue_FxnInst != null)
	? (CFDictionaryAddValue_FxnInst)
	: (CFDictionaryAddValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDictionaryAddValue", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFDictionaryAddValue(final com.apple.jobjc.corefoundation.CFMutableDictionaryRefCFType theDict, final com.apple.jobjc.Pointer<Void> key, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFDictionaryAddValue_FxnInst = get_CFDictionaryAddValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDictionaryAddValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theDict);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, key);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFDictionaryAddValue_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFDictionaryApplyFunction_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDictionaryApplyFunction_FxnInst(){
		return ((CFDictionaryApplyFunction_FxnInst != null)
	? (CFDictionaryApplyFunction_FxnInst)
	: (CFDictionaryApplyFunction_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDictionaryApplyFunction", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFDictionaryApplyFunction(final com.apple.jobjc.corefoundation.CFDictionaryRefCFType theDict, final Object /* CFDictionaryApplierFunction (^?, ^?) */ applier, final com.apple.jobjc.Pointer<Void> context){
			final com.apple.jobjc.Invoke.FunCall CFDictionaryApplyFunction_FxnInst = get_CFDictionaryApplyFunction_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDictionaryApplyFunction_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theDict);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, applier);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFDictionaryApplyFunction_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFDictionaryContainsKey_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDictionaryContainsKey_FxnInst(){
		return ((CFDictionaryContainsKey_FxnInst != null)
	? (CFDictionaryContainsKey_FxnInst)
	: (CFDictionaryContainsKey_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDictionaryContainsKey", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFDictionaryContainsKey(final com.apple.jobjc.corefoundation.CFDictionaryRefCFType theDict, final com.apple.jobjc.Pointer<Void> key){
			final com.apple.jobjc.Invoke.FunCall CFDictionaryContainsKey_FxnInst = get_CFDictionaryContainsKey_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDictionaryContainsKey_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theDict);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, key);
		CFDictionaryContainsKey_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDictionaryContainsValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDictionaryContainsValue_FxnInst(){
		return ((CFDictionaryContainsValue_FxnInst != null)
	? (CFDictionaryContainsValue_FxnInst)
	: (CFDictionaryContainsValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDictionaryContainsValue", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFDictionaryContainsValue(final com.apple.jobjc.corefoundation.CFDictionaryRefCFType theDict, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFDictionaryContainsValue_FxnInst = get_CFDictionaryContainsValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDictionaryContainsValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theDict);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFDictionaryContainsValue_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDictionaryCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDictionaryCreate_FxnInst(){
		return ((CFDictionaryCreate_FxnInst != null)
	? (CFDictionaryCreate_FxnInst)
	: (CFDictionaryCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDictionaryCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDictionaryRefCFType CFDictionaryCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.Pointer<com.apple.jobjc.Pointer<Void>> keys, final com.apple.jobjc.Pointer<com.apple.jobjc.Pointer<Void>> values, final long numValues, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFDictionaryKeyCallBacks> keyCallBacks, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFDictionaryValueCallBacks> valueCallBacks){
			final com.apple.jobjc.Invoke.FunCall CFDictionaryCreate_FxnInst = get_CFDictionaryCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDictionaryCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, keys);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, values);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, numValues);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, keyCallBacks);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, valueCallBacks);
		CFDictionaryCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDictionaryRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDictionaryRefCFType) new com.apple.jobjc.corefoundation.CFDictionaryRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDictionaryCreateCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDictionaryCreateCopy_FxnInst(){
		return ((CFDictionaryCreateCopy_FxnInst != null)
	? (CFDictionaryCreateCopy_FxnInst)
	: (CFDictionaryCreateCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDictionaryCreateCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDictionaryRefCFType CFDictionaryCreateCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFDictionaryRefCFType theDict){
			final com.apple.jobjc.Invoke.FunCall CFDictionaryCreateCopy_FxnInst = get_CFDictionaryCreateCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDictionaryCreateCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theDict);
		CFDictionaryCreateCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDictionaryRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDictionaryRefCFType) new com.apple.jobjc.corefoundation.CFDictionaryRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDictionaryCreateMutable_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDictionaryCreateMutable_FxnInst(){
		return ((CFDictionaryCreateMutable_FxnInst != null)
	? (CFDictionaryCreateMutable_FxnInst)
	: (CFDictionaryCreateMutable_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDictionaryCreateMutable", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFMutableDictionaryRefCFType CFDictionaryCreateMutable(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final long capacity, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFDictionaryKeyCallBacks> keyCallBacks, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFDictionaryValueCallBacks> valueCallBacks){
			final com.apple.jobjc.Invoke.FunCall CFDictionaryCreateMutable_FxnInst = get_CFDictionaryCreateMutable_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDictionaryCreateMutable_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, capacity);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, keyCallBacks);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, valueCallBacks);
		CFDictionaryCreateMutable_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFMutableDictionaryRefCFType returnValue = (com.apple.jobjc.corefoundation.CFMutableDictionaryRefCFType) new com.apple.jobjc.corefoundation.CFMutableDictionaryRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDictionaryCreateMutableCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDictionaryCreateMutableCopy_FxnInst(){
		return ((CFDictionaryCreateMutableCopy_FxnInst != null)
	? (CFDictionaryCreateMutableCopy_FxnInst)
	: (CFDictionaryCreateMutableCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDictionaryCreateMutableCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFMutableDictionaryRefCFType CFDictionaryCreateMutableCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final long capacity, final com.apple.jobjc.corefoundation.CFDictionaryRefCFType theDict){
			final com.apple.jobjc.Invoke.FunCall CFDictionaryCreateMutableCopy_FxnInst = get_CFDictionaryCreateMutableCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDictionaryCreateMutableCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, capacity);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theDict);
		CFDictionaryCreateMutableCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFMutableDictionaryRefCFType returnValue = (com.apple.jobjc.corefoundation.CFMutableDictionaryRefCFType) new com.apple.jobjc.corefoundation.CFMutableDictionaryRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDictionaryGetCount_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDictionaryGetCount_FxnInst(){
		return ((CFDictionaryGetCount_FxnInst != null)
	? (CFDictionaryGetCount_FxnInst)
	: (CFDictionaryGetCount_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDictionaryGetCount", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFDictionaryGetCount(final com.apple.jobjc.corefoundation.CFDictionaryRefCFType theDict){
			final com.apple.jobjc.Invoke.FunCall CFDictionaryGetCount_FxnInst = get_CFDictionaryGetCount_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDictionaryGetCount_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theDict);
		CFDictionaryGetCount_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDictionaryGetCountOfKey_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDictionaryGetCountOfKey_FxnInst(){
		return ((CFDictionaryGetCountOfKey_FxnInst != null)
	? (CFDictionaryGetCountOfKey_FxnInst)
	: (CFDictionaryGetCountOfKey_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDictionaryGetCountOfKey", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFDictionaryGetCountOfKey(final com.apple.jobjc.corefoundation.CFDictionaryRefCFType theDict, final com.apple.jobjc.Pointer<Void> key){
			final com.apple.jobjc.Invoke.FunCall CFDictionaryGetCountOfKey_FxnInst = get_CFDictionaryGetCountOfKey_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDictionaryGetCountOfKey_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theDict);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, key);
		CFDictionaryGetCountOfKey_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDictionaryGetCountOfValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDictionaryGetCountOfValue_FxnInst(){
		return ((CFDictionaryGetCountOfValue_FxnInst != null)
	? (CFDictionaryGetCountOfValue_FxnInst)
	: (CFDictionaryGetCountOfValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDictionaryGetCountOfValue", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFDictionaryGetCountOfValue(final com.apple.jobjc.corefoundation.CFDictionaryRefCFType theDict, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFDictionaryGetCountOfValue_FxnInst = get_CFDictionaryGetCountOfValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDictionaryGetCountOfValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theDict);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFDictionaryGetCountOfValue_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDictionaryGetKeysAndValues_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDictionaryGetKeysAndValues_FxnInst(){
		return ((CFDictionaryGetKeysAndValues_FxnInst != null)
	? (CFDictionaryGetKeysAndValues_FxnInst)
	: (CFDictionaryGetKeysAndValues_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDictionaryGetKeysAndValues", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFDictionaryGetKeysAndValues(final com.apple.jobjc.corefoundation.CFDictionaryRefCFType theDict, final com.apple.jobjc.Pointer<com.apple.jobjc.Pointer<Void>> keys, final com.apple.jobjc.Pointer<com.apple.jobjc.Pointer<Void>> values){
			final com.apple.jobjc.Invoke.FunCall CFDictionaryGetKeysAndValues_FxnInst = get_CFDictionaryGetKeysAndValues_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDictionaryGetKeysAndValues_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theDict);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, keys);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, values);
		CFDictionaryGetKeysAndValues_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFDictionaryGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDictionaryGetTypeID_FxnInst(){
		return ((CFDictionaryGetTypeID_FxnInst != null)
	? (CFDictionaryGetTypeID_FxnInst)
	: (CFDictionaryGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDictionaryGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFDictionaryGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFDictionaryGetTypeID_FxnInst = get_CFDictionaryGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDictionaryGetTypeID_FxnInst.init(nativeBuffer);
		CFDictionaryGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDictionaryGetValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDictionaryGetValue_FxnInst(){
		return ((CFDictionaryGetValue_FxnInst != null)
	? (CFDictionaryGetValue_FxnInst)
	: (CFDictionaryGetValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDictionaryGetValue", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.Pointer<Void> CFDictionaryGetValue(final com.apple.jobjc.corefoundation.CFDictionaryRefCFType theDict, final com.apple.jobjc.Pointer<Void> key){
			final com.apple.jobjc.Invoke.FunCall CFDictionaryGetValue_FxnInst = get_CFDictionaryGetValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDictionaryGetValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theDict);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, key);
		CFDictionaryGetValue_FxnInst.invoke(nativeBuffer);
		final com.apple.jobjc.Pointer<Void> returnValue = (com.apple.jobjc.Pointer<Void>) (com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDictionaryGetValueIfPresent_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDictionaryGetValueIfPresent_FxnInst(){
		return ((CFDictionaryGetValueIfPresent_FxnInst != null)
	? (CFDictionaryGetValueIfPresent_FxnInst)
	: (CFDictionaryGetValueIfPresent_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDictionaryGetValueIfPresent", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFDictionaryGetValueIfPresent(final com.apple.jobjc.corefoundation.CFDictionaryRefCFType theDict, final com.apple.jobjc.Pointer<Void> key, final com.apple.jobjc.Pointer<com.apple.jobjc.Pointer<Void>> value){
			final com.apple.jobjc.Invoke.FunCall CFDictionaryGetValueIfPresent_FxnInst = get_CFDictionaryGetValueIfPresent_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDictionaryGetValueIfPresent_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theDict);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, key);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFDictionaryGetValueIfPresent_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFDictionaryRemoveAllValues_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDictionaryRemoveAllValues_FxnInst(){
		return ((CFDictionaryRemoveAllValues_FxnInst != null)
	? (CFDictionaryRemoveAllValues_FxnInst)
	: (CFDictionaryRemoveAllValues_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDictionaryRemoveAllValues", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFDictionaryRemoveAllValues(final com.apple.jobjc.corefoundation.CFMutableDictionaryRefCFType theDict){
			final com.apple.jobjc.Invoke.FunCall CFDictionaryRemoveAllValues_FxnInst = get_CFDictionaryRemoveAllValues_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDictionaryRemoveAllValues_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theDict);
		CFDictionaryRemoveAllValues_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFDictionaryRemoveValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDictionaryRemoveValue_FxnInst(){
		return ((CFDictionaryRemoveValue_FxnInst != null)
	? (CFDictionaryRemoveValue_FxnInst)
	: (CFDictionaryRemoveValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDictionaryRemoveValue", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFDictionaryRemoveValue(final com.apple.jobjc.corefoundation.CFMutableDictionaryRefCFType theDict, final com.apple.jobjc.Pointer<Void> key){
			final com.apple.jobjc.Invoke.FunCall CFDictionaryRemoveValue_FxnInst = get_CFDictionaryRemoveValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDictionaryRemoveValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theDict);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, key);
		CFDictionaryRemoveValue_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFDictionaryReplaceValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDictionaryReplaceValue_FxnInst(){
		return ((CFDictionaryReplaceValue_FxnInst != null)
	? (CFDictionaryReplaceValue_FxnInst)
	: (CFDictionaryReplaceValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDictionaryReplaceValue", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFDictionaryReplaceValue(final com.apple.jobjc.corefoundation.CFMutableDictionaryRefCFType theDict, final com.apple.jobjc.Pointer<Void> key, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFDictionaryReplaceValue_FxnInst = get_CFDictionaryReplaceValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDictionaryReplaceValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theDict);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, key);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFDictionaryReplaceValue_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFDictionarySetValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFDictionarySetValue_FxnInst(){
		return ((CFDictionarySetValue_FxnInst != null)
	? (CFDictionarySetValue_FxnInst)
	: (CFDictionarySetValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFDictionarySetValue", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFDictionarySetValue(final com.apple.jobjc.corefoundation.CFMutableDictionaryRefCFType theDict, final com.apple.jobjc.Pointer<Void> key, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFDictionarySetValue_FxnInst = get_CFDictionarySetValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFDictionarySetValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theDict);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, key);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFDictionarySetValue_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFEqual_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFEqual_FxnInst(){
		return ((CFEqual_FxnInst != null)
	? (CFEqual_FxnInst)
	: (CFEqual_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFEqual", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFEqual(final com.apple.jobjc.corefoundation.CFTypeRefCFType cf1, final com.apple.jobjc.corefoundation.CFTypeRefCFType cf2){
			final com.apple.jobjc.Invoke.FunCall CFEqual_FxnInst = get_CFEqual_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFEqual_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, cf1);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, cf2);
		CFEqual_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFErrorCopyDescription_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFErrorCopyDescription_FxnInst(){
		return ((CFErrorCopyDescription_FxnInst != null)
	? (CFErrorCopyDescription_FxnInst)
	: (CFErrorCopyDescription_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFErrorCopyDescription", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFErrorCopyDescription(final com.apple.jobjc.corefoundation.CFErrorRefCFType err){
			final com.apple.jobjc.Invoke.FunCall CFErrorCopyDescription_FxnInst = get_CFErrorCopyDescription_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFErrorCopyDescription_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, err);
		CFErrorCopyDescription_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFErrorCopyFailureReason_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFErrorCopyFailureReason_FxnInst(){
		return ((CFErrorCopyFailureReason_FxnInst != null)
	? (CFErrorCopyFailureReason_FxnInst)
	: (CFErrorCopyFailureReason_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFErrorCopyFailureReason", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFErrorCopyFailureReason(final com.apple.jobjc.corefoundation.CFErrorRefCFType err){
			final com.apple.jobjc.Invoke.FunCall CFErrorCopyFailureReason_FxnInst = get_CFErrorCopyFailureReason_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFErrorCopyFailureReason_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, err);
		CFErrorCopyFailureReason_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFErrorCopyRecoverySuggestion_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFErrorCopyRecoverySuggestion_FxnInst(){
		return ((CFErrorCopyRecoverySuggestion_FxnInst != null)
	? (CFErrorCopyRecoverySuggestion_FxnInst)
	: (CFErrorCopyRecoverySuggestion_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFErrorCopyRecoverySuggestion", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFErrorCopyRecoverySuggestion(final com.apple.jobjc.corefoundation.CFErrorRefCFType err){
			final com.apple.jobjc.Invoke.FunCall CFErrorCopyRecoverySuggestion_FxnInst = get_CFErrorCopyRecoverySuggestion_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFErrorCopyRecoverySuggestion_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, err);
		CFErrorCopyRecoverySuggestion_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFErrorCopyUserInfo_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFErrorCopyUserInfo_FxnInst(){
		return ((CFErrorCopyUserInfo_FxnInst != null)
	? (CFErrorCopyUserInfo_FxnInst)
	: (CFErrorCopyUserInfo_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFErrorCopyUserInfo", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDictionaryRefCFType CFErrorCopyUserInfo(final com.apple.jobjc.corefoundation.CFErrorRefCFType err){
			final com.apple.jobjc.Invoke.FunCall CFErrorCopyUserInfo_FxnInst = get_CFErrorCopyUserInfo_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFErrorCopyUserInfo_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, err);
		CFErrorCopyUserInfo_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDictionaryRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDictionaryRefCFType) new com.apple.jobjc.corefoundation.CFDictionaryRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFErrorCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFErrorCreate_FxnInst(){
		return ((CFErrorCreate_FxnInst != null)
	? (CFErrorCreate_FxnInst)
	: (CFErrorCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFErrorCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFErrorRefCFType CFErrorCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFStringRefCFType domain, final long code, final com.apple.jobjc.corefoundation.CFDictionaryRefCFType userInfo){
			final com.apple.jobjc.Invoke.FunCall CFErrorCreate_FxnInst = get_CFErrorCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFErrorCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, domain);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, code);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, userInfo);
		CFErrorCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFErrorRefCFType returnValue = (com.apple.jobjc.corefoundation.CFErrorRefCFType) new com.apple.jobjc.corefoundation.CFErrorRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFErrorCreateWithUserInfoKeysAndValues_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFErrorCreateWithUserInfoKeysAndValues_FxnInst(){
		return ((CFErrorCreateWithUserInfoKeysAndValues_FxnInst != null)
	? (CFErrorCreateWithUserInfoKeysAndValues_FxnInst)
	: (CFErrorCreateWithUserInfoKeysAndValues_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFErrorCreateWithUserInfoKeysAndValues", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFErrorRefCFType CFErrorCreateWithUserInfoKeysAndValues(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFStringRefCFType domain, final long code, final com.apple.jobjc.Pointer<com.apple.jobjc.Pointer<Void>> userInfoKeys, final com.apple.jobjc.Pointer<com.apple.jobjc.Pointer<Void>> userInfoValues, final long numUserInfoValues){
			final com.apple.jobjc.Invoke.FunCall CFErrorCreateWithUserInfoKeysAndValues_FxnInst = get_CFErrorCreateWithUserInfoKeysAndValues_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFErrorCreateWithUserInfoKeysAndValues_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, domain);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, code);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, userInfoKeys);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, userInfoValues);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, numUserInfoValues);
		CFErrorCreateWithUserInfoKeysAndValues_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFErrorRefCFType returnValue = (com.apple.jobjc.corefoundation.CFErrorRefCFType) new com.apple.jobjc.corefoundation.CFErrorRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFErrorGetCode_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFErrorGetCode_FxnInst(){
		return ((CFErrorGetCode_FxnInst != null)
	? (CFErrorGetCode_FxnInst)
	: (CFErrorGetCode_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFErrorGetCode", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFErrorGetCode(final com.apple.jobjc.corefoundation.CFErrorRefCFType err){
			final com.apple.jobjc.Invoke.FunCall CFErrorGetCode_FxnInst = get_CFErrorGetCode_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFErrorGetCode_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, err);
		CFErrorGetCode_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFErrorGetDomain_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFErrorGetDomain_FxnInst(){
		return ((CFErrorGetDomain_FxnInst != null)
	? (CFErrorGetDomain_FxnInst)
	: (CFErrorGetDomain_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFErrorGetDomain", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFErrorGetDomain(final com.apple.jobjc.corefoundation.CFErrorRefCFType err){
			final com.apple.jobjc.Invoke.FunCall CFErrorGetDomain_FxnInst = get_CFErrorGetDomain_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFErrorGetDomain_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, err);
		CFErrorGetDomain_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFErrorGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFErrorGetTypeID_FxnInst(){
		return ((CFErrorGetTypeID_FxnInst != null)
	? (CFErrorGetTypeID_FxnInst)
	: (CFErrorGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFErrorGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFErrorGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFErrorGetTypeID_FxnInst = get_CFErrorGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFErrorGetTypeID_FxnInst.init(nativeBuffer);
		CFErrorGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFFileDescriptorCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFFileDescriptorCreate_FxnInst(){
		return ((CFFileDescriptorCreate_FxnInst != null)
	? (CFFileDescriptorCreate_FxnInst)
	: (CFFileDescriptorCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFFileDescriptorCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.SIntCoder.INST, com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFFileDescriptorRefCFType CFFileDescriptorCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final int fd, final boolean closeOnInvalidate, final Object /* CFFileDescriptorCallBack (^?, ^?) */ callout, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFFileDescriptorContext> context){
			final com.apple.jobjc.Invoke.FunCall CFFileDescriptorCreate_FxnInst = get_CFFileDescriptorCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFFileDescriptorCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.PrimitiveCoder.SIntCoder.INST.push(nativeBuffer, fd);
		com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.push(nativeBuffer, closeOnInvalidate);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, callout);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFFileDescriptorCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFFileDescriptorRefCFType returnValue = (com.apple.jobjc.corefoundation.CFFileDescriptorRefCFType) new com.apple.jobjc.corefoundation.CFFileDescriptorRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFFileDescriptorCreateRunLoopSource_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFFileDescriptorCreateRunLoopSource_FxnInst(){
		return ((CFFileDescriptorCreateRunLoopSource_FxnInst != null)
	? (CFFileDescriptorCreateRunLoopSource_FxnInst)
	: (CFFileDescriptorCreateRunLoopSource_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFFileDescriptorCreateRunLoopSource", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType CFFileDescriptorCreateRunLoopSource(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFFileDescriptorRefCFType f, final long order){
			final com.apple.jobjc.Invoke.FunCall CFFileDescriptorCreateRunLoopSource_FxnInst = get_CFFileDescriptorCreateRunLoopSource_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFFileDescriptorCreateRunLoopSource_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, f);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, order);
		CFFileDescriptorCreateRunLoopSource_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType returnValue = (com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType) new com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFFileDescriptorDisableCallBacks_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFFileDescriptorDisableCallBacks_FxnInst(){
		return ((CFFileDescriptorDisableCallBacks_FxnInst != null)
	? (CFFileDescriptorDisableCallBacks_FxnInst)
	: (CFFileDescriptorDisableCallBacks_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFFileDescriptorDisableCallBacks", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public void CFFileDescriptorDisableCallBacks(final com.apple.jobjc.corefoundation.CFFileDescriptorRefCFType f, final long callBackTypes){
			final com.apple.jobjc.Invoke.FunCall CFFileDescriptorDisableCallBacks_FxnInst = get_CFFileDescriptorDisableCallBacks_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFFileDescriptorDisableCallBacks_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, f);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, callBackTypes);
		CFFileDescriptorDisableCallBacks_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFFileDescriptorEnableCallBacks_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFFileDescriptorEnableCallBacks_FxnInst(){
		return ((CFFileDescriptorEnableCallBacks_FxnInst != null)
	? (CFFileDescriptorEnableCallBacks_FxnInst)
	: (CFFileDescriptorEnableCallBacks_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFFileDescriptorEnableCallBacks", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public void CFFileDescriptorEnableCallBacks(final com.apple.jobjc.corefoundation.CFFileDescriptorRefCFType f, final long callBackTypes){
			final com.apple.jobjc.Invoke.FunCall CFFileDescriptorEnableCallBacks_FxnInst = get_CFFileDescriptorEnableCallBacks_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFFileDescriptorEnableCallBacks_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, f);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, callBackTypes);
		CFFileDescriptorEnableCallBacks_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFFileDescriptorGetContext_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFFileDescriptorGetContext_FxnInst(){
		return ((CFFileDescriptorGetContext_FxnInst != null)
	? (CFFileDescriptorGetContext_FxnInst)
	: (CFFileDescriptorGetContext_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFFileDescriptorGetContext", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFFileDescriptorGetContext(final com.apple.jobjc.corefoundation.CFFileDescriptorRefCFType f, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFFileDescriptorContext> context){
			final com.apple.jobjc.Invoke.FunCall CFFileDescriptorGetContext_FxnInst = get_CFFileDescriptorGetContext_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFFileDescriptorGetContext_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, f);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFFileDescriptorGetContext_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFFileDescriptorGetNativeDescriptor_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFFileDescriptorGetNativeDescriptor_FxnInst(){
		return ((CFFileDescriptorGetNativeDescriptor_FxnInst != null)
	? (CFFileDescriptorGetNativeDescriptor_FxnInst)
	: (CFFileDescriptorGetNativeDescriptor_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFFileDescriptorGetNativeDescriptor", com.apple.jobjc.PrimitiveCoder.SIntCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public int CFFileDescriptorGetNativeDescriptor(final com.apple.jobjc.corefoundation.CFFileDescriptorRefCFType f){
			final com.apple.jobjc.Invoke.FunCall CFFileDescriptorGetNativeDescriptor_FxnInst = get_CFFileDescriptorGetNativeDescriptor_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFFileDescriptorGetNativeDescriptor_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, f);
		CFFileDescriptorGetNativeDescriptor_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.PrimitiveCoder.SIntCoder.INST.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFFileDescriptorGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFFileDescriptorGetTypeID_FxnInst(){
		return ((CFFileDescriptorGetTypeID_FxnInst != null)
	? (CFFileDescriptorGetTypeID_FxnInst)
	: (CFFileDescriptorGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFFileDescriptorGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFFileDescriptorGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFFileDescriptorGetTypeID_FxnInst = get_CFFileDescriptorGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFFileDescriptorGetTypeID_FxnInst.init(nativeBuffer);
		CFFileDescriptorGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFFileDescriptorInvalidate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFFileDescriptorInvalidate_FxnInst(){
		return ((CFFileDescriptorInvalidate_FxnInst != null)
	? (CFFileDescriptorInvalidate_FxnInst)
	: (CFFileDescriptorInvalidate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFFileDescriptorInvalidate", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFFileDescriptorInvalidate(final com.apple.jobjc.corefoundation.CFFileDescriptorRefCFType f){
			final com.apple.jobjc.Invoke.FunCall CFFileDescriptorInvalidate_FxnInst = get_CFFileDescriptorInvalidate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFFileDescriptorInvalidate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, f);
		CFFileDescriptorInvalidate_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFFileDescriptorIsValid_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFFileDescriptorIsValid_FxnInst(){
		return ((CFFileDescriptorIsValid_FxnInst != null)
	? (CFFileDescriptorIsValid_FxnInst)
	: (CFFileDescriptorIsValid_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFFileDescriptorIsValid", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFFileDescriptorIsValid(final com.apple.jobjc.corefoundation.CFFileDescriptorRefCFType f){
			final com.apple.jobjc.Invoke.FunCall CFFileDescriptorIsValid_FxnInst = get_CFFileDescriptorIsValid_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFFileDescriptorIsValid_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, f);
		CFFileDescriptorIsValid_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFFileSecurityClearProperties_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFFileSecurityClearProperties_FxnInst(){
		return ((CFFileSecurityClearProperties_FxnInst != null)
	? (CFFileSecurityClearProperties_FxnInst)
	: (CFFileSecurityClearProperties_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFFileSecurityClearProperties", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public boolean CFFileSecurityClearProperties(final com.apple.jobjc.corefoundation.CFFileSecurityRefCFType fileSec, final long clearPropertyMask){
			final com.apple.jobjc.Invoke.FunCall CFFileSecurityClearProperties_FxnInst = get_CFFileSecurityClearProperties_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFFileSecurityClearProperties_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, fileSec);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, clearPropertyMask);
		CFFileSecurityClearProperties_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFFileSecurityCopyAccessControlList_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFFileSecurityCopyAccessControlList_FxnInst(){
		return ((CFFileSecurityCopyAccessControlList_FxnInst != null)
	? (CFFileSecurityCopyAccessControlList_FxnInst)
	: (CFFileSecurityCopyAccessControlList_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFFileSecurityCopyAccessControlList", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFFileSecurityCopyAccessControlList(final com.apple.jobjc.corefoundation.CFFileSecurityRefCFType fileSec, final com.apple.jobjc.Pointer<Object /* acl_t (^{_acl}, ^{_acl}) */> accessControlList){
			final com.apple.jobjc.Invoke.FunCall CFFileSecurityCopyAccessControlList_FxnInst = get_CFFileSecurityCopyAccessControlList_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFFileSecurityCopyAccessControlList_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, fileSec);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, accessControlList);
		CFFileSecurityCopyAccessControlList_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFFileSecurityCopyGroupUUID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFFileSecurityCopyGroupUUID_FxnInst(){
		return ((CFFileSecurityCopyGroupUUID_FxnInst != null)
	? (CFFileSecurityCopyGroupUUID_FxnInst)
	: (CFFileSecurityCopyGroupUUID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFFileSecurityCopyGroupUUID", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFFileSecurityCopyGroupUUID(final com.apple.jobjc.corefoundation.CFFileSecurityRefCFType fileSec, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFUUIDRefCFType> groupUUID){
			final com.apple.jobjc.Invoke.FunCall CFFileSecurityCopyGroupUUID_FxnInst = get_CFFileSecurityCopyGroupUUID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFFileSecurityCopyGroupUUID_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, fileSec);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, groupUUID);
		CFFileSecurityCopyGroupUUID_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFFileSecurityCopyOwnerUUID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFFileSecurityCopyOwnerUUID_FxnInst(){
		return ((CFFileSecurityCopyOwnerUUID_FxnInst != null)
	? (CFFileSecurityCopyOwnerUUID_FxnInst)
	: (CFFileSecurityCopyOwnerUUID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFFileSecurityCopyOwnerUUID", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFFileSecurityCopyOwnerUUID(final com.apple.jobjc.corefoundation.CFFileSecurityRefCFType fileSec, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFUUIDRefCFType> ownerUUID){
			final com.apple.jobjc.Invoke.FunCall CFFileSecurityCopyOwnerUUID_FxnInst = get_CFFileSecurityCopyOwnerUUID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFFileSecurityCopyOwnerUUID_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, fileSec);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, ownerUUID);
		CFFileSecurityCopyOwnerUUID_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFFileSecurityCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFFileSecurityCreate_FxnInst(){
		return ((CFFileSecurityCreate_FxnInst != null)
	? (CFFileSecurityCreate_FxnInst)
	: (CFFileSecurityCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFFileSecurityCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFFileSecurityRefCFType CFFileSecurityCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator){
			final com.apple.jobjc.Invoke.FunCall CFFileSecurityCreate_FxnInst = get_CFFileSecurityCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFFileSecurityCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		CFFileSecurityCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFFileSecurityRefCFType returnValue = (com.apple.jobjc.corefoundation.CFFileSecurityRefCFType) new com.apple.jobjc.corefoundation.CFFileSecurityRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFFileSecurityCreateCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFFileSecurityCreateCopy_FxnInst(){
		return ((CFFileSecurityCreateCopy_FxnInst != null)
	? (CFFileSecurityCreateCopy_FxnInst)
	: (CFFileSecurityCreateCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFFileSecurityCreateCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFFileSecurityRefCFType CFFileSecurityCreateCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFFileSecurityRefCFType fileSec){
			final com.apple.jobjc.Invoke.FunCall CFFileSecurityCreateCopy_FxnInst = get_CFFileSecurityCreateCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFFileSecurityCreateCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, fileSec);
		CFFileSecurityCreateCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFFileSecurityRefCFType returnValue = (com.apple.jobjc.corefoundation.CFFileSecurityRefCFType) new com.apple.jobjc.corefoundation.CFFileSecurityRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFFileSecurityGetGroup_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFFileSecurityGetGroup_FxnInst(){
		return ((CFFileSecurityGetGroup_FxnInst != null)
	? (CFFileSecurityGetGroup_FxnInst)
	: (CFFileSecurityGetGroup_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFFileSecurityGetGroup", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFFileSecurityGetGroup(final com.apple.jobjc.corefoundation.CFFileSecurityRefCFType fileSec, final com.apple.jobjc.Pointer<java.lang.Integer> group){
			final com.apple.jobjc.Invoke.FunCall CFFileSecurityGetGroup_FxnInst = get_CFFileSecurityGetGroup_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFFileSecurityGetGroup_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, fileSec);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, group);
		CFFileSecurityGetGroup_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFFileSecurityGetMode_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFFileSecurityGetMode_FxnInst(){
		return ((CFFileSecurityGetMode_FxnInst != null)
	? (CFFileSecurityGetMode_FxnInst)
	: (CFFileSecurityGetMode_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFFileSecurityGetMode", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFFileSecurityGetMode(final com.apple.jobjc.corefoundation.CFFileSecurityRefCFType fileSec, final com.apple.jobjc.Pointer<java.lang.Short> mode){
			final com.apple.jobjc.Invoke.FunCall CFFileSecurityGetMode_FxnInst = get_CFFileSecurityGetMode_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFFileSecurityGetMode_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, fileSec);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, mode);
		CFFileSecurityGetMode_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFFileSecurityGetOwner_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFFileSecurityGetOwner_FxnInst(){
		return ((CFFileSecurityGetOwner_FxnInst != null)
	? (CFFileSecurityGetOwner_FxnInst)
	: (CFFileSecurityGetOwner_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFFileSecurityGetOwner", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFFileSecurityGetOwner(final com.apple.jobjc.corefoundation.CFFileSecurityRefCFType fileSec, final com.apple.jobjc.Pointer<java.lang.Integer> owner){
			final com.apple.jobjc.Invoke.FunCall CFFileSecurityGetOwner_FxnInst = get_CFFileSecurityGetOwner_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFFileSecurityGetOwner_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, fileSec);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, owner);
		CFFileSecurityGetOwner_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFFileSecurityGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFFileSecurityGetTypeID_FxnInst(){
		return ((CFFileSecurityGetTypeID_FxnInst != null)
	? (CFFileSecurityGetTypeID_FxnInst)
	: (CFFileSecurityGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFFileSecurityGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFFileSecurityGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFFileSecurityGetTypeID_FxnInst = get_CFFileSecurityGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFFileSecurityGetTypeID_FxnInst.init(nativeBuffer);
		CFFileSecurityGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFFileSecuritySetAccessControlList_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFFileSecuritySetAccessControlList_FxnInst(){
		return ((CFFileSecuritySetAccessControlList_FxnInst != null)
	? (CFFileSecuritySetAccessControlList_FxnInst)
	: (CFFileSecuritySetAccessControlList_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFFileSecuritySetAccessControlList", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST)));
	}

	 public boolean CFFileSecuritySetAccessControlList(final com.apple.jobjc.corefoundation.CFFileSecurityRefCFType fileSec, final Object /* acl_t (^{_acl}, ^{_acl}) */ accessControlList){
			final com.apple.jobjc.Invoke.FunCall CFFileSecuritySetAccessControlList_FxnInst = get_CFFileSecuritySetAccessControlList_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFFileSecuritySetAccessControlList_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, fileSec);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, accessControlList);
		CFFileSecuritySetAccessControlList_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFFileSecuritySetGroup_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFFileSecuritySetGroup_FxnInst(){
		return ((CFFileSecuritySetGroup_FxnInst != null)
	? (CFFileSecuritySetGroup_FxnInst)
	: (CFFileSecuritySetGroup_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFFileSecuritySetGroup", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.UIntCoder.INST)));
	}

	 public boolean CFFileSecuritySetGroup(final com.apple.jobjc.corefoundation.CFFileSecurityRefCFType fileSec, final int group){
			final com.apple.jobjc.Invoke.FunCall CFFileSecuritySetGroup_FxnInst = get_CFFileSecuritySetGroup_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFFileSecuritySetGroup_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, fileSec);
		com.apple.jobjc.PrimitiveCoder.UIntCoder.INST.push(nativeBuffer, group);
		CFFileSecuritySetGroup_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFFileSecuritySetGroupUUID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFFileSecuritySetGroupUUID_FxnInst(){
		return ((CFFileSecuritySetGroupUUID_FxnInst != null)
	? (CFFileSecuritySetGroupUUID_FxnInst)
	: (CFFileSecuritySetGroupUUID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFFileSecuritySetGroupUUID", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFFileSecuritySetGroupUUID(final com.apple.jobjc.corefoundation.CFFileSecurityRefCFType fileSec, final com.apple.jobjc.corefoundation.CFUUIDRefCFType groupUUID){
			final com.apple.jobjc.Invoke.FunCall CFFileSecuritySetGroupUUID_FxnInst = get_CFFileSecuritySetGroupUUID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFFileSecuritySetGroupUUID_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, fileSec);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, groupUUID);
		CFFileSecuritySetGroupUUID_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFFileSecuritySetMode_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFFileSecuritySetMode_FxnInst(){
		return ((CFFileSecuritySetMode_FxnInst != null)
	? (CFFileSecuritySetMode_FxnInst)
	: (CFFileSecuritySetMode_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFFileSecuritySetMode", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.UShortCoder.INST)));
	}

	 public boolean CFFileSecuritySetMode(final com.apple.jobjc.corefoundation.CFFileSecurityRefCFType fileSec, final short mode){
			final com.apple.jobjc.Invoke.FunCall CFFileSecuritySetMode_FxnInst = get_CFFileSecuritySetMode_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFFileSecuritySetMode_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, fileSec);
		com.apple.jobjc.PrimitiveCoder.UShortCoder.INST.push(nativeBuffer, mode);
		CFFileSecuritySetMode_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFFileSecuritySetOwner_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFFileSecuritySetOwner_FxnInst(){
		return ((CFFileSecuritySetOwner_FxnInst != null)
	? (CFFileSecuritySetOwner_FxnInst)
	: (CFFileSecuritySetOwner_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFFileSecuritySetOwner", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.UIntCoder.INST)));
	}

	 public boolean CFFileSecuritySetOwner(final com.apple.jobjc.corefoundation.CFFileSecurityRefCFType fileSec, final int owner){
			final com.apple.jobjc.Invoke.FunCall CFFileSecuritySetOwner_FxnInst = get_CFFileSecuritySetOwner_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFFileSecuritySetOwner_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, fileSec);
		com.apple.jobjc.PrimitiveCoder.UIntCoder.INST.push(nativeBuffer, owner);
		CFFileSecuritySetOwner_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFFileSecuritySetOwnerUUID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFFileSecuritySetOwnerUUID_FxnInst(){
		return ((CFFileSecuritySetOwnerUUID_FxnInst != null)
	? (CFFileSecuritySetOwnerUUID_FxnInst)
	: (CFFileSecuritySetOwnerUUID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFFileSecuritySetOwnerUUID", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFFileSecuritySetOwnerUUID(final com.apple.jobjc.corefoundation.CFFileSecurityRefCFType fileSec, final com.apple.jobjc.corefoundation.CFUUIDRefCFType ownerUUID){
			final com.apple.jobjc.Invoke.FunCall CFFileSecuritySetOwnerUUID_FxnInst = get_CFFileSecuritySetOwnerUUID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFFileSecuritySetOwnerUUID_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, fileSec);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, ownerUUID);
		CFFileSecuritySetOwnerUUID_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFGetAllocator_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFGetAllocator_FxnInst(){
		return ((CFGetAllocator_FxnInst != null)
	? (CFGetAllocator_FxnInst)
	: (CFGetAllocator_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFGetAllocator", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFAllocatorRefCFType CFGetAllocator(final com.apple.jobjc.corefoundation.CFTypeRefCFType cf){
			final com.apple.jobjc.Invoke.FunCall CFGetAllocator_FxnInst = get_CFGetAllocator_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFGetAllocator_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, cf);
		CFGetAllocator_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFAllocatorRefCFType returnValue = (com.apple.jobjc.corefoundation.CFAllocatorRefCFType) new com.apple.jobjc.corefoundation.CFAllocatorRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFGetRetainCount_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFGetRetainCount_FxnInst(){
		return ((CFGetRetainCount_FxnInst != null)
	? (CFGetRetainCount_FxnInst)
	: (CFGetRetainCount_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFGetRetainCount", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFGetRetainCount(final com.apple.jobjc.corefoundation.CFTypeRefCFType cf){
			final com.apple.jobjc.Invoke.FunCall CFGetRetainCount_FxnInst = get_CFGetRetainCount_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFGetRetainCount_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, cf);
		CFGetRetainCount_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFGetTypeID_FxnInst(){
		return ((CFGetTypeID_FxnInst != null)
	? (CFGetTypeID_FxnInst)
	: (CFGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFGetTypeID(final com.apple.jobjc.corefoundation.CFTypeRefCFType cf){
			final com.apple.jobjc.Invoke.FunCall CFGetTypeID_FxnInst = get_CFGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFGetTypeID_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, cf);
		CFGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFGregorianDateGetAbsoluteTime_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFGregorianDateGetAbsoluteTime_FxnInst(){
		return ((CFGregorianDateGetAbsoluteTime_FxnInst != null)
	? (CFGregorianDateGetAbsoluteTime_FxnInst)
	: (CFGregorianDateGetAbsoluteTime_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFGregorianDateGetAbsoluteTime", com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.corefoundation.CFGregorianDate.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public double CFGregorianDateGetAbsoluteTime(final com.apple.jobjc.corefoundation.CFGregorianDate gdate, final com.apple.jobjc.corefoundation.CFTimeZoneRefCFType tz){
			final com.apple.jobjc.Invoke.FunCall CFGregorianDateGetAbsoluteTime_FxnInst = get_CFGregorianDateGetAbsoluteTime_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFGregorianDateGetAbsoluteTime_FxnInst.init(nativeBuffer);
		com.apple.jobjc.corefoundation.CFGregorianDate.getStructCoder().push(nativeBuffer, gdate);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tz);
		CFGregorianDateGetAbsoluteTime_FxnInst.invoke(nativeBuffer);
		final double returnValue = (double) (com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.popDouble(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFGregorianDateIsValid_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFGregorianDateIsValid_FxnInst(){
		return ((CFGregorianDateIsValid_FxnInst != null)
	? (CFGregorianDateIsValid_FxnInst)
	: (CFGregorianDateIsValid_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFGregorianDateIsValid", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.corefoundation.CFGregorianDate.getStructCoder(), com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public boolean CFGregorianDateIsValid(final com.apple.jobjc.corefoundation.CFGregorianDate gdate, final long unitFlags){
			final com.apple.jobjc.Invoke.FunCall CFGregorianDateIsValid_FxnInst = get_CFGregorianDateIsValid_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFGregorianDateIsValid_FxnInst.init(nativeBuffer);
		com.apple.jobjc.corefoundation.CFGregorianDate.getStructCoder().push(nativeBuffer, gdate);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, unitFlags);
		CFGregorianDateIsValid_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFHash_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFHash_FxnInst(){
		return ((CFHash_FxnInst != null)
	? (CFHash_FxnInst)
	: (CFHash_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFHash", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFHash(final com.apple.jobjc.corefoundation.CFTypeRefCFType cf){
			final com.apple.jobjc.Invoke.FunCall CFHash_FxnInst = get_CFHash_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFHash_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, cf);
		CFHash_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFLocaleCopyAvailableLocaleIdentifiers_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFLocaleCopyAvailableLocaleIdentifiers_FxnInst(){
		return ((CFLocaleCopyAvailableLocaleIdentifiers_FxnInst != null)
	? (CFLocaleCopyAvailableLocaleIdentifiers_FxnInst)
	: (CFLocaleCopyAvailableLocaleIdentifiers_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFLocaleCopyAvailableLocaleIdentifiers", com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFArrayRefCFType CFLocaleCopyAvailableLocaleIdentifiers(){
			final com.apple.jobjc.Invoke.FunCall CFLocaleCopyAvailableLocaleIdentifiers_FxnInst = get_CFLocaleCopyAvailableLocaleIdentifiers_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFLocaleCopyAvailableLocaleIdentifiers_FxnInst.init(nativeBuffer);
		CFLocaleCopyAvailableLocaleIdentifiers_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFArrayRefCFType) new com.apple.jobjc.corefoundation.CFArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFLocaleCopyCommonISOCurrencyCodes_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFLocaleCopyCommonISOCurrencyCodes_FxnInst(){
		return ((CFLocaleCopyCommonISOCurrencyCodes_FxnInst != null)
	? (CFLocaleCopyCommonISOCurrencyCodes_FxnInst)
	: (CFLocaleCopyCommonISOCurrencyCodes_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFLocaleCopyCommonISOCurrencyCodes", com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFArrayRefCFType CFLocaleCopyCommonISOCurrencyCodes(){
			final com.apple.jobjc.Invoke.FunCall CFLocaleCopyCommonISOCurrencyCodes_FxnInst = get_CFLocaleCopyCommonISOCurrencyCodes_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFLocaleCopyCommonISOCurrencyCodes_FxnInst.init(nativeBuffer);
		CFLocaleCopyCommonISOCurrencyCodes_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFArrayRefCFType) new com.apple.jobjc.corefoundation.CFArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFLocaleCopyCurrent_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFLocaleCopyCurrent_FxnInst(){
		return ((CFLocaleCopyCurrent_FxnInst != null)
	? (CFLocaleCopyCurrent_FxnInst)
	: (CFLocaleCopyCurrent_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFLocaleCopyCurrent", com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFLocaleRefCFType CFLocaleCopyCurrent(){
			final com.apple.jobjc.Invoke.FunCall CFLocaleCopyCurrent_FxnInst = get_CFLocaleCopyCurrent_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFLocaleCopyCurrent_FxnInst.init(nativeBuffer);
		CFLocaleCopyCurrent_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFLocaleRefCFType returnValue = (com.apple.jobjc.corefoundation.CFLocaleRefCFType) new com.apple.jobjc.corefoundation.CFLocaleRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFLocaleCopyDisplayNameForPropertyValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFLocaleCopyDisplayNameForPropertyValue_FxnInst(){
		return ((CFLocaleCopyDisplayNameForPropertyValue_FxnInst != null)
	? (CFLocaleCopyDisplayNameForPropertyValue_FxnInst)
	: (CFLocaleCopyDisplayNameForPropertyValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFLocaleCopyDisplayNameForPropertyValue", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFLocaleCopyDisplayNameForPropertyValue(final com.apple.jobjc.corefoundation.CFLocaleRefCFType displayLocale, final com.apple.jobjc.corefoundation.CFStringRefCFType key, final com.apple.jobjc.corefoundation.CFStringRefCFType value){
			final com.apple.jobjc.Invoke.FunCall CFLocaleCopyDisplayNameForPropertyValue_FxnInst = get_CFLocaleCopyDisplayNameForPropertyValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFLocaleCopyDisplayNameForPropertyValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, displayLocale);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, key);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFLocaleCopyDisplayNameForPropertyValue_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFLocaleCopyISOCountryCodes_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFLocaleCopyISOCountryCodes_FxnInst(){
		return ((CFLocaleCopyISOCountryCodes_FxnInst != null)
	? (CFLocaleCopyISOCountryCodes_FxnInst)
	: (CFLocaleCopyISOCountryCodes_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFLocaleCopyISOCountryCodes", com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFArrayRefCFType CFLocaleCopyISOCountryCodes(){
			final com.apple.jobjc.Invoke.FunCall CFLocaleCopyISOCountryCodes_FxnInst = get_CFLocaleCopyISOCountryCodes_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFLocaleCopyISOCountryCodes_FxnInst.init(nativeBuffer);
		CFLocaleCopyISOCountryCodes_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFArrayRefCFType) new com.apple.jobjc.corefoundation.CFArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFLocaleCopyISOCurrencyCodes_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFLocaleCopyISOCurrencyCodes_FxnInst(){
		return ((CFLocaleCopyISOCurrencyCodes_FxnInst != null)
	? (CFLocaleCopyISOCurrencyCodes_FxnInst)
	: (CFLocaleCopyISOCurrencyCodes_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFLocaleCopyISOCurrencyCodes", com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFArrayRefCFType CFLocaleCopyISOCurrencyCodes(){
			final com.apple.jobjc.Invoke.FunCall CFLocaleCopyISOCurrencyCodes_FxnInst = get_CFLocaleCopyISOCurrencyCodes_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFLocaleCopyISOCurrencyCodes_FxnInst.init(nativeBuffer);
		CFLocaleCopyISOCurrencyCodes_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFArrayRefCFType) new com.apple.jobjc.corefoundation.CFArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFLocaleCopyISOLanguageCodes_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFLocaleCopyISOLanguageCodes_FxnInst(){
		return ((CFLocaleCopyISOLanguageCodes_FxnInst != null)
	? (CFLocaleCopyISOLanguageCodes_FxnInst)
	: (CFLocaleCopyISOLanguageCodes_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFLocaleCopyISOLanguageCodes", com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFArrayRefCFType CFLocaleCopyISOLanguageCodes(){
			final com.apple.jobjc.Invoke.FunCall CFLocaleCopyISOLanguageCodes_FxnInst = get_CFLocaleCopyISOLanguageCodes_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFLocaleCopyISOLanguageCodes_FxnInst.init(nativeBuffer);
		CFLocaleCopyISOLanguageCodes_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFArrayRefCFType) new com.apple.jobjc.corefoundation.CFArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFLocaleCopyPreferredLanguages_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFLocaleCopyPreferredLanguages_FxnInst(){
		return ((CFLocaleCopyPreferredLanguages_FxnInst != null)
	? (CFLocaleCopyPreferredLanguages_FxnInst)
	: (CFLocaleCopyPreferredLanguages_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFLocaleCopyPreferredLanguages", com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFArrayRefCFType CFLocaleCopyPreferredLanguages(){
			final com.apple.jobjc.Invoke.FunCall CFLocaleCopyPreferredLanguages_FxnInst = get_CFLocaleCopyPreferredLanguages_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFLocaleCopyPreferredLanguages_FxnInst.init(nativeBuffer);
		CFLocaleCopyPreferredLanguages_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFArrayRefCFType) new com.apple.jobjc.corefoundation.CFArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFLocaleCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFLocaleCreate_FxnInst(){
		return ((CFLocaleCreate_FxnInst != null)
	? (CFLocaleCreate_FxnInst)
	: (CFLocaleCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFLocaleCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFLocaleRefCFType CFLocaleCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFStringRefCFType localeIdentifier){
			final com.apple.jobjc.Invoke.FunCall CFLocaleCreate_FxnInst = get_CFLocaleCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFLocaleCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, localeIdentifier);
		CFLocaleCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFLocaleRefCFType returnValue = (com.apple.jobjc.corefoundation.CFLocaleRefCFType) new com.apple.jobjc.corefoundation.CFLocaleRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFLocaleCreateCanonicalLanguageIdentifierFromString_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFLocaleCreateCanonicalLanguageIdentifierFromString_FxnInst(){
		return ((CFLocaleCreateCanonicalLanguageIdentifierFromString_FxnInst != null)
	? (CFLocaleCreateCanonicalLanguageIdentifierFromString_FxnInst)
	: (CFLocaleCreateCanonicalLanguageIdentifierFromString_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFLocaleCreateCanonicalLanguageIdentifierFromString", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFLocaleCreateCanonicalLanguageIdentifierFromString(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFStringRefCFType localeIdentifier){
			final com.apple.jobjc.Invoke.FunCall CFLocaleCreateCanonicalLanguageIdentifierFromString_FxnInst = get_CFLocaleCreateCanonicalLanguageIdentifierFromString_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFLocaleCreateCanonicalLanguageIdentifierFromString_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, localeIdentifier);
		CFLocaleCreateCanonicalLanguageIdentifierFromString_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes_FxnInst(){
		return ((CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes_FxnInst != null)
	? (CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes_FxnInst)
	: (CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.SShortCoder.INST, com.apple.jobjc.PrimitiveCoder.SShortCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final short lcode, final short rcode){
			final com.apple.jobjc.Invoke.FunCall CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes_FxnInst = get_CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.PrimitiveCoder.SShortCoder.INST.push(nativeBuffer, lcode);
		com.apple.jobjc.PrimitiveCoder.SShortCoder.INST.push(nativeBuffer, rcode);
		CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFLocaleCreateCanonicalLocaleIdentifierFromString_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFLocaleCreateCanonicalLocaleIdentifierFromString_FxnInst(){
		return ((CFLocaleCreateCanonicalLocaleIdentifierFromString_FxnInst != null)
	? (CFLocaleCreateCanonicalLocaleIdentifierFromString_FxnInst)
	: (CFLocaleCreateCanonicalLocaleIdentifierFromString_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFLocaleCreateCanonicalLocaleIdentifierFromString", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFLocaleCreateCanonicalLocaleIdentifierFromString(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFStringRefCFType localeIdentifier){
			final com.apple.jobjc.Invoke.FunCall CFLocaleCreateCanonicalLocaleIdentifierFromString_FxnInst = get_CFLocaleCreateCanonicalLocaleIdentifierFromString_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFLocaleCreateCanonicalLocaleIdentifierFromString_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, localeIdentifier);
		CFLocaleCreateCanonicalLocaleIdentifierFromString_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFLocaleCreateComponentsFromLocaleIdentifier_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFLocaleCreateComponentsFromLocaleIdentifier_FxnInst(){
		return ((CFLocaleCreateComponentsFromLocaleIdentifier_FxnInst != null)
	? (CFLocaleCreateComponentsFromLocaleIdentifier_FxnInst)
	: (CFLocaleCreateComponentsFromLocaleIdentifier_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFLocaleCreateComponentsFromLocaleIdentifier", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDictionaryRefCFType CFLocaleCreateComponentsFromLocaleIdentifier(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFStringRefCFType localeID){
			final com.apple.jobjc.Invoke.FunCall CFLocaleCreateComponentsFromLocaleIdentifier_FxnInst = get_CFLocaleCreateComponentsFromLocaleIdentifier_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFLocaleCreateComponentsFromLocaleIdentifier_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, localeID);
		CFLocaleCreateComponentsFromLocaleIdentifier_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDictionaryRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDictionaryRefCFType) new com.apple.jobjc.corefoundation.CFDictionaryRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFLocaleCreateCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFLocaleCreateCopy_FxnInst(){
		return ((CFLocaleCreateCopy_FxnInst != null)
	? (CFLocaleCreateCopy_FxnInst)
	: (CFLocaleCreateCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFLocaleCreateCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFLocaleRefCFType CFLocaleCreateCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFLocaleRefCFType locale){
			final com.apple.jobjc.Invoke.FunCall CFLocaleCreateCopy_FxnInst = get_CFLocaleCreateCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFLocaleCreateCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, locale);
		CFLocaleCreateCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFLocaleRefCFType returnValue = (com.apple.jobjc.corefoundation.CFLocaleRefCFType) new com.apple.jobjc.corefoundation.CFLocaleRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFLocaleCreateLocaleIdentifierFromComponents_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFLocaleCreateLocaleIdentifierFromComponents_FxnInst(){
		return ((CFLocaleCreateLocaleIdentifierFromComponents_FxnInst != null)
	? (CFLocaleCreateLocaleIdentifierFromComponents_FxnInst)
	: (CFLocaleCreateLocaleIdentifierFromComponents_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFLocaleCreateLocaleIdentifierFromComponents", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFLocaleCreateLocaleIdentifierFromComponents(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFDictionaryRefCFType dictionary){
			final com.apple.jobjc.Invoke.FunCall CFLocaleCreateLocaleIdentifierFromComponents_FxnInst = get_CFLocaleCreateLocaleIdentifierFromComponents_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFLocaleCreateLocaleIdentifierFromComponents_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, dictionary);
		CFLocaleCreateLocaleIdentifierFromComponents_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode_FxnInst(){
		return ((CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode_FxnInst != null)
	? (CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode_FxnInst)
	: (CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.UIntCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final int lcid){
			final com.apple.jobjc.Invoke.FunCall CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode_FxnInst = get_CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.PrimitiveCoder.UIntCoder.INST.push(nativeBuffer, lcid);
		CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFLocaleGetIdentifier_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFLocaleGetIdentifier_FxnInst(){
		return ((CFLocaleGetIdentifier_FxnInst != null)
	? (CFLocaleGetIdentifier_FxnInst)
	: (CFLocaleGetIdentifier_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFLocaleGetIdentifier", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFLocaleGetIdentifier(final com.apple.jobjc.corefoundation.CFLocaleRefCFType locale){
			final com.apple.jobjc.Invoke.FunCall CFLocaleGetIdentifier_FxnInst = get_CFLocaleGetIdentifier_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFLocaleGetIdentifier_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, locale);
		CFLocaleGetIdentifier_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFLocaleGetLanguageCharacterDirection_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFLocaleGetLanguageCharacterDirection_FxnInst(){
		return ((CFLocaleGetLanguageCharacterDirection_FxnInst != null)
	? (CFLocaleGetLanguageCharacterDirection_FxnInst)
	: (CFLocaleGetLanguageCharacterDirection_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFLocaleGetLanguageCharacterDirection", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFLocaleGetLanguageCharacterDirection(final com.apple.jobjc.corefoundation.CFStringRefCFType isoLangCode){
			final com.apple.jobjc.Invoke.FunCall CFLocaleGetLanguageCharacterDirection_FxnInst = get_CFLocaleGetLanguageCharacterDirection_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFLocaleGetLanguageCharacterDirection_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, isoLangCode);
		CFLocaleGetLanguageCharacterDirection_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFLocaleGetLanguageLineDirection_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFLocaleGetLanguageLineDirection_FxnInst(){
		return ((CFLocaleGetLanguageLineDirection_FxnInst != null)
	? (CFLocaleGetLanguageLineDirection_FxnInst)
	: (CFLocaleGetLanguageLineDirection_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFLocaleGetLanguageLineDirection", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFLocaleGetLanguageLineDirection(final com.apple.jobjc.corefoundation.CFStringRefCFType isoLangCode){
			final com.apple.jobjc.Invoke.FunCall CFLocaleGetLanguageLineDirection_FxnInst = get_CFLocaleGetLanguageLineDirection_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFLocaleGetLanguageLineDirection_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, isoLangCode);
		CFLocaleGetLanguageLineDirection_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFLocaleGetSystem_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFLocaleGetSystem_FxnInst(){
		return ((CFLocaleGetSystem_FxnInst != null)
	? (CFLocaleGetSystem_FxnInst)
	: (CFLocaleGetSystem_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFLocaleGetSystem", com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFLocaleRefCFType CFLocaleGetSystem(){
			final com.apple.jobjc.Invoke.FunCall CFLocaleGetSystem_FxnInst = get_CFLocaleGetSystem_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFLocaleGetSystem_FxnInst.init(nativeBuffer);
		CFLocaleGetSystem_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFLocaleRefCFType returnValue = (com.apple.jobjc.corefoundation.CFLocaleRefCFType) new com.apple.jobjc.corefoundation.CFLocaleRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFLocaleGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFLocaleGetTypeID_FxnInst(){
		return ((CFLocaleGetTypeID_FxnInst != null)
	? (CFLocaleGetTypeID_FxnInst)
	: (CFLocaleGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFLocaleGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFLocaleGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFLocaleGetTypeID_FxnInst = get_CFLocaleGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFLocaleGetTypeID_FxnInst.init(nativeBuffer);
		CFLocaleGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFLocaleGetValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFLocaleGetValue_FxnInst(){
		return ((CFLocaleGetValue_FxnInst != null)
	? (CFLocaleGetValue_FxnInst)
	: (CFLocaleGetValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFLocaleGetValue", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFTypeRefCFType CFLocaleGetValue(final com.apple.jobjc.corefoundation.CFLocaleRefCFType locale, final com.apple.jobjc.corefoundation.CFStringRefCFType key){
			final com.apple.jobjc.Invoke.FunCall CFLocaleGetValue_FxnInst = get_CFLocaleGetValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFLocaleGetValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, locale);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, key);
		CFLocaleGetValue_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFTypeRefCFType returnValue = (com.apple.jobjc.corefoundation.CFTypeRefCFType) new com.apple.jobjc.corefoundation.CFTypeRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier_FxnInst(){
		return ((CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier_FxnInst != null)
	? (CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier_FxnInst)
	: (CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier", com.apple.jobjc.PrimitiveCoder.UIntCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public int CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(final com.apple.jobjc.corefoundation.CFStringRefCFType localeIdentifier){
			final com.apple.jobjc.Invoke.FunCall CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier_FxnInst = get_CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, localeIdentifier);
		CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.PrimitiveCoder.UIntCoder.INST.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFMachPortCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFMachPortCreate_FxnInst(){
		return ((CFMachPortCreate_FxnInst != null)
	? (CFMachPortCreate_FxnInst)
	: (CFMachPortCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFMachPortCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFMachPortRefCFType CFMachPortCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final Object /* CFMachPortCallBack (^?, ^?) */ callout, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFMachPortContext> context, final com.apple.jobjc.Pointer<java.lang.Boolean> shouldFreeInfo){
			final com.apple.jobjc.Invoke.FunCall CFMachPortCreate_FxnInst = get_CFMachPortCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFMachPortCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, callout);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, shouldFreeInfo);
		CFMachPortCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFMachPortRefCFType returnValue = (com.apple.jobjc.corefoundation.CFMachPortRefCFType) new com.apple.jobjc.corefoundation.CFMachPortRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFMachPortCreateRunLoopSource_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFMachPortCreateRunLoopSource_FxnInst(){
		return ((CFMachPortCreateRunLoopSource_FxnInst != null)
	? (CFMachPortCreateRunLoopSource_FxnInst)
	: (CFMachPortCreateRunLoopSource_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFMachPortCreateRunLoopSource", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType CFMachPortCreateRunLoopSource(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFMachPortRefCFType port, final long order){
			final com.apple.jobjc.Invoke.FunCall CFMachPortCreateRunLoopSource_FxnInst = get_CFMachPortCreateRunLoopSource_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFMachPortCreateRunLoopSource_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, port);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, order);
		CFMachPortCreateRunLoopSource_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType returnValue = (com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType) new com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFMachPortCreateWithPort_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFMachPortCreateWithPort_FxnInst(){
		return ((CFMachPortCreateWithPort_FxnInst != null)
	? (CFMachPortCreateWithPort_FxnInst)
	: (CFMachPortCreateWithPort_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFMachPortCreateWithPort", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.UIntCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFMachPortRefCFType CFMachPortCreateWithPort(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final int portNum, final Object /* CFMachPortCallBack (^?, ^?) */ callout, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFMachPortContext> context, final com.apple.jobjc.Pointer<java.lang.Boolean> shouldFreeInfo){
			final com.apple.jobjc.Invoke.FunCall CFMachPortCreateWithPort_FxnInst = get_CFMachPortCreateWithPort_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFMachPortCreateWithPort_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.PrimitiveCoder.UIntCoder.INST.push(nativeBuffer, portNum);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, callout);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, shouldFreeInfo);
		CFMachPortCreateWithPort_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFMachPortRefCFType returnValue = (com.apple.jobjc.corefoundation.CFMachPortRefCFType) new com.apple.jobjc.corefoundation.CFMachPortRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFMachPortGetContext_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFMachPortGetContext_FxnInst(){
		return ((CFMachPortGetContext_FxnInst != null)
	? (CFMachPortGetContext_FxnInst)
	: (CFMachPortGetContext_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFMachPortGetContext", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFMachPortGetContext(final com.apple.jobjc.corefoundation.CFMachPortRefCFType port, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFMachPortContext> context){
			final com.apple.jobjc.Invoke.FunCall CFMachPortGetContext_FxnInst = get_CFMachPortGetContext_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFMachPortGetContext_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, port);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFMachPortGetContext_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFMachPortGetInvalidationCallBack_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFMachPortGetInvalidationCallBack_FxnInst(){
		return ((CFMachPortGetInvalidationCallBack_FxnInst != null)
	? (CFMachPortGetInvalidationCallBack_FxnInst)
	: (CFMachPortGetInvalidationCallBack_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFMachPortGetInvalidationCallBack", com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public Object /* CFMachPortInvalidationCallBack (^?, ^?) */ CFMachPortGetInvalidationCallBack(final com.apple.jobjc.corefoundation.CFMachPortRefCFType port){
			final com.apple.jobjc.Invoke.FunCall CFMachPortGetInvalidationCallBack_FxnInst = get_CFMachPortGetInvalidationCallBack_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFMachPortGetInvalidationCallBack_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, port);
		CFMachPortGetInvalidationCallBack_FxnInst.invoke(nativeBuffer);
		final Object /* CFMachPortInvalidationCallBack (^?, ^?) */ returnValue = (Object /* CFMachPortInvalidationCallBack (^?, ^?) */) (com.apple.jobjc.Coder.UnknownCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFMachPortGetPort_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFMachPortGetPort_FxnInst(){
		return ((CFMachPortGetPort_FxnInst != null)
	? (CFMachPortGetPort_FxnInst)
	: (CFMachPortGetPort_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFMachPortGetPort", com.apple.jobjc.PrimitiveCoder.UIntCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public int CFMachPortGetPort(final com.apple.jobjc.corefoundation.CFMachPortRefCFType port){
			final com.apple.jobjc.Invoke.FunCall CFMachPortGetPort_FxnInst = get_CFMachPortGetPort_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFMachPortGetPort_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, port);
		CFMachPortGetPort_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.PrimitiveCoder.UIntCoder.INST.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFMachPortGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFMachPortGetTypeID_FxnInst(){
		return ((CFMachPortGetTypeID_FxnInst != null)
	? (CFMachPortGetTypeID_FxnInst)
	: (CFMachPortGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFMachPortGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFMachPortGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFMachPortGetTypeID_FxnInst = get_CFMachPortGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFMachPortGetTypeID_FxnInst.init(nativeBuffer);
		CFMachPortGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFMachPortInvalidate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFMachPortInvalidate_FxnInst(){
		return ((CFMachPortInvalidate_FxnInst != null)
	? (CFMachPortInvalidate_FxnInst)
	: (CFMachPortInvalidate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFMachPortInvalidate", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFMachPortInvalidate(final com.apple.jobjc.corefoundation.CFMachPortRefCFType port){
			final com.apple.jobjc.Invoke.FunCall CFMachPortInvalidate_FxnInst = get_CFMachPortInvalidate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFMachPortInvalidate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, port);
		CFMachPortInvalidate_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFMachPortIsValid_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFMachPortIsValid_FxnInst(){
		return ((CFMachPortIsValid_FxnInst != null)
	? (CFMachPortIsValid_FxnInst)
	: (CFMachPortIsValid_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFMachPortIsValid", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFMachPortIsValid(final com.apple.jobjc.corefoundation.CFMachPortRefCFType port){
			final com.apple.jobjc.Invoke.FunCall CFMachPortIsValid_FxnInst = get_CFMachPortIsValid_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFMachPortIsValid_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, port);
		CFMachPortIsValid_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFMachPortSetInvalidationCallBack_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFMachPortSetInvalidationCallBack_FxnInst(){
		return ((CFMachPortSetInvalidationCallBack_FxnInst != null)
	? (CFMachPortSetInvalidationCallBack_FxnInst)
	: (CFMachPortSetInvalidationCallBack_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFMachPortSetInvalidationCallBack", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST)));
	}

	 public void CFMachPortSetInvalidationCallBack(final com.apple.jobjc.corefoundation.CFMachPortRefCFType port, final Object /* CFMachPortInvalidationCallBack (^?, ^?) */ callout){
			final com.apple.jobjc.Invoke.FunCall CFMachPortSetInvalidationCallBack_FxnInst = get_CFMachPortSetInvalidationCallBack_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFMachPortSetInvalidationCallBack_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, port);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, callout);
		CFMachPortSetInvalidationCallBack_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFMakeCollectable_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFMakeCollectable_FxnInst(){
		return ((CFMakeCollectable_FxnInst != null)
	? (CFMakeCollectable_FxnInst)
	: (CFMakeCollectable_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFMakeCollectable", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFTypeRefCFType CFMakeCollectable(final com.apple.jobjc.corefoundation.CFTypeRefCFType cf){
			final com.apple.jobjc.Invoke.FunCall CFMakeCollectable_FxnInst = get_CFMakeCollectable_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFMakeCollectable_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, cf);
		CFMakeCollectable_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFTypeRefCFType returnValue = (com.apple.jobjc.corefoundation.CFTypeRefCFType) new com.apple.jobjc.corefoundation.CFTypeRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFMessagePortCreateLocal_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFMessagePortCreateLocal_FxnInst(){
		return ((CFMessagePortCreateLocal_FxnInst != null)
	? (CFMessagePortCreateLocal_FxnInst)
	: (CFMessagePortCreateLocal_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFMessagePortCreateLocal", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFMessagePortRefCFType CFMessagePortCreateLocal(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFStringRefCFType name, final Object /* CFMessagePortCallBack (^?, ^?) */ callout, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFMessagePortContext> context, final com.apple.jobjc.Pointer<java.lang.Boolean> shouldFreeInfo){
			final com.apple.jobjc.Invoke.FunCall CFMessagePortCreateLocal_FxnInst = get_CFMessagePortCreateLocal_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFMessagePortCreateLocal_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, name);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, callout);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, shouldFreeInfo);
		CFMessagePortCreateLocal_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFMessagePortRefCFType returnValue = (com.apple.jobjc.corefoundation.CFMessagePortRefCFType) new com.apple.jobjc.corefoundation.CFMessagePortRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFMessagePortCreateRemote_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFMessagePortCreateRemote_FxnInst(){
		return ((CFMessagePortCreateRemote_FxnInst != null)
	? (CFMessagePortCreateRemote_FxnInst)
	: (CFMessagePortCreateRemote_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFMessagePortCreateRemote", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFMessagePortRefCFType CFMessagePortCreateRemote(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFStringRefCFType name){
			final com.apple.jobjc.Invoke.FunCall CFMessagePortCreateRemote_FxnInst = get_CFMessagePortCreateRemote_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFMessagePortCreateRemote_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, name);
		CFMessagePortCreateRemote_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFMessagePortRefCFType returnValue = (com.apple.jobjc.corefoundation.CFMessagePortRefCFType) new com.apple.jobjc.corefoundation.CFMessagePortRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFMessagePortCreateRunLoopSource_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFMessagePortCreateRunLoopSource_FxnInst(){
		return ((CFMessagePortCreateRunLoopSource_FxnInst != null)
	? (CFMessagePortCreateRunLoopSource_FxnInst)
	: (CFMessagePortCreateRunLoopSource_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFMessagePortCreateRunLoopSource", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType CFMessagePortCreateRunLoopSource(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFMessagePortRefCFType local, final long order){
			final com.apple.jobjc.Invoke.FunCall CFMessagePortCreateRunLoopSource_FxnInst = get_CFMessagePortCreateRunLoopSource_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFMessagePortCreateRunLoopSource_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, local);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, order);
		CFMessagePortCreateRunLoopSource_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType returnValue = (com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType) new com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFMessagePortGetContext_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFMessagePortGetContext_FxnInst(){
		return ((CFMessagePortGetContext_FxnInst != null)
	? (CFMessagePortGetContext_FxnInst)
	: (CFMessagePortGetContext_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFMessagePortGetContext", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFMessagePortGetContext(final com.apple.jobjc.corefoundation.CFMessagePortRefCFType ms, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFMessagePortContext> context){
			final com.apple.jobjc.Invoke.FunCall CFMessagePortGetContext_FxnInst = get_CFMessagePortGetContext_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFMessagePortGetContext_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, ms);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFMessagePortGetContext_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFMessagePortGetInvalidationCallBack_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFMessagePortGetInvalidationCallBack_FxnInst(){
		return ((CFMessagePortGetInvalidationCallBack_FxnInst != null)
	? (CFMessagePortGetInvalidationCallBack_FxnInst)
	: (CFMessagePortGetInvalidationCallBack_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFMessagePortGetInvalidationCallBack", com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public Object /* CFMessagePortInvalidationCallBack (^?, ^?) */ CFMessagePortGetInvalidationCallBack(final com.apple.jobjc.corefoundation.CFMessagePortRefCFType ms){
			final com.apple.jobjc.Invoke.FunCall CFMessagePortGetInvalidationCallBack_FxnInst = get_CFMessagePortGetInvalidationCallBack_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFMessagePortGetInvalidationCallBack_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, ms);
		CFMessagePortGetInvalidationCallBack_FxnInst.invoke(nativeBuffer);
		final Object /* CFMessagePortInvalidationCallBack (^?, ^?) */ returnValue = (Object /* CFMessagePortInvalidationCallBack (^?, ^?) */) (com.apple.jobjc.Coder.UnknownCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFMessagePortGetName_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFMessagePortGetName_FxnInst(){
		return ((CFMessagePortGetName_FxnInst != null)
	? (CFMessagePortGetName_FxnInst)
	: (CFMessagePortGetName_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFMessagePortGetName", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFMessagePortGetName(final com.apple.jobjc.corefoundation.CFMessagePortRefCFType ms){
			final com.apple.jobjc.Invoke.FunCall CFMessagePortGetName_FxnInst = get_CFMessagePortGetName_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFMessagePortGetName_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, ms);
		CFMessagePortGetName_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFMessagePortGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFMessagePortGetTypeID_FxnInst(){
		return ((CFMessagePortGetTypeID_FxnInst != null)
	? (CFMessagePortGetTypeID_FxnInst)
	: (CFMessagePortGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFMessagePortGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFMessagePortGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFMessagePortGetTypeID_FxnInst = get_CFMessagePortGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFMessagePortGetTypeID_FxnInst.init(nativeBuffer);
		CFMessagePortGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFMessagePortInvalidate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFMessagePortInvalidate_FxnInst(){
		return ((CFMessagePortInvalidate_FxnInst != null)
	? (CFMessagePortInvalidate_FxnInst)
	: (CFMessagePortInvalidate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFMessagePortInvalidate", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFMessagePortInvalidate(final com.apple.jobjc.corefoundation.CFMessagePortRefCFType ms){
			final com.apple.jobjc.Invoke.FunCall CFMessagePortInvalidate_FxnInst = get_CFMessagePortInvalidate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFMessagePortInvalidate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, ms);
		CFMessagePortInvalidate_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFMessagePortIsRemote_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFMessagePortIsRemote_FxnInst(){
		return ((CFMessagePortIsRemote_FxnInst != null)
	? (CFMessagePortIsRemote_FxnInst)
	: (CFMessagePortIsRemote_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFMessagePortIsRemote", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFMessagePortIsRemote(final com.apple.jobjc.corefoundation.CFMessagePortRefCFType ms){
			final com.apple.jobjc.Invoke.FunCall CFMessagePortIsRemote_FxnInst = get_CFMessagePortIsRemote_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFMessagePortIsRemote_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, ms);
		CFMessagePortIsRemote_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFMessagePortIsValid_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFMessagePortIsValid_FxnInst(){
		return ((CFMessagePortIsValid_FxnInst != null)
	? (CFMessagePortIsValid_FxnInst)
	: (CFMessagePortIsValid_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFMessagePortIsValid", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFMessagePortIsValid(final com.apple.jobjc.corefoundation.CFMessagePortRefCFType ms){
			final com.apple.jobjc.Invoke.FunCall CFMessagePortIsValid_FxnInst = get_CFMessagePortIsValid_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFMessagePortIsValid_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, ms);
		CFMessagePortIsValid_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFMessagePortSendRequest_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFMessagePortSendRequest_FxnInst(){
		return ((CFMessagePortSendRequest_FxnInst != null)
	? (CFMessagePortSendRequest_FxnInst)
	: (CFMessagePortSendRequest_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFMessagePortSendRequest", com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public int CFMessagePortSendRequest(final com.apple.jobjc.corefoundation.CFMessagePortRefCFType remote, final int msgid, final com.apple.jobjc.corefoundation.CFDataRefCFType data, final double sendTimeout, final double rcvTimeout, final com.apple.jobjc.corefoundation.CFStringRefCFType replyMode, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFDataRefCFType> returnData){
			final com.apple.jobjc.Invoke.FunCall CFMessagePortSendRequest_FxnInst = get_CFMessagePortSendRequest_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFMessagePortSendRequest_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, remote);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder.push(nativeBuffer, msgid);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, data);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, sendTimeout);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, rcvTimeout);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, replyMode);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, returnData);
		CFMessagePortSendRequest_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFMessagePortSetDispatchQueue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFMessagePortSetDispatchQueue_FxnInst(){
		return ((CFMessagePortSetDispatchQueue_FxnInst != null)
	? (CFMessagePortSetDispatchQueue_FxnInst)
	: (CFMessagePortSetDispatchQueue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFMessagePortSetDispatchQueue", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST)));
	}

	 public void CFMessagePortSetDispatchQueue(final com.apple.jobjc.corefoundation.CFMessagePortRefCFType ms, final Object /* dispatch_queue_t (@, @) */ queue){
			final com.apple.jobjc.Invoke.FunCall CFMessagePortSetDispatchQueue_FxnInst = get_CFMessagePortSetDispatchQueue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFMessagePortSetDispatchQueue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, ms);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, queue);
		CFMessagePortSetDispatchQueue_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFMessagePortSetInvalidationCallBack_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFMessagePortSetInvalidationCallBack_FxnInst(){
		return ((CFMessagePortSetInvalidationCallBack_FxnInst != null)
	? (CFMessagePortSetInvalidationCallBack_FxnInst)
	: (CFMessagePortSetInvalidationCallBack_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFMessagePortSetInvalidationCallBack", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST)));
	}

	 public void CFMessagePortSetInvalidationCallBack(final com.apple.jobjc.corefoundation.CFMessagePortRefCFType ms, final Object /* CFMessagePortInvalidationCallBack (^?, ^?) */ callout){
			final com.apple.jobjc.Invoke.FunCall CFMessagePortSetInvalidationCallBack_FxnInst = get_CFMessagePortSetInvalidationCallBack_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFMessagePortSetInvalidationCallBack_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, ms);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, callout);
		CFMessagePortSetInvalidationCallBack_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFMessagePortSetName_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFMessagePortSetName_FxnInst(){
		return ((CFMessagePortSetName_FxnInst != null)
	? (CFMessagePortSetName_FxnInst)
	: (CFMessagePortSetName_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFMessagePortSetName", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFMessagePortSetName(final com.apple.jobjc.corefoundation.CFMessagePortRefCFType ms, final com.apple.jobjc.corefoundation.CFStringRefCFType newName){
			final com.apple.jobjc.Invoke.FunCall CFMessagePortSetName_FxnInst = get_CFMessagePortSetName_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFMessagePortSetName_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, ms);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, newName);
		CFMessagePortSetName_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFNotificationCenterAddObserver_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNotificationCenterAddObserver_FxnInst(){
		return ((CFNotificationCenterAddObserver_FxnInst != null)
	? (CFNotificationCenterAddObserver_FxnInst)
	: (CFNotificationCenterAddObserver_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNotificationCenterAddObserver", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public void CFNotificationCenterAddObserver(final com.apple.jobjc.corefoundation.CFNotificationCenterRefCFType center, final com.apple.jobjc.Pointer<Void> observer, final Object /* CFNotificationCallback (^?, ^?) */ callBack, final com.apple.jobjc.corefoundation.CFStringRefCFType name, final com.apple.jobjc.Pointer<Void> object, final long suspensionBehavior){
			final com.apple.jobjc.Invoke.FunCall CFNotificationCenterAddObserver_FxnInst = get_CFNotificationCenterAddObserver_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNotificationCenterAddObserver_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, center);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, observer);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, callBack);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, name);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, object);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, suspensionBehavior);
		CFNotificationCenterAddObserver_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFNotificationCenterGetDarwinNotifyCenter_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNotificationCenterGetDarwinNotifyCenter_FxnInst(){
		return ((CFNotificationCenterGetDarwinNotifyCenter_FxnInst != null)
	? (CFNotificationCenterGetDarwinNotifyCenter_FxnInst)
	: (CFNotificationCenterGetDarwinNotifyCenter_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNotificationCenterGetDarwinNotifyCenter", com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFNotificationCenterRefCFType CFNotificationCenterGetDarwinNotifyCenter(){
			final com.apple.jobjc.Invoke.FunCall CFNotificationCenterGetDarwinNotifyCenter_FxnInst = get_CFNotificationCenterGetDarwinNotifyCenter_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNotificationCenterGetDarwinNotifyCenter_FxnInst.init(nativeBuffer);
		CFNotificationCenterGetDarwinNotifyCenter_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFNotificationCenterRefCFType returnValue = (com.apple.jobjc.corefoundation.CFNotificationCenterRefCFType) new com.apple.jobjc.corefoundation.CFNotificationCenterRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFNotificationCenterGetDistributedCenter_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNotificationCenterGetDistributedCenter_FxnInst(){
		return ((CFNotificationCenterGetDistributedCenter_FxnInst != null)
	? (CFNotificationCenterGetDistributedCenter_FxnInst)
	: (CFNotificationCenterGetDistributedCenter_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNotificationCenterGetDistributedCenter", com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFNotificationCenterRefCFType CFNotificationCenterGetDistributedCenter(){
			final com.apple.jobjc.Invoke.FunCall CFNotificationCenterGetDistributedCenter_FxnInst = get_CFNotificationCenterGetDistributedCenter_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNotificationCenterGetDistributedCenter_FxnInst.init(nativeBuffer);
		CFNotificationCenterGetDistributedCenter_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFNotificationCenterRefCFType returnValue = (com.apple.jobjc.corefoundation.CFNotificationCenterRefCFType) new com.apple.jobjc.corefoundation.CFNotificationCenterRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFNotificationCenterGetLocalCenter_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNotificationCenterGetLocalCenter_FxnInst(){
		return ((CFNotificationCenterGetLocalCenter_FxnInst != null)
	? (CFNotificationCenterGetLocalCenter_FxnInst)
	: (CFNotificationCenterGetLocalCenter_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNotificationCenterGetLocalCenter", com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFNotificationCenterRefCFType CFNotificationCenterGetLocalCenter(){
			final com.apple.jobjc.Invoke.FunCall CFNotificationCenterGetLocalCenter_FxnInst = get_CFNotificationCenterGetLocalCenter_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNotificationCenterGetLocalCenter_FxnInst.init(nativeBuffer);
		CFNotificationCenterGetLocalCenter_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFNotificationCenterRefCFType returnValue = (com.apple.jobjc.corefoundation.CFNotificationCenterRefCFType) new com.apple.jobjc.corefoundation.CFNotificationCenterRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFNotificationCenterGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNotificationCenterGetTypeID_FxnInst(){
		return ((CFNotificationCenterGetTypeID_FxnInst != null)
	? (CFNotificationCenterGetTypeID_FxnInst)
	: (CFNotificationCenterGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNotificationCenterGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFNotificationCenterGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFNotificationCenterGetTypeID_FxnInst = get_CFNotificationCenterGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNotificationCenterGetTypeID_FxnInst.init(nativeBuffer);
		CFNotificationCenterGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFNotificationCenterPostNotification_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNotificationCenterPostNotification_FxnInst(){
		return ((CFNotificationCenterPostNotification_FxnInst != null)
	? (CFNotificationCenterPostNotification_FxnInst)
	: (CFNotificationCenterPostNotification_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNotificationCenterPostNotification", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.BoolCoder.INST)));
	}

	 public void CFNotificationCenterPostNotification(final com.apple.jobjc.corefoundation.CFNotificationCenterRefCFType center, final com.apple.jobjc.corefoundation.CFStringRefCFType name, final com.apple.jobjc.Pointer<Void> object, final com.apple.jobjc.corefoundation.CFDictionaryRefCFType userInfo, final boolean deliverImmediately){
			final com.apple.jobjc.Invoke.FunCall CFNotificationCenterPostNotification_FxnInst = get_CFNotificationCenterPostNotification_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNotificationCenterPostNotification_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, center);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, name);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, object);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, userInfo);
		com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.push(nativeBuffer, deliverImmediately);
		CFNotificationCenterPostNotification_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFNotificationCenterPostNotificationWithOptions_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNotificationCenterPostNotificationWithOptions_FxnInst(){
		return ((CFNotificationCenterPostNotificationWithOptions_FxnInst != null)
	? (CFNotificationCenterPostNotificationWithOptions_FxnInst)
	: (CFNotificationCenterPostNotificationWithOptions_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNotificationCenterPostNotificationWithOptions", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public void CFNotificationCenterPostNotificationWithOptions(final com.apple.jobjc.corefoundation.CFNotificationCenterRefCFType center, final com.apple.jobjc.corefoundation.CFStringRefCFType name, final com.apple.jobjc.Pointer<Void> object, final com.apple.jobjc.corefoundation.CFDictionaryRefCFType userInfo, final long options){
			final com.apple.jobjc.Invoke.FunCall CFNotificationCenterPostNotificationWithOptions_FxnInst = get_CFNotificationCenterPostNotificationWithOptions_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNotificationCenterPostNotificationWithOptions_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, center);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, name);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, object);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, userInfo);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, options);
		CFNotificationCenterPostNotificationWithOptions_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFNotificationCenterRemoveEveryObserver_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNotificationCenterRemoveEveryObserver_FxnInst(){
		return ((CFNotificationCenterRemoveEveryObserver_FxnInst != null)
	? (CFNotificationCenterRemoveEveryObserver_FxnInst)
	: (CFNotificationCenterRemoveEveryObserver_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNotificationCenterRemoveEveryObserver", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFNotificationCenterRemoveEveryObserver(final com.apple.jobjc.corefoundation.CFNotificationCenterRefCFType center, final com.apple.jobjc.Pointer<Void> observer){
			final com.apple.jobjc.Invoke.FunCall CFNotificationCenterRemoveEveryObserver_FxnInst = get_CFNotificationCenterRemoveEveryObserver_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNotificationCenterRemoveEveryObserver_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, center);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, observer);
		CFNotificationCenterRemoveEveryObserver_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFNotificationCenterRemoveObserver_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNotificationCenterRemoveObserver_FxnInst(){
		return ((CFNotificationCenterRemoveObserver_FxnInst != null)
	? (CFNotificationCenterRemoveObserver_FxnInst)
	: (CFNotificationCenterRemoveObserver_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNotificationCenterRemoveObserver", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFNotificationCenterRemoveObserver(final com.apple.jobjc.corefoundation.CFNotificationCenterRefCFType center, final com.apple.jobjc.Pointer<Void> observer, final com.apple.jobjc.corefoundation.CFStringRefCFType name, final com.apple.jobjc.Pointer<Void> object){
			final com.apple.jobjc.Invoke.FunCall CFNotificationCenterRemoveObserver_FxnInst = get_CFNotificationCenterRemoveObserver_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNotificationCenterRemoveObserver_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, center);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, observer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, name);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, object);
		CFNotificationCenterRemoveObserver_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFNullGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNullGetTypeID_FxnInst(){
		return ((CFNullGetTypeID_FxnInst != null)
	? (CFNullGetTypeID_FxnInst)
	: (CFNullGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNullGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFNullGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFNullGetTypeID_FxnInst = get_CFNullGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNullGetTypeID_FxnInst.init(nativeBuffer);
		CFNullGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFNumberCompare_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNumberCompare_FxnInst(){
		return ((CFNumberCompare_FxnInst != null)
	? (CFNumberCompare_FxnInst)
	: (CFNumberCompare_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNumberCompare", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFNumberCompare(final com.apple.jobjc.corefoundation.CFNumberRefCFType number, final com.apple.jobjc.corefoundation.CFNumberRefCFType otherNumber, final com.apple.jobjc.Pointer<Void> context){
			final com.apple.jobjc.Invoke.FunCall CFNumberCompare_FxnInst = get_CFNumberCompare_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNumberCompare_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, number);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, otherNumber);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFNumberCompare_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFNumberCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNumberCreate_FxnInst(){
		return ((CFNumberCreate_FxnInst != null)
	? (CFNumberCreate_FxnInst)
	: (CFNumberCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNumberCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFNumberRefCFType CFNumberCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final long theType, final com.apple.jobjc.Pointer<Void> valuePtr){
			final com.apple.jobjc.Invoke.FunCall CFNumberCreate_FxnInst = get_CFNumberCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNumberCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, theType);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, valuePtr);
		CFNumberCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFNumberRefCFType returnValue = (com.apple.jobjc.corefoundation.CFNumberRefCFType) new com.apple.jobjc.corefoundation.CFNumberRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFNumberFormatterCopyProperty_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNumberFormatterCopyProperty_FxnInst(){
		return ((CFNumberFormatterCopyProperty_FxnInst != null)
	? (CFNumberFormatterCopyProperty_FxnInst)
	: (CFNumberFormatterCopyProperty_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNumberFormatterCopyProperty", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFTypeRefCFType CFNumberFormatterCopyProperty(final com.apple.jobjc.corefoundation.CFNumberFormatterRefCFType formatter, final com.apple.jobjc.corefoundation.CFStringRefCFType key){
			final com.apple.jobjc.Invoke.FunCall CFNumberFormatterCopyProperty_FxnInst = get_CFNumberFormatterCopyProperty_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNumberFormatterCopyProperty_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, formatter);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, key);
		CFNumberFormatterCopyProperty_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFTypeRefCFType returnValue = (com.apple.jobjc.corefoundation.CFTypeRefCFType) new com.apple.jobjc.corefoundation.CFTypeRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFNumberFormatterCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNumberFormatterCreate_FxnInst(){
		return ((CFNumberFormatterCreate_FxnInst != null)
	? (CFNumberFormatterCreate_FxnInst)
	: (CFNumberFormatterCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNumberFormatterCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFNumberFormatterRefCFType CFNumberFormatterCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFLocaleRefCFType locale, final long style){
			final com.apple.jobjc.Invoke.FunCall CFNumberFormatterCreate_FxnInst = get_CFNumberFormatterCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNumberFormatterCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, locale);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, style);
		CFNumberFormatterCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFNumberFormatterRefCFType returnValue = (com.apple.jobjc.corefoundation.CFNumberFormatterRefCFType) new com.apple.jobjc.corefoundation.CFNumberFormatterRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFNumberFormatterCreateNumberFromString_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNumberFormatterCreateNumberFromString_FxnInst(){
		return ((CFNumberFormatterCreateNumberFromString_FxnInst != null)
	? (CFNumberFormatterCreateNumberFromString_FxnInst)
	: (CFNumberFormatterCreateNumberFromString_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNumberFormatterCreateNumberFromString", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFNumberRefCFType CFNumberFormatterCreateNumberFromString(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFNumberFormatterRefCFType formatter, final com.apple.jobjc.corefoundation.CFStringRefCFType string, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFRange> rangep, final long options){
			final com.apple.jobjc.Invoke.FunCall CFNumberFormatterCreateNumberFromString_FxnInst = get_CFNumberFormatterCreateNumberFromString_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNumberFormatterCreateNumberFromString_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, formatter);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, string);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, rangep);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, options);
		CFNumberFormatterCreateNumberFromString_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFNumberRefCFType returnValue = (com.apple.jobjc.corefoundation.CFNumberRefCFType) new com.apple.jobjc.corefoundation.CFNumberRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFNumberFormatterCreateStringWithNumber_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNumberFormatterCreateStringWithNumber_FxnInst(){
		return ((CFNumberFormatterCreateStringWithNumber_FxnInst != null)
	? (CFNumberFormatterCreateStringWithNumber_FxnInst)
	: (CFNumberFormatterCreateStringWithNumber_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNumberFormatterCreateStringWithNumber", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFNumberFormatterCreateStringWithNumber(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFNumberFormatterRefCFType formatter, final com.apple.jobjc.corefoundation.CFNumberRefCFType number){
			final com.apple.jobjc.Invoke.FunCall CFNumberFormatterCreateStringWithNumber_FxnInst = get_CFNumberFormatterCreateStringWithNumber_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNumberFormatterCreateStringWithNumber_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, formatter);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, number);
		CFNumberFormatterCreateStringWithNumber_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFNumberFormatterCreateStringWithValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNumberFormatterCreateStringWithValue_FxnInst(){
		return ((CFNumberFormatterCreateStringWithValue_FxnInst != null)
	? (CFNumberFormatterCreateStringWithValue_FxnInst)
	: (CFNumberFormatterCreateStringWithValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNumberFormatterCreateStringWithValue", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFNumberFormatterCreateStringWithValue(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFNumberFormatterRefCFType formatter, final long numberType, final com.apple.jobjc.Pointer<Void> valuePtr){
			final com.apple.jobjc.Invoke.FunCall CFNumberFormatterCreateStringWithValue_FxnInst = get_CFNumberFormatterCreateStringWithValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNumberFormatterCreateStringWithValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, formatter);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, numberType);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, valuePtr);
		CFNumberFormatterCreateStringWithValue_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFNumberFormatterGetDecimalInfoForCurrencyCode_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNumberFormatterGetDecimalInfoForCurrencyCode_FxnInst(){
		return ((CFNumberFormatterGetDecimalInfoForCurrencyCode_FxnInst != null)
	? (CFNumberFormatterGetDecimalInfoForCurrencyCode_FxnInst)
	: (CFNumberFormatterGetDecimalInfoForCurrencyCode_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNumberFormatterGetDecimalInfoForCurrencyCode", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFNumberFormatterGetDecimalInfoForCurrencyCode(final com.apple.jobjc.corefoundation.CFStringRefCFType currencyCode, final com.apple.jobjc.Pointer<java.lang.Integer> defaultFractionDigits, final com.apple.jobjc.Pointer<java.lang.Double> roundingIncrement){
			final com.apple.jobjc.Invoke.FunCall CFNumberFormatterGetDecimalInfoForCurrencyCode_FxnInst = get_CFNumberFormatterGetDecimalInfoForCurrencyCode_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNumberFormatterGetDecimalInfoForCurrencyCode_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, currencyCode);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, defaultFractionDigits);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, roundingIncrement);
		CFNumberFormatterGetDecimalInfoForCurrencyCode_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFNumberFormatterGetFormat_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNumberFormatterGetFormat_FxnInst(){
		return ((CFNumberFormatterGetFormat_FxnInst != null)
	? (CFNumberFormatterGetFormat_FxnInst)
	: (CFNumberFormatterGetFormat_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNumberFormatterGetFormat", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFNumberFormatterGetFormat(final com.apple.jobjc.corefoundation.CFNumberFormatterRefCFType formatter){
			final com.apple.jobjc.Invoke.FunCall CFNumberFormatterGetFormat_FxnInst = get_CFNumberFormatterGetFormat_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNumberFormatterGetFormat_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, formatter);
		CFNumberFormatterGetFormat_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFNumberFormatterGetLocale_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNumberFormatterGetLocale_FxnInst(){
		return ((CFNumberFormatterGetLocale_FxnInst != null)
	? (CFNumberFormatterGetLocale_FxnInst)
	: (CFNumberFormatterGetLocale_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNumberFormatterGetLocale", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFLocaleRefCFType CFNumberFormatterGetLocale(final com.apple.jobjc.corefoundation.CFNumberFormatterRefCFType formatter){
			final com.apple.jobjc.Invoke.FunCall CFNumberFormatterGetLocale_FxnInst = get_CFNumberFormatterGetLocale_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNumberFormatterGetLocale_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, formatter);
		CFNumberFormatterGetLocale_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFLocaleRefCFType returnValue = (com.apple.jobjc.corefoundation.CFLocaleRefCFType) new com.apple.jobjc.corefoundation.CFLocaleRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFNumberFormatterGetStyle_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNumberFormatterGetStyle_FxnInst(){
		return ((CFNumberFormatterGetStyle_FxnInst != null)
	? (CFNumberFormatterGetStyle_FxnInst)
	: (CFNumberFormatterGetStyle_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNumberFormatterGetStyle", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFNumberFormatterGetStyle(final com.apple.jobjc.corefoundation.CFNumberFormatterRefCFType formatter){
			final com.apple.jobjc.Invoke.FunCall CFNumberFormatterGetStyle_FxnInst = get_CFNumberFormatterGetStyle_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNumberFormatterGetStyle_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, formatter);
		CFNumberFormatterGetStyle_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFNumberFormatterGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNumberFormatterGetTypeID_FxnInst(){
		return ((CFNumberFormatterGetTypeID_FxnInst != null)
	? (CFNumberFormatterGetTypeID_FxnInst)
	: (CFNumberFormatterGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNumberFormatterGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFNumberFormatterGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFNumberFormatterGetTypeID_FxnInst = get_CFNumberFormatterGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNumberFormatterGetTypeID_FxnInst.init(nativeBuffer);
		CFNumberFormatterGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFNumberFormatterGetValueFromString_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNumberFormatterGetValueFromString_FxnInst(){
		return ((CFNumberFormatterGetValueFromString_FxnInst != null)
	? (CFNumberFormatterGetValueFromString_FxnInst)
	: (CFNumberFormatterGetValueFromString_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNumberFormatterGetValueFromString", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFNumberFormatterGetValueFromString(final com.apple.jobjc.corefoundation.CFNumberFormatterRefCFType formatter, final com.apple.jobjc.corefoundation.CFStringRefCFType string, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFRange> rangep, final long numberType, final com.apple.jobjc.Pointer<Void> valuePtr){
			final com.apple.jobjc.Invoke.FunCall CFNumberFormatterGetValueFromString_FxnInst = get_CFNumberFormatterGetValueFromString_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNumberFormatterGetValueFromString_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, formatter);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, string);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, rangep);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, numberType);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, valuePtr);
		CFNumberFormatterGetValueFromString_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFNumberFormatterSetFormat_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNumberFormatterSetFormat_FxnInst(){
		return ((CFNumberFormatterSetFormat_FxnInst != null)
	? (CFNumberFormatterSetFormat_FxnInst)
	: (CFNumberFormatterSetFormat_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNumberFormatterSetFormat", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFNumberFormatterSetFormat(final com.apple.jobjc.corefoundation.CFNumberFormatterRefCFType formatter, final com.apple.jobjc.corefoundation.CFStringRefCFType formatString){
			final com.apple.jobjc.Invoke.FunCall CFNumberFormatterSetFormat_FxnInst = get_CFNumberFormatterSetFormat_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNumberFormatterSetFormat_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, formatter);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, formatString);
		CFNumberFormatterSetFormat_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFNumberFormatterSetProperty_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNumberFormatterSetProperty_FxnInst(){
		return ((CFNumberFormatterSetProperty_FxnInst != null)
	? (CFNumberFormatterSetProperty_FxnInst)
	: (CFNumberFormatterSetProperty_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNumberFormatterSetProperty", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFNumberFormatterSetProperty(final com.apple.jobjc.corefoundation.CFNumberFormatterRefCFType formatter, final com.apple.jobjc.corefoundation.CFStringRefCFType key, final com.apple.jobjc.corefoundation.CFTypeRefCFType value){
			final com.apple.jobjc.Invoke.FunCall CFNumberFormatterSetProperty_FxnInst = get_CFNumberFormatterSetProperty_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNumberFormatterSetProperty_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, formatter);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, key);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFNumberFormatterSetProperty_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFNumberGetByteSize_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNumberGetByteSize_FxnInst(){
		return ((CFNumberGetByteSize_FxnInst != null)
	? (CFNumberGetByteSize_FxnInst)
	: (CFNumberGetByteSize_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNumberGetByteSize", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFNumberGetByteSize(final com.apple.jobjc.corefoundation.CFNumberRefCFType number){
			final com.apple.jobjc.Invoke.FunCall CFNumberGetByteSize_FxnInst = get_CFNumberGetByteSize_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNumberGetByteSize_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, number);
		CFNumberGetByteSize_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFNumberGetType_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNumberGetType_FxnInst(){
		return ((CFNumberGetType_FxnInst != null)
	? (CFNumberGetType_FxnInst)
	: (CFNumberGetType_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNumberGetType", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFNumberGetType(final com.apple.jobjc.corefoundation.CFNumberRefCFType number){
			final com.apple.jobjc.Invoke.FunCall CFNumberGetType_FxnInst = get_CFNumberGetType_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNumberGetType_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, number);
		CFNumberGetType_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFNumberGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNumberGetTypeID_FxnInst(){
		return ((CFNumberGetTypeID_FxnInst != null)
	? (CFNumberGetTypeID_FxnInst)
	: (CFNumberGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNumberGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFNumberGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFNumberGetTypeID_FxnInst = get_CFNumberGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNumberGetTypeID_FxnInst.init(nativeBuffer);
		CFNumberGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFNumberGetValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNumberGetValue_FxnInst(){
		return ((CFNumberGetValue_FxnInst != null)
	? (CFNumberGetValue_FxnInst)
	: (CFNumberGetValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNumberGetValue", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFNumberGetValue(final com.apple.jobjc.corefoundation.CFNumberRefCFType number, final long theType, final com.apple.jobjc.Pointer<Void> valuePtr){
			final com.apple.jobjc.Invoke.FunCall CFNumberGetValue_FxnInst = get_CFNumberGetValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNumberGetValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, number);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, theType);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, valuePtr);
		CFNumberGetValue_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFNumberIsFloatType_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFNumberIsFloatType_FxnInst(){
		return ((CFNumberIsFloatType_FxnInst != null)
	? (CFNumberIsFloatType_FxnInst)
	: (CFNumberIsFloatType_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFNumberIsFloatType", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFNumberIsFloatType(final com.apple.jobjc.corefoundation.CFNumberRefCFType number){
			final com.apple.jobjc.Invoke.FunCall CFNumberIsFloatType_FxnInst = get_CFNumberIsFloatType_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFNumberIsFloatType_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, number);
		CFNumberIsFloatType_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPlugInAddInstanceForFactory_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPlugInAddInstanceForFactory_FxnInst(){
		return ((CFPlugInAddInstanceForFactory_FxnInst != null)
	? (CFPlugInAddInstanceForFactory_FxnInst)
	: (CFPlugInAddInstanceForFactory_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPlugInAddInstanceForFactory", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFPlugInAddInstanceForFactory(final com.apple.jobjc.corefoundation.CFUUIDRefCFType factoryID){
			final com.apple.jobjc.Invoke.FunCall CFPlugInAddInstanceForFactory_FxnInst = get_CFPlugInAddInstanceForFactory_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPlugInAddInstanceForFactory_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, factoryID);
		CFPlugInAddInstanceForFactory_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFPlugInCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPlugInCreate_FxnInst(){
		return ((CFPlugInCreate_FxnInst != null)
	? (CFPlugInCreate_FxnInst)
	: (CFPlugInCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPlugInCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFPlugInRefCFType CFPlugInCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFURLRefCFType plugInURL){
			final com.apple.jobjc.Invoke.FunCall CFPlugInCreate_FxnInst = get_CFPlugInCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPlugInCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, plugInURL);
		CFPlugInCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFPlugInRefCFType returnValue = (com.apple.jobjc.corefoundation.CFPlugInRefCFType) new com.apple.jobjc.corefoundation.CFPlugInRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPlugInFindFactoriesForPlugInType_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPlugInFindFactoriesForPlugInType_FxnInst(){
		return ((CFPlugInFindFactoriesForPlugInType_FxnInst != null)
	? (CFPlugInFindFactoriesForPlugInType_FxnInst)
	: (CFPlugInFindFactoriesForPlugInType_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPlugInFindFactoriesForPlugInType", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFArrayRefCFType CFPlugInFindFactoriesForPlugInType(final com.apple.jobjc.corefoundation.CFUUIDRefCFType typeUUID){
			final com.apple.jobjc.Invoke.FunCall CFPlugInFindFactoriesForPlugInType_FxnInst = get_CFPlugInFindFactoriesForPlugInType_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPlugInFindFactoriesForPlugInType_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, typeUUID);
		CFPlugInFindFactoriesForPlugInType_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFArrayRefCFType) new com.apple.jobjc.corefoundation.CFArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPlugInFindFactoriesForPlugInTypeInPlugIn_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPlugInFindFactoriesForPlugInTypeInPlugIn_FxnInst(){
		return ((CFPlugInFindFactoriesForPlugInTypeInPlugIn_FxnInst != null)
	? (CFPlugInFindFactoriesForPlugInTypeInPlugIn_FxnInst)
	: (CFPlugInFindFactoriesForPlugInTypeInPlugIn_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPlugInFindFactoriesForPlugInTypeInPlugIn", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFArrayRefCFType CFPlugInFindFactoriesForPlugInTypeInPlugIn(final com.apple.jobjc.corefoundation.CFUUIDRefCFType typeUUID, final com.apple.jobjc.corefoundation.CFPlugInRefCFType plugIn){
			final com.apple.jobjc.Invoke.FunCall CFPlugInFindFactoriesForPlugInTypeInPlugIn_FxnInst = get_CFPlugInFindFactoriesForPlugInTypeInPlugIn_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPlugInFindFactoriesForPlugInTypeInPlugIn_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, typeUUID);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, plugIn);
		CFPlugInFindFactoriesForPlugInTypeInPlugIn_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFArrayRefCFType) new com.apple.jobjc.corefoundation.CFArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPlugInGetBundle_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPlugInGetBundle_FxnInst(){
		return ((CFPlugInGetBundle_FxnInst != null)
	? (CFPlugInGetBundle_FxnInst)
	: (CFPlugInGetBundle_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPlugInGetBundle", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFBundleRefCFType CFPlugInGetBundle(final com.apple.jobjc.corefoundation.CFPlugInRefCFType plugIn){
			final com.apple.jobjc.Invoke.FunCall CFPlugInGetBundle_FxnInst = get_CFPlugInGetBundle_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPlugInGetBundle_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, plugIn);
		CFPlugInGetBundle_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFBundleRefCFType returnValue = (com.apple.jobjc.corefoundation.CFBundleRefCFType) new com.apple.jobjc.corefoundation.CFBundleRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPlugInGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPlugInGetTypeID_FxnInst(){
		return ((CFPlugInGetTypeID_FxnInst != null)
	? (CFPlugInGetTypeID_FxnInst)
	: (CFPlugInGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPlugInGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFPlugInGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFPlugInGetTypeID_FxnInst = get_CFPlugInGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPlugInGetTypeID_FxnInst.init(nativeBuffer);
		CFPlugInGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPlugInInstanceCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPlugInInstanceCreate_FxnInst(){
		return ((CFPlugInInstanceCreate_FxnInst != null)
	? (CFPlugInInstanceCreate_FxnInst)
	: (CFPlugInInstanceCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPlugInInstanceCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.Pointer<Void> CFPlugInInstanceCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFUUIDRefCFType factoryUUID, final com.apple.jobjc.corefoundation.CFUUIDRefCFType typeUUID){
			final com.apple.jobjc.Invoke.FunCall CFPlugInInstanceCreate_FxnInst = get_CFPlugInInstanceCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPlugInInstanceCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, factoryUUID);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, typeUUID);
		CFPlugInInstanceCreate_FxnInst.invoke(nativeBuffer);
		final com.apple.jobjc.Pointer<Void> returnValue = (com.apple.jobjc.Pointer<Void>) (com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPlugInInstanceCreateWithInstanceDataSize_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPlugInInstanceCreateWithInstanceDataSize_FxnInst(){
		return ((CFPlugInInstanceCreateWithInstanceDataSize_FxnInst != null)
	? (CFPlugInInstanceCreateWithInstanceDataSize_FxnInst)
	: (CFPlugInInstanceCreateWithInstanceDataSize_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPlugInInstanceCreateWithInstanceDataSize", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFPlugInInstanceRefCFType CFPlugInInstanceCreateWithInstanceDataSize(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final long instanceDataSize, final Object /* CFPlugInInstanceDeallocateInstanceDataFunction (^?, ^?) */ deallocateInstanceFunction, final com.apple.jobjc.corefoundation.CFStringRefCFType factoryName, final Object /* CFPlugInInstanceGetInterfaceFunction (^?, ^?) */ getInterfaceFunction){
			final com.apple.jobjc.Invoke.FunCall CFPlugInInstanceCreateWithInstanceDataSize_FxnInst = get_CFPlugInInstanceCreateWithInstanceDataSize_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPlugInInstanceCreateWithInstanceDataSize_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, instanceDataSize);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, deallocateInstanceFunction);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, factoryName);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, getInterfaceFunction);
		CFPlugInInstanceCreateWithInstanceDataSize_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFPlugInInstanceRefCFType returnValue = (com.apple.jobjc.corefoundation.CFPlugInInstanceRefCFType) new com.apple.jobjc.corefoundation.CFPlugInInstanceRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPlugInInstanceGetFactoryName_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPlugInInstanceGetFactoryName_FxnInst(){
		return ((CFPlugInInstanceGetFactoryName_FxnInst != null)
	? (CFPlugInInstanceGetFactoryName_FxnInst)
	: (CFPlugInInstanceGetFactoryName_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPlugInInstanceGetFactoryName", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFPlugInInstanceGetFactoryName(final com.apple.jobjc.corefoundation.CFPlugInInstanceRefCFType instance){
			final com.apple.jobjc.Invoke.FunCall CFPlugInInstanceGetFactoryName_FxnInst = get_CFPlugInInstanceGetFactoryName_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPlugInInstanceGetFactoryName_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, instance);
		CFPlugInInstanceGetFactoryName_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPlugInInstanceGetInstanceData_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPlugInInstanceGetInstanceData_FxnInst(){
		return ((CFPlugInInstanceGetInstanceData_FxnInst != null)
	? (CFPlugInInstanceGetInstanceData_FxnInst)
	: (CFPlugInInstanceGetInstanceData_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPlugInInstanceGetInstanceData", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.Pointer<Void> CFPlugInInstanceGetInstanceData(final com.apple.jobjc.corefoundation.CFPlugInInstanceRefCFType instance){
			final com.apple.jobjc.Invoke.FunCall CFPlugInInstanceGetInstanceData_FxnInst = get_CFPlugInInstanceGetInstanceData_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPlugInInstanceGetInstanceData_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, instance);
		CFPlugInInstanceGetInstanceData_FxnInst.invoke(nativeBuffer);
		final com.apple.jobjc.Pointer<Void> returnValue = (com.apple.jobjc.Pointer<Void>) (com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPlugInInstanceGetInterfaceFunctionTable_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPlugInInstanceGetInterfaceFunctionTable_FxnInst(){
		return ((CFPlugInInstanceGetInterfaceFunctionTable_FxnInst != null)
	? (CFPlugInInstanceGetInterfaceFunctionTable_FxnInst)
	: (CFPlugInInstanceGetInterfaceFunctionTable_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPlugInInstanceGetInterfaceFunctionTable", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFPlugInInstanceGetInterfaceFunctionTable(final com.apple.jobjc.corefoundation.CFPlugInInstanceRefCFType instance, final com.apple.jobjc.corefoundation.CFStringRefCFType interfaceName, final com.apple.jobjc.Pointer<com.apple.jobjc.Pointer<Void>> ftbl){
			final com.apple.jobjc.Invoke.FunCall CFPlugInInstanceGetInterfaceFunctionTable_FxnInst = get_CFPlugInInstanceGetInterfaceFunctionTable_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPlugInInstanceGetInterfaceFunctionTable_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, instance);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, interfaceName);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, ftbl);
		CFPlugInInstanceGetInterfaceFunctionTable_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPlugInInstanceGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPlugInInstanceGetTypeID_FxnInst(){
		return ((CFPlugInInstanceGetTypeID_FxnInst != null)
	? (CFPlugInInstanceGetTypeID_FxnInst)
	: (CFPlugInInstanceGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPlugInInstanceGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFPlugInInstanceGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFPlugInInstanceGetTypeID_FxnInst = get_CFPlugInInstanceGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPlugInInstanceGetTypeID_FxnInst.init(nativeBuffer);
		CFPlugInInstanceGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPlugInIsLoadOnDemand_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPlugInIsLoadOnDemand_FxnInst(){
		return ((CFPlugInIsLoadOnDemand_FxnInst != null)
	? (CFPlugInIsLoadOnDemand_FxnInst)
	: (CFPlugInIsLoadOnDemand_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPlugInIsLoadOnDemand", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFPlugInIsLoadOnDemand(final com.apple.jobjc.corefoundation.CFPlugInRefCFType plugIn){
			final com.apple.jobjc.Invoke.FunCall CFPlugInIsLoadOnDemand_FxnInst = get_CFPlugInIsLoadOnDemand_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPlugInIsLoadOnDemand_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, plugIn);
		CFPlugInIsLoadOnDemand_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPlugInRegisterFactoryFunction_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPlugInRegisterFactoryFunction_FxnInst(){
		return ((CFPlugInRegisterFactoryFunction_FxnInst != null)
	? (CFPlugInRegisterFactoryFunction_FxnInst)
	: (CFPlugInRegisterFactoryFunction_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPlugInRegisterFactoryFunction", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST)));
	}

	 public boolean CFPlugInRegisterFactoryFunction(final com.apple.jobjc.corefoundation.CFUUIDRefCFType factoryUUID, final Object /* CFPlugInFactoryFunction (^?, ^?) */ func){
			final com.apple.jobjc.Invoke.FunCall CFPlugInRegisterFactoryFunction_FxnInst = get_CFPlugInRegisterFactoryFunction_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPlugInRegisterFactoryFunction_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, factoryUUID);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, func);
		CFPlugInRegisterFactoryFunction_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPlugInRegisterFactoryFunctionByName_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPlugInRegisterFactoryFunctionByName_FxnInst(){
		return ((CFPlugInRegisterFactoryFunctionByName_FxnInst != null)
	? (CFPlugInRegisterFactoryFunctionByName_FxnInst)
	: (CFPlugInRegisterFactoryFunctionByName_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPlugInRegisterFactoryFunctionByName", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFPlugInRegisterFactoryFunctionByName(final com.apple.jobjc.corefoundation.CFUUIDRefCFType factoryUUID, final com.apple.jobjc.corefoundation.CFPlugInRefCFType plugIn, final com.apple.jobjc.corefoundation.CFStringRefCFType functionName){
			final com.apple.jobjc.Invoke.FunCall CFPlugInRegisterFactoryFunctionByName_FxnInst = get_CFPlugInRegisterFactoryFunctionByName_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPlugInRegisterFactoryFunctionByName_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, factoryUUID);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, plugIn);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, functionName);
		CFPlugInRegisterFactoryFunctionByName_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPlugInRegisterPlugInType_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPlugInRegisterPlugInType_FxnInst(){
		return ((CFPlugInRegisterPlugInType_FxnInst != null)
	? (CFPlugInRegisterPlugInType_FxnInst)
	: (CFPlugInRegisterPlugInType_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPlugInRegisterPlugInType", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFPlugInRegisterPlugInType(final com.apple.jobjc.corefoundation.CFUUIDRefCFType factoryUUID, final com.apple.jobjc.corefoundation.CFUUIDRefCFType typeUUID){
			final com.apple.jobjc.Invoke.FunCall CFPlugInRegisterPlugInType_FxnInst = get_CFPlugInRegisterPlugInType_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPlugInRegisterPlugInType_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, factoryUUID);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, typeUUID);
		CFPlugInRegisterPlugInType_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPlugInRemoveInstanceForFactory_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPlugInRemoveInstanceForFactory_FxnInst(){
		return ((CFPlugInRemoveInstanceForFactory_FxnInst != null)
	? (CFPlugInRemoveInstanceForFactory_FxnInst)
	: (CFPlugInRemoveInstanceForFactory_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPlugInRemoveInstanceForFactory", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFPlugInRemoveInstanceForFactory(final com.apple.jobjc.corefoundation.CFUUIDRefCFType factoryID){
			final com.apple.jobjc.Invoke.FunCall CFPlugInRemoveInstanceForFactory_FxnInst = get_CFPlugInRemoveInstanceForFactory_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPlugInRemoveInstanceForFactory_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, factoryID);
		CFPlugInRemoveInstanceForFactory_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFPlugInSetLoadOnDemand_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPlugInSetLoadOnDemand_FxnInst(){
		return ((CFPlugInSetLoadOnDemand_FxnInst != null)
	? (CFPlugInSetLoadOnDemand_FxnInst)
	: (CFPlugInSetLoadOnDemand_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPlugInSetLoadOnDemand", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.BoolCoder.INST)));
	}

	 public void CFPlugInSetLoadOnDemand(final com.apple.jobjc.corefoundation.CFPlugInRefCFType plugIn, final boolean flag){
			final com.apple.jobjc.Invoke.FunCall CFPlugInSetLoadOnDemand_FxnInst = get_CFPlugInSetLoadOnDemand_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPlugInSetLoadOnDemand_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, plugIn);
		com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.push(nativeBuffer, flag);
		CFPlugInSetLoadOnDemand_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFPlugInUnregisterFactory_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPlugInUnregisterFactory_FxnInst(){
		return ((CFPlugInUnregisterFactory_FxnInst != null)
	? (CFPlugInUnregisterFactory_FxnInst)
	: (CFPlugInUnregisterFactory_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPlugInUnregisterFactory", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFPlugInUnregisterFactory(final com.apple.jobjc.corefoundation.CFUUIDRefCFType factoryUUID){
			final com.apple.jobjc.Invoke.FunCall CFPlugInUnregisterFactory_FxnInst = get_CFPlugInUnregisterFactory_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPlugInUnregisterFactory_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, factoryUUID);
		CFPlugInUnregisterFactory_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPlugInUnregisterPlugInType_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPlugInUnregisterPlugInType_FxnInst(){
		return ((CFPlugInUnregisterPlugInType_FxnInst != null)
	? (CFPlugInUnregisterPlugInType_FxnInst)
	: (CFPlugInUnregisterPlugInType_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPlugInUnregisterPlugInType", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFPlugInUnregisterPlugInType(final com.apple.jobjc.corefoundation.CFUUIDRefCFType factoryUUID, final com.apple.jobjc.corefoundation.CFUUIDRefCFType typeUUID){
			final com.apple.jobjc.Invoke.FunCall CFPlugInUnregisterPlugInType_FxnInst = get_CFPlugInUnregisterPlugInType_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPlugInUnregisterPlugInType_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, factoryUUID);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, typeUUID);
		CFPlugInUnregisterPlugInType_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPreferencesAddSuitePreferencesToApp_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPreferencesAddSuitePreferencesToApp_FxnInst(){
		return ((CFPreferencesAddSuitePreferencesToApp_FxnInst != null)
	? (CFPreferencesAddSuitePreferencesToApp_FxnInst)
	: (CFPreferencesAddSuitePreferencesToApp_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPreferencesAddSuitePreferencesToApp", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFPreferencesAddSuitePreferencesToApp(final com.apple.jobjc.corefoundation.CFStringRefCFType applicationID, final com.apple.jobjc.corefoundation.CFStringRefCFType suiteID){
			final com.apple.jobjc.Invoke.FunCall CFPreferencesAddSuitePreferencesToApp_FxnInst = get_CFPreferencesAddSuitePreferencesToApp_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPreferencesAddSuitePreferencesToApp_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, applicationID);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, suiteID);
		CFPreferencesAddSuitePreferencesToApp_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFPreferencesAppSynchronize_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPreferencesAppSynchronize_FxnInst(){
		return ((CFPreferencesAppSynchronize_FxnInst != null)
	? (CFPreferencesAppSynchronize_FxnInst)
	: (CFPreferencesAppSynchronize_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPreferencesAppSynchronize", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFPreferencesAppSynchronize(final com.apple.jobjc.corefoundation.CFStringRefCFType applicationID){
			final com.apple.jobjc.Invoke.FunCall CFPreferencesAppSynchronize_FxnInst = get_CFPreferencesAppSynchronize_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPreferencesAppSynchronize_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, applicationID);
		CFPreferencesAppSynchronize_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPreferencesAppValueIsForced_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPreferencesAppValueIsForced_FxnInst(){
		return ((CFPreferencesAppValueIsForced_FxnInst != null)
	? (CFPreferencesAppValueIsForced_FxnInst)
	: (CFPreferencesAppValueIsForced_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPreferencesAppValueIsForced", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFPreferencesAppValueIsForced(final com.apple.jobjc.corefoundation.CFStringRefCFType key, final com.apple.jobjc.corefoundation.CFStringRefCFType applicationID){
			final com.apple.jobjc.Invoke.FunCall CFPreferencesAppValueIsForced_FxnInst = get_CFPreferencesAppValueIsForced_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPreferencesAppValueIsForced_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, key);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, applicationID);
		CFPreferencesAppValueIsForced_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPreferencesCopyAppValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPreferencesCopyAppValue_FxnInst(){
		return ((CFPreferencesCopyAppValue_FxnInst != null)
	? (CFPreferencesCopyAppValue_FxnInst)
	: (CFPreferencesCopyAppValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPreferencesCopyAppValue", com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public Object /* CFPropertyListRef (@, @) */ CFPreferencesCopyAppValue(final com.apple.jobjc.corefoundation.CFStringRefCFType key, final com.apple.jobjc.corefoundation.CFStringRefCFType applicationID){
			final com.apple.jobjc.Invoke.FunCall CFPreferencesCopyAppValue_FxnInst = get_CFPreferencesCopyAppValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPreferencesCopyAppValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, key);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, applicationID);
		CFPreferencesCopyAppValue_FxnInst.invoke(nativeBuffer);
		final Object /* CFPropertyListRef (@, @) */ returnValue = (Object /* CFPropertyListRef (@, @) */) (com.apple.jobjc.Coder.UnknownCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPreferencesCopyApplicationList_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPreferencesCopyApplicationList_FxnInst(){
		return ((CFPreferencesCopyApplicationList_FxnInst != null)
	? (CFPreferencesCopyApplicationList_FxnInst)
	: (CFPreferencesCopyApplicationList_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPreferencesCopyApplicationList", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFArrayRefCFType CFPreferencesCopyApplicationList(final com.apple.jobjc.corefoundation.CFStringRefCFType userName, final com.apple.jobjc.corefoundation.CFStringRefCFType hostName){
			final com.apple.jobjc.Invoke.FunCall CFPreferencesCopyApplicationList_FxnInst = get_CFPreferencesCopyApplicationList_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPreferencesCopyApplicationList_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, userName);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, hostName);
		CFPreferencesCopyApplicationList_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFArrayRefCFType) new com.apple.jobjc.corefoundation.CFArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPreferencesCopyKeyList_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPreferencesCopyKeyList_FxnInst(){
		return ((CFPreferencesCopyKeyList_FxnInst != null)
	? (CFPreferencesCopyKeyList_FxnInst)
	: (CFPreferencesCopyKeyList_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPreferencesCopyKeyList", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFArrayRefCFType CFPreferencesCopyKeyList(final com.apple.jobjc.corefoundation.CFStringRefCFType applicationID, final com.apple.jobjc.corefoundation.CFStringRefCFType userName, final com.apple.jobjc.corefoundation.CFStringRefCFType hostName){
			final com.apple.jobjc.Invoke.FunCall CFPreferencesCopyKeyList_FxnInst = get_CFPreferencesCopyKeyList_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPreferencesCopyKeyList_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, applicationID);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, userName);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, hostName);
		CFPreferencesCopyKeyList_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFArrayRefCFType) new com.apple.jobjc.corefoundation.CFArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPreferencesCopyMultiple_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPreferencesCopyMultiple_FxnInst(){
		return ((CFPreferencesCopyMultiple_FxnInst != null)
	? (CFPreferencesCopyMultiple_FxnInst)
	: (CFPreferencesCopyMultiple_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPreferencesCopyMultiple", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDictionaryRefCFType CFPreferencesCopyMultiple(final com.apple.jobjc.corefoundation.CFArrayRefCFType keysToFetch, final com.apple.jobjc.corefoundation.CFStringRefCFType applicationID, final com.apple.jobjc.corefoundation.CFStringRefCFType userName, final com.apple.jobjc.corefoundation.CFStringRefCFType hostName){
			final com.apple.jobjc.Invoke.FunCall CFPreferencesCopyMultiple_FxnInst = get_CFPreferencesCopyMultiple_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPreferencesCopyMultiple_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, keysToFetch);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, applicationID);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, userName);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, hostName);
		CFPreferencesCopyMultiple_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDictionaryRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDictionaryRefCFType) new com.apple.jobjc.corefoundation.CFDictionaryRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPreferencesCopyValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPreferencesCopyValue_FxnInst(){
		return ((CFPreferencesCopyValue_FxnInst != null)
	? (CFPreferencesCopyValue_FxnInst)
	: (CFPreferencesCopyValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPreferencesCopyValue", com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public Object /* CFPropertyListRef (@, @) */ CFPreferencesCopyValue(final com.apple.jobjc.corefoundation.CFStringRefCFType key, final com.apple.jobjc.corefoundation.CFStringRefCFType applicationID, final com.apple.jobjc.corefoundation.CFStringRefCFType userName, final com.apple.jobjc.corefoundation.CFStringRefCFType hostName){
			final com.apple.jobjc.Invoke.FunCall CFPreferencesCopyValue_FxnInst = get_CFPreferencesCopyValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPreferencesCopyValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, key);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, applicationID);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, userName);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, hostName);
		CFPreferencesCopyValue_FxnInst.invoke(nativeBuffer);
		final Object /* CFPropertyListRef (@, @) */ returnValue = (Object /* CFPropertyListRef (@, @) */) (com.apple.jobjc.Coder.UnknownCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPreferencesGetAppBooleanValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPreferencesGetAppBooleanValue_FxnInst(){
		return ((CFPreferencesGetAppBooleanValue_FxnInst != null)
	? (CFPreferencesGetAppBooleanValue_FxnInst)
	: (CFPreferencesGetAppBooleanValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPreferencesGetAppBooleanValue", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFPreferencesGetAppBooleanValue(final com.apple.jobjc.corefoundation.CFStringRefCFType key, final com.apple.jobjc.corefoundation.CFStringRefCFType applicationID, final com.apple.jobjc.Pointer<java.lang.Boolean> keyExistsAndHasValidFormat){
			final com.apple.jobjc.Invoke.FunCall CFPreferencesGetAppBooleanValue_FxnInst = get_CFPreferencesGetAppBooleanValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPreferencesGetAppBooleanValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, key);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, applicationID);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, keyExistsAndHasValidFormat);
		CFPreferencesGetAppBooleanValue_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPreferencesGetAppIntegerValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPreferencesGetAppIntegerValue_FxnInst(){
		return ((CFPreferencesGetAppIntegerValue_FxnInst != null)
	? (CFPreferencesGetAppIntegerValue_FxnInst)
	: (CFPreferencesGetAppIntegerValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPreferencesGetAppIntegerValue", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFPreferencesGetAppIntegerValue(final com.apple.jobjc.corefoundation.CFStringRefCFType key, final com.apple.jobjc.corefoundation.CFStringRefCFType applicationID, final com.apple.jobjc.Pointer<java.lang.Boolean> keyExistsAndHasValidFormat){
			final com.apple.jobjc.Invoke.FunCall CFPreferencesGetAppIntegerValue_FxnInst = get_CFPreferencesGetAppIntegerValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPreferencesGetAppIntegerValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, key);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, applicationID);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, keyExistsAndHasValidFormat);
		CFPreferencesGetAppIntegerValue_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPreferencesRemoveSuitePreferencesFromApp_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPreferencesRemoveSuitePreferencesFromApp_FxnInst(){
		return ((CFPreferencesRemoveSuitePreferencesFromApp_FxnInst != null)
	? (CFPreferencesRemoveSuitePreferencesFromApp_FxnInst)
	: (CFPreferencesRemoveSuitePreferencesFromApp_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPreferencesRemoveSuitePreferencesFromApp", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFPreferencesRemoveSuitePreferencesFromApp(final com.apple.jobjc.corefoundation.CFStringRefCFType applicationID, final com.apple.jobjc.corefoundation.CFStringRefCFType suiteID){
			final com.apple.jobjc.Invoke.FunCall CFPreferencesRemoveSuitePreferencesFromApp_FxnInst = get_CFPreferencesRemoveSuitePreferencesFromApp_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPreferencesRemoveSuitePreferencesFromApp_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, applicationID);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, suiteID);
		CFPreferencesRemoveSuitePreferencesFromApp_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFPreferencesSetAppValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPreferencesSetAppValue_FxnInst(){
		return ((CFPreferencesSetAppValue_FxnInst != null)
	? (CFPreferencesSetAppValue_FxnInst)
	: (CFPreferencesSetAppValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPreferencesSetAppValue", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFPreferencesSetAppValue(final com.apple.jobjc.corefoundation.CFStringRefCFType key, final Object /* CFPropertyListRef (@, @) */ value, final com.apple.jobjc.corefoundation.CFStringRefCFType applicationID){
			final com.apple.jobjc.Invoke.FunCall CFPreferencesSetAppValue_FxnInst = get_CFPreferencesSetAppValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPreferencesSetAppValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, key);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, value);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, applicationID);
		CFPreferencesSetAppValue_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFPreferencesSetMultiple_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPreferencesSetMultiple_FxnInst(){
		return ((CFPreferencesSetMultiple_FxnInst != null)
	? (CFPreferencesSetMultiple_FxnInst)
	: (CFPreferencesSetMultiple_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPreferencesSetMultiple", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFPreferencesSetMultiple(final com.apple.jobjc.corefoundation.CFDictionaryRefCFType keysToSet, final com.apple.jobjc.corefoundation.CFArrayRefCFType keysToRemove, final com.apple.jobjc.corefoundation.CFStringRefCFType applicationID, final com.apple.jobjc.corefoundation.CFStringRefCFType userName, final com.apple.jobjc.corefoundation.CFStringRefCFType hostName){
			final com.apple.jobjc.Invoke.FunCall CFPreferencesSetMultiple_FxnInst = get_CFPreferencesSetMultiple_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPreferencesSetMultiple_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, keysToSet);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, keysToRemove);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, applicationID);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, userName);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, hostName);
		CFPreferencesSetMultiple_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFPreferencesSetValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPreferencesSetValue_FxnInst(){
		return ((CFPreferencesSetValue_FxnInst != null)
	? (CFPreferencesSetValue_FxnInst)
	: (CFPreferencesSetValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPreferencesSetValue", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFPreferencesSetValue(final com.apple.jobjc.corefoundation.CFStringRefCFType key, final Object /* CFPropertyListRef (@, @) */ value, final com.apple.jobjc.corefoundation.CFStringRefCFType applicationID, final com.apple.jobjc.corefoundation.CFStringRefCFType userName, final com.apple.jobjc.corefoundation.CFStringRefCFType hostName){
			final com.apple.jobjc.Invoke.FunCall CFPreferencesSetValue_FxnInst = get_CFPreferencesSetValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPreferencesSetValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, key);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, value);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, applicationID);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, userName);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, hostName);
		CFPreferencesSetValue_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFPreferencesSynchronize_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPreferencesSynchronize_FxnInst(){
		return ((CFPreferencesSynchronize_FxnInst != null)
	? (CFPreferencesSynchronize_FxnInst)
	: (CFPreferencesSynchronize_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPreferencesSynchronize", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFPreferencesSynchronize(final com.apple.jobjc.corefoundation.CFStringRefCFType applicationID, final com.apple.jobjc.corefoundation.CFStringRefCFType userName, final com.apple.jobjc.corefoundation.CFStringRefCFType hostName){
			final com.apple.jobjc.Invoke.FunCall CFPreferencesSynchronize_FxnInst = get_CFPreferencesSynchronize_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPreferencesSynchronize_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, applicationID);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, userName);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, hostName);
		CFPreferencesSynchronize_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPropertyListCreateData_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPropertyListCreateData_FxnInst(){
		return ((CFPropertyListCreateData_FxnInst != null)
	? (CFPropertyListCreateData_FxnInst)
	: (CFPropertyListCreateData_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPropertyListCreateData", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDataRefCFType CFPropertyListCreateData(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final Object /* CFPropertyListRef (@, @) */ propertyList, final long format, final long options, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFErrorRefCFType> error){
			final com.apple.jobjc.Invoke.FunCall CFPropertyListCreateData_FxnInst = get_CFPropertyListCreateData_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPropertyListCreateData_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, propertyList);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, format);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, options);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, error);
		CFPropertyListCreateData_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDataRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDataRefCFType) new com.apple.jobjc.corefoundation.CFDataRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPropertyListCreateDeepCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPropertyListCreateDeepCopy_FxnInst(){
		return ((CFPropertyListCreateDeepCopy_FxnInst != null)
	? (CFPropertyListCreateDeepCopy_FxnInst)
	: (CFPropertyListCreateDeepCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPropertyListCreateDeepCopy", com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public Object /* CFPropertyListRef (@, @) */ CFPropertyListCreateDeepCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final Object /* CFPropertyListRef (@, @) */ propertyList, final long mutabilityOption){
			final com.apple.jobjc.Invoke.FunCall CFPropertyListCreateDeepCopy_FxnInst = get_CFPropertyListCreateDeepCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPropertyListCreateDeepCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, propertyList);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, mutabilityOption);
		CFPropertyListCreateDeepCopy_FxnInst.invoke(nativeBuffer);
		final Object /* CFPropertyListRef (@, @) */ returnValue = (Object /* CFPropertyListRef (@, @) */) (com.apple.jobjc.Coder.UnknownCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPropertyListCreateFromStream_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPropertyListCreateFromStream_FxnInst(){
		return ((CFPropertyListCreateFromStream_FxnInst != null)
	? (CFPropertyListCreateFromStream_FxnInst)
	: (CFPropertyListCreateFromStream_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPropertyListCreateFromStream", com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public Object /* CFPropertyListRef (@, @) */ CFPropertyListCreateFromStream(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFReadStreamRefCFType stream, final long streamLength, final long mutabilityOption, final com.apple.jobjc.Pointer<java.lang.Long> format, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFStringRefCFType> errorString){
			final com.apple.jobjc.Invoke.FunCall CFPropertyListCreateFromStream_FxnInst = get_CFPropertyListCreateFromStream_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPropertyListCreateFromStream_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, streamLength);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, mutabilityOption);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, format);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, errorString);
		CFPropertyListCreateFromStream_FxnInst.invoke(nativeBuffer);
		final Object /* CFPropertyListRef (@, @) */ returnValue = (Object /* CFPropertyListRef (@, @) */) (com.apple.jobjc.Coder.UnknownCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPropertyListCreateFromXMLData_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPropertyListCreateFromXMLData_FxnInst(){
		return ((CFPropertyListCreateFromXMLData_FxnInst != null)
	? (CFPropertyListCreateFromXMLData_FxnInst)
	: (CFPropertyListCreateFromXMLData_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPropertyListCreateFromXMLData", com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public Object /* CFPropertyListRef (@, @) */ CFPropertyListCreateFromXMLData(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFDataRefCFType xmlData, final long mutabilityOption, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFStringRefCFType> errorString){
			final com.apple.jobjc.Invoke.FunCall CFPropertyListCreateFromXMLData_FxnInst = get_CFPropertyListCreateFromXMLData_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPropertyListCreateFromXMLData_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, xmlData);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, mutabilityOption);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, errorString);
		CFPropertyListCreateFromXMLData_FxnInst.invoke(nativeBuffer);
		final Object /* CFPropertyListRef (@, @) */ returnValue = (Object /* CFPropertyListRef (@, @) */) (com.apple.jobjc.Coder.UnknownCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPropertyListCreateWithData_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPropertyListCreateWithData_FxnInst(){
		return ((CFPropertyListCreateWithData_FxnInst != null)
	? (CFPropertyListCreateWithData_FxnInst)
	: (CFPropertyListCreateWithData_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPropertyListCreateWithData", com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public Object /* CFPropertyListRef (@, @) */ CFPropertyListCreateWithData(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFDataRefCFType data, final long options, final com.apple.jobjc.Pointer<java.lang.Long> format, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFErrorRefCFType> error){
			final com.apple.jobjc.Invoke.FunCall CFPropertyListCreateWithData_FxnInst = get_CFPropertyListCreateWithData_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPropertyListCreateWithData_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, data);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, options);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, format);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, error);
		CFPropertyListCreateWithData_FxnInst.invoke(nativeBuffer);
		final Object /* CFPropertyListRef (@, @) */ returnValue = (Object /* CFPropertyListRef (@, @) */) (com.apple.jobjc.Coder.UnknownCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPropertyListCreateWithStream_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPropertyListCreateWithStream_FxnInst(){
		return ((CFPropertyListCreateWithStream_FxnInst != null)
	? (CFPropertyListCreateWithStream_FxnInst)
	: (CFPropertyListCreateWithStream_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPropertyListCreateWithStream", com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public Object /* CFPropertyListRef (@, @) */ CFPropertyListCreateWithStream(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFReadStreamRefCFType stream, final long streamLength, final long options, final com.apple.jobjc.Pointer<java.lang.Long> format, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFErrorRefCFType> error){
			final com.apple.jobjc.Invoke.FunCall CFPropertyListCreateWithStream_FxnInst = get_CFPropertyListCreateWithStream_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPropertyListCreateWithStream_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, streamLength);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, options);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, format);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, error);
		CFPropertyListCreateWithStream_FxnInst.invoke(nativeBuffer);
		final Object /* CFPropertyListRef (@, @) */ returnValue = (Object /* CFPropertyListRef (@, @) */) (com.apple.jobjc.Coder.UnknownCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPropertyListCreateXMLData_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPropertyListCreateXMLData_FxnInst(){
		return ((CFPropertyListCreateXMLData_FxnInst != null)
	? (CFPropertyListCreateXMLData_FxnInst)
	: (CFPropertyListCreateXMLData_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPropertyListCreateXMLData", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDataRefCFType CFPropertyListCreateXMLData(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final Object /* CFPropertyListRef (@, @) */ propertyList){
			final com.apple.jobjc.Invoke.FunCall CFPropertyListCreateXMLData_FxnInst = get_CFPropertyListCreateXMLData_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPropertyListCreateXMLData_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, propertyList);
		CFPropertyListCreateXMLData_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDataRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDataRefCFType) new com.apple.jobjc.corefoundation.CFDataRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPropertyListIsValid_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPropertyListIsValid_FxnInst(){
		return ((CFPropertyListIsValid_FxnInst != null)
	? (CFPropertyListIsValid_FxnInst)
	: (CFPropertyListIsValid_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPropertyListIsValid", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public boolean CFPropertyListIsValid(final Object /* CFPropertyListRef (@, @) */ plist, final long format){
			final com.apple.jobjc.Invoke.FunCall CFPropertyListIsValid_FxnInst = get_CFPropertyListIsValid_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPropertyListIsValid_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, plist);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, format);
		CFPropertyListIsValid_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPropertyListWrite_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPropertyListWrite_FxnInst(){
		return ((CFPropertyListWrite_FxnInst != null)
	? (CFPropertyListWrite_FxnInst)
	: (CFPropertyListWrite_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPropertyListWrite", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFPropertyListWrite(final Object /* CFPropertyListRef (@, @) */ propertyList, final com.apple.jobjc.corefoundation.CFWriteStreamRefCFType stream, final long format, final long options, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFErrorRefCFType> error){
			final com.apple.jobjc.Invoke.FunCall CFPropertyListWrite_FxnInst = get_CFPropertyListWrite_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPropertyListWrite_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, propertyList);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, format);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, options);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, error);
		CFPropertyListWrite_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFPropertyListWriteToStream_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFPropertyListWriteToStream_FxnInst(){
		return ((CFPropertyListWriteToStream_FxnInst != null)
	? (CFPropertyListWriteToStream_FxnInst)
	: (CFPropertyListWriteToStream_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFPropertyListWriteToStream", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFPropertyListWriteToStream(final Object /* CFPropertyListRef (@, @) */ propertyList, final com.apple.jobjc.corefoundation.CFWriteStreamRefCFType stream, final long format, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFStringRefCFType> errorString){
			final com.apple.jobjc.Invoke.FunCall CFPropertyListWriteToStream_FxnInst = get_CFPropertyListWriteToStream_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFPropertyListWriteToStream_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, propertyList);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, format);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, errorString);
		CFPropertyListWriteToStream_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRangeMake_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRangeMake_FxnInst(){
		return ((CFRangeMake_FxnInst != null)
	? (CFRangeMake_FxnInst)
	: (CFRangeMake_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRangeMake", com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFRange CFRangeMake(final long loc, final long len){
			final com.apple.jobjc.Invoke.FunCall CFRangeMake_FxnInst = get_CFRangeMake_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRangeMake_FxnInst.init(nativeBuffer);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, loc);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, len);
				com.apple.jobjc.corefoundation.CFRange returnValue = com.apple.jobjc.JObjC.getInstance(getRuntime()).CoreFoundation().makeCFRange();
		CFRangeMake_FxnInst.invoke(nativeBuffer, returnValue);
		
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFReadStreamClose_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFReadStreamClose_FxnInst(){
		return ((CFReadStreamClose_FxnInst != null)
	? (CFReadStreamClose_FxnInst)
	: (CFReadStreamClose_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFReadStreamClose", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFReadStreamClose(final com.apple.jobjc.corefoundation.CFReadStreamRefCFType stream){
			final com.apple.jobjc.Invoke.FunCall CFReadStreamClose_FxnInst = get_CFReadStreamClose_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFReadStreamClose_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
		CFReadStreamClose_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFReadStreamCopyError_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFReadStreamCopyError_FxnInst(){
		return ((CFReadStreamCopyError_FxnInst != null)
	? (CFReadStreamCopyError_FxnInst)
	: (CFReadStreamCopyError_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFReadStreamCopyError", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFErrorRefCFType CFReadStreamCopyError(final com.apple.jobjc.corefoundation.CFReadStreamRefCFType stream){
			final com.apple.jobjc.Invoke.FunCall CFReadStreamCopyError_FxnInst = get_CFReadStreamCopyError_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFReadStreamCopyError_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
		CFReadStreamCopyError_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFErrorRefCFType returnValue = (com.apple.jobjc.corefoundation.CFErrorRefCFType) new com.apple.jobjc.corefoundation.CFErrorRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFReadStreamCopyProperty_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFReadStreamCopyProperty_FxnInst(){
		return ((CFReadStreamCopyProperty_FxnInst != null)
	? (CFReadStreamCopyProperty_FxnInst)
	: (CFReadStreamCopyProperty_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFReadStreamCopyProperty", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFTypeRefCFType CFReadStreamCopyProperty(final com.apple.jobjc.corefoundation.CFReadStreamRefCFType stream, final com.apple.jobjc.corefoundation.CFStringRefCFType propertyName){
			final com.apple.jobjc.Invoke.FunCall CFReadStreamCopyProperty_FxnInst = get_CFReadStreamCopyProperty_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFReadStreamCopyProperty_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, propertyName);
		CFReadStreamCopyProperty_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFTypeRefCFType returnValue = (com.apple.jobjc.corefoundation.CFTypeRefCFType) new com.apple.jobjc.corefoundation.CFTypeRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFReadStreamCreateWithBytesNoCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFReadStreamCreateWithBytesNoCopy_FxnInst(){
		return ((CFReadStreamCreateWithBytesNoCopy_FxnInst != null)
	? (CFReadStreamCreateWithBytesNoCopy_FxnInst)
	: (CFReadStreamCreateWithBytesNoCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFReadStreamCreateWithBytesNoCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFReadStreamRefCFType CFReadStreamCreateWithBytesNoCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.Pointer<java.lang.Byte> bytes, final long length, final com.apple.jobjc.corefoundation.CFAllocatorRefCFType bytesDeallocator){
			final com.apple.jobjc.Invoke.FunCall CFReadStreamCreateWithBytesNoCopy_FxnInst = get_CFReadStreamCreateWithBytesNoCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFReadStreamCreateWithBytesNoCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bytes);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, length);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bytesDeallocator);
		CFReadStreamCreateWithBytesNoCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFReadStreamRefCFType returnValue = (com.apple.jobjc.corefoundation.CFReadStreamRefCFType) new com.apple.jobjc.corefoundation.CFReadStreamRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFReadStreamCreateWithFile_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFReadStreamCreateWithFile_FxnInst(){
		return ((CFReadStreamCreateWithFile_FxnInst != null)
	? (CFReadStreamCreateWithFile_FxnInst)
	: (CFReadStreamCreateWithFile_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFReadStreamCreateWithFile", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFReadStreamRefCFType CFReadStreamCreateWithFile(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFURLRefCFType fileURL){
			final com.apple.jobjc.Invoke.FunCall CFReadStreamCreateWithFile_FxnInst = get_CFReadStreamCreateWithFile_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFReadStreamCreateWithFile_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, fileURL);
		CFReadStreamCreateWithFile_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFReadStreamRefCFType returnValue = (com.apple.jobjc.corefoundation.CFReadStreamRefCFType) new com.apple.jobjc.corefoundation.CFReadStreamRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFReadStreamGetBuffer_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFReadStreamGetBuffer_FxnInst(){
		return ((CFReadStreamGetBuffer_FxnInst != null)
	? (CFReadStreamGetBuffer_FxnInst)
	: (CFReadStreamGetBuffer_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFReadStreamGetBuffer", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.Pointer<java.lang.Byte> CFReadStreamGetBuffer(final com.apple.jobjc.corefoundation.CFReadStreamRefCFType stream, final long maxBytesToRead, final com.apple.jobjc.Pointer<java.lang.Long> numBytesRead){
			final com.apple.jobjc.Invoke.FunCall CFReadStreamGetBuffer_FxnInst = get_CFReadStreamGetBuffer_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFReadStreamGetBuffer_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, maxBytesToRead);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, numBytesRead);
		CFReadStreamGetBuffer_FxnInst.invoke(nativeBuffer);
		final com.apple.jobjc.Pointer<java.lang.Byte> returnValue = (com.apple.jobjc.Pointer<java.lang.Byte>) (com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFReadStreamGetError_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFReadStreamGetError_FxnInst(){
		return ((CFReadStreamGetError_FxnInst != null)
	? (CFReadStreamGetError_FxnInst)
	: (CFReadStreamGetError_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFReadStreamGetError", com.apple.jobjc.corefoundation.CFStreamError.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStreamError CFReadStreamGetError(final com.apple.jobjc.corefoundation.CFReadStreamRefCFType stream){
			final com.apple.jobjc.Invoke.FunCall CFReadStreamGetError_FxnInst = get_CFReadStreamGetError_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFReadStreamGetError_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
				com.apple.jobjc.corefoundation.CFStreamError returnValue = com.apple.jobjc.JObjC.getInstance(getRuntime()).CoreFoundation().makeCFStreamError();
		CFReadStreamGetError_FxnInst.invoke(nativeBuffer, returnValue);
		
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFReadStreamGetStatus_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFReadStreamGetStatus_FxnInst(){
		return ((CFReadStreamGetStatus_FxnInst != null)
	? (CFReadStreamGetStatus_FxnInst)
	: (CFReadStreamGetStatus_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFReadStreamGetStatus", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFReadStreamGetStatus(final com.apple.jobjc.corefoundation.CFReadStreamRefCFType stream){
			final com.apple.jobjc.Invoke.FunCall CFReadStreamGetStatus_FxnInst = get_CFReadStreamGetStatus_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFReadStreamGetStatus_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
		CFReadStreamGetStatus_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFReadStreamGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFReadStreamGetTypeID_FxnInst(){
		return ((CFReadStreamGetTypeID_FxnInst != null)
	? (CFReadStreamGetTypeID_FxnInst)
	: (CFReadStreamGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFReadStreamGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFReadStreamGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFReadStreamGetTypeID_FxnInst = get_CFReadStreamGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFReadStreamGetTypeID_FxnInst.init(nativeBuffer);
		CFReadStreamGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFReadStreamHasBytesAvailable_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFReadStreamHasBytesAvailable_FxnInst(){
		return ((CFReadStreamHasBytesAvailable_FxnInst != null)
	? (CFReadStreamHasBytesAvailable_FxnInst)
	: (CFReadStreamHasBytesAvailable_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFReadStreamHasBytesAvailable", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFReadStreamHasBytesAvailable(final com.apple.jobjc.corefoundation.CFReadStreamRefCFType stream){
			final com.apple.jobjc.Invoke.FunCall CFReadStreamHasBytesAvailable_FxnInst = get_CFReadStreamHasBytesAvailable_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFReadStreamHasBytesAvailable_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
		CFReadStreamHasBytesAvailable_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFReadStreamOpen_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFReadStreamOpen_FxnInst(){
		return ((CFReadStreamOpen_FxnInst != null)
	? (CFReadStreamOpen_FxnInst)
	: (CFReadStreamOpen_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFReadStreamOpen", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFReadStreamOpen(final com.apple.jobjc.corefoundation.CFReadStreamRefCFType stream){
			final com.apple.jobjc.Invoke.FunCall CFReadStreamOpen_FxnInst = get_CFReadStreamOpen_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFReadStreamOpen_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
		CFReadStreamOpen_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFReadStreamRead_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFReadStreamRead_FxnInst(){
		return ((CFReadStreamRead_FxnInst != null)
	? (CFReadStreamRead_FxnInst)
	: (CFReadStreamRead_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFReadStreamRead", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public long CFReadStreamRead(final com.apple.jobjc.corefoundation.CFReadStreamRefCFType stream, final com.apple.jobjc.Pointer<java.lang.Byte> buffer, final long bufferLength){
			final com.apple.jobjc.Invoke.FunCall CFReadStreamRead_FxnInst = get_CFReadStreamRead_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFReadStreamRead_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, buffer);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, bufferLength);
		CFReadStreamRead_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFReadStreamScheduleWithRunLoop_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFReadStreamScheduleWithRunLoop_FxnInst(){
		return ((CFReadStreamScheduleWithRunLoop_FxnInst != null)
	? (CFReadStreamScheduleWithRunLoop_FxnInst)
	: (CFReadStreamScheduleWithRunLoop_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFReadStreamScheduleWithRunLoop", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFReadStreamScheduleWithRunLoop(final com.apple.jobjc.corefoundation.CFReadStreamRefCFType stream, final com.apple.jobjc.corefoundation.CFRunLoopRefCFType runLoop, final com.apple.jobjc.corefoundation.CFStringRefCFType runLoopMode){
			final com.apple.jobjc.Invoke.FunCall CFReadStreamScheduleWithRunLoop_FxnInst = get_CFReadStreamScheduleWithRunLoop_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFReadStreamScheduleWithRunLoop_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, runLoop);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, runLoopMode);
		CFReadStreamScheduleWithRunLoop_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFReadStreamSetClient_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFReadStreamSetClient_FxnInst(){
		return ((CFReadStreamSetClient_FxnInst != null)
	? (CFReadStreamSetClient_FxnInst)
	: (CFReadStreamSetClient_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFReadStreamSetClient", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFReadStreamSetClient(final com.apple.jobjc.corefoundation.CFReadStreamRefCFType stream, final long streamEvents, final Object /* CFReadStreamClientCallBack (^?, ^?) */ clientCB, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFStreamClientContext> clientContext){
			final com.apple.jobjc.Invoke.FunCall CFReadStreamSetClient_FxnInst = get_CFReadStreamSetClient_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFReadStreamSetClient_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, streamEvents);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, clientCB);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, clientContext);
		CFReadStreamSetClient_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFReadStreamSetProperty_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFReadStreamSetProperty_FxnInst(){
		return ((CFReadStreamSetProperty_FxnInst != null)
	? (CFReadStreamSetProperty_FxnInst)
	: (CFReadStreamSetProperty_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFReadStreamSetProperty", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFReadStreamSetProperty(final com.apple.jobjc.corefoundation.CFReadStreamRefCFType stream, final com.apple.jobjc.corefoundation.CFStringRefCFType propertyName, final com.apple.jobjc.corefoundation.CFTypeRefCFType propertyValue){
			final com.apple.jobjc.Invoke.FunCall CFReadStreamSetProperty_FxnInst = get_CFReadStreamSetProperty_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFReadStreamSetProperty_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, propertyName);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, propertyValue);
		CFReadStreamSetProperty_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFReadStreamUnscheduleFromRunLoop_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFReadStreamUnscheduleFromRunLoop_FxnInst(){
		return ((CFReadStreamUnscheduleFromRunLoop_FxnInst != null)
	? (CFReadStreamUnscheduleFromRunLoop_FxnInst)
	: (CFReadStreamUnscheduleFromRunLoop_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFReadStreamUnscheduleFromRunLoop", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFReadStreamUnscheduleFromRunLoop(final com.apple.jobjc.corefoundation.CFReadStreamRefCFType stream, final com.apple.jobjc.corefoundation.CFRunLoopRefCFType runLoop, final com.apple.jobjc.corefoundation.CFStringRefCFType runLoopMode){
			final com.apple.jobjc.Invoke.FunCall CFReadStreamUnscheduleFromRunLoop_FxnInst = get_CFReadStreamUnscheduleFromRunLoop_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFReadStreamUnscheduleFromRunLoop_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, runLoop);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, runLoopMode);
		CFReadStreamUnscheduleFromRunLoop_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFRelease_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRelease_FxnInst(){
		return ((CFRelease_FxnInst != null)
	? (CFRelease_FxnInst)
	: (CFRelease_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRelease", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFRelease(final com.apple.jobjc.corefoundation.CFTypeRefCFType cf){
			final com.apple.jobjc.Invoke.FunCall CFRelease_FxnInst = get_CFRelease_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRelease_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, cf);
		CFRelease_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFRetain_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRetain_FxnInst(){
		return ((CFRetain_FxnInst != null)
	? (CFRetain_FxnInst)
	: (CFRetain_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRetain", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFTypeRefCFType CFRetain(final com.apple.jobjc.corefoundation.CFTypeRefCFType cf){
			final com.apple.jobjc.Invoke.FunCall CFRetain_FxnInst = get_CFRetain_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRetain_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, cf);
		CFRetain_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFTypeRefCFType returnValue = (com.apple.jobjc.corefoundation.CFTypeRefCFType) new com.apple.jobjc.corefoundation.CFTypeRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopAddCommonMode_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopAddCommonMode_FxnInst(){
		return ((CFRunLoopAddCommonMode_FxnInst != null)
	? (CFRunLoopAddCommonMode_FxnInst)
	: (CFRunLoopAddCommonMode_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopAddCommonMode", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFRunLoopAddCommonMode(final com.apple.jobjc.corefoundation.CFRunLoopRefCFType rl, final com.apple.jobjc.corefoundation.CFStringRefCFType mode){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopAddCommonMode_FxnInst = get_CFRunLoopAddCommonMode_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopAddCommonMode_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, rl);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, mode);
		CFRunLoopAddCommonMode_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopAddObserver_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopAddObserver_FxnInst(){
		return ((CFRunLoopAddObserver_FxnInst != null)
	? (CFRunLoopAddObserver_FxnInst)
	: (CFRunLoopAddObserver_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopAddObserver", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFRunLoopAddObserver(final com.apple.jobjc.corefoundation.CFRunLoopRefCFType rl, final com.apple.jobjc.corefoundation.CFRunLoopObserverRefCFType observer, final com.apple.jobjc.corefoundation.CFStringRefCFType mode){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopAddObserver_FxnInst = get_CFRunLoopAddObserver_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopAddObserver_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, rl);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, observer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, mode);
		CFRunLoopAddObserver_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopAddSource_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopAddSource_FxnInst(){
		return ((CFRunLoopAddSource_FxnInst != null)
	? (CFRunLoopAddSource_FxnInst)
	: (CFRunLoopAddSource_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopAddSource", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFRunLoopAddSource(final com.apple.jobjc.corefoundation.CFRunLoopRefCFType rl, final com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType source, final com.apple.jobjc.corefoundation.CFStringRefCFType mode){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopAddSource_FxnInst = get_CFRunLoopAddSource_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopAddSource_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, rl);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, source);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, mode);
		CFRunLoopAddSource_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopAddTimer_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopAddTimer_FxnInst(){
		return ((CFRunLoopAddTimer_FxnInst != null)
	? (CFRunLoopAddTimer_FxnInst)
	: (CFRunLoopAddTimer_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopAddTimer", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFRunLoopAddTimer(final com.apple.jobjc.corefoundation.CFRunLoopRefCFType rl, final com.apple.jobjc.corefoundation.CFRunLoopTimerRefCFType timer, final com.apple.jobjc.corefoundation.CFStringRefCFType mode){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopAddTimer_FxnInst = get_CFRunLoopAddTimer_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopAddTimer_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, rl);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, timer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, mode);
		CFRunLoopAddTimer_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopContainsObserver_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopContainsObserver_FxnInst(){
		return ((CFRunLoopContainsObserver_FxnInst != null)
	? (CFRunLoopContainsObserver_FxnInst)
	: (CFRunLoopContainsObserver_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopContainsObserver", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFRunLoopContainsObserver(final com.apple.jobjc.corefoundation.CFRunLoopRefCFType rl, final com.apple.jobjc.corefoundation.CFRunLoopObserverRefCFType observer, final com.apple.jobjc.corefoundation.CFStringRefCFType mode){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopContainsObserver_FxnInst = get_CFRunLoopContainsObserver_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopContainsObserver_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, rl);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, observer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, mode);
		CFRunLoopContainsObserver_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopContainsSource_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopContainsSource_FxnInst(){
		return ((CFRunLoopContainsSource_FxnInst != null)
	? (CFRunLoopContainsSource_FxnInst)
	: (CFRunLoopContainsSource_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopContainsSource", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFRunLoopContainsSource(final com.apple.jobjc.corefoundation.CFRunLoopRefCFType rl, final com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType source, final com.apple.jobjc.corefoundation.CFStringRefCFType mode){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopContainsSource_FxnInst = get_CFRunLoopContainsSource_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopContainsSource_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, rl);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, source);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, mode);
		CFRunLoopContainsSource_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopContainsTimer_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopContainsTimer_FxnInst(){
		return ((CFRunLoopContainsTimer_FxnInst != null)
	? (CFRunLoopContainsTimer_FxnInst)
	: (CFRunLoopContainsTimer_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopContainsTimer", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFRunLoopContainsTimer(final com.apple.jobjc.corefoundation.CFRunLoopRefCFType rl, final com.apple.jobjc.corefoundation.CFRunLoopTimerRefCFType timer, final com.apple.jobjc.corefoundation.CFStringRefCFType mode){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopContainsTimer_FxnInst = get_CFRunLoopContainsTimer_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopContainsTimer_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, rl);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, timer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, mode);
		CFRunLoopContainsTimer_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopCopyAllModes_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopCopyAllModes_FxnInst(){
		return ((CFRunLoopCopyAllModes_FxnInst != null)
	? (CFRunLoopCopyAllModes_FxnInst)
	: (CFRunLoopCopyAllModes_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopCopyAllModes", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFArrayRefCFType CFRunLoopCopyAllModes(final com.apple.jobjc.corefoundation.CFRunLoopRefCFType rl){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopCopyAllModes_FxnInst = get_CFRunLoopCopyAllModes_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopCopyAllModes_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, rl);
		CFRunLoopCopyAllModes_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFArrayRefCFType) new com.apple.jobjc.corefoundation.CFArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopCopyCurrentMode_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopCopyCurrentMode_FxnInst(){
		return ((CFRunLoopCopyCurrentMode_FxnInst != null)
	? (CFRunLoopCopyCurrentMode_FxnInst)
	: (CFRunLoopCopyCurrentMode_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopCopyCurrentMode", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFRunLoopCopyCurrentMode(final com.apple.jobjc.corefoundation.CFRunLoopRefCFType rl){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopCopyCurrentMode_FxnInst = get_CFRunLoopCopyCurrentMode_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopCopyCurrentMode_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, rl);
		CFRunLoopCopyCurrentMode_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopGetCurrent_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopGetCurrent_FxnInst(){
		return ((CFRunLoopGetCurrent_FxnInst != null)
	? (CFRunLoopGetCurrent_FxnInst)
	: (CFRunLoopGetCurrent_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopGetCurrent", com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFRunLoopRefCFType CFRunLoopGetCurrent(){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopGetCurrent_FxnInst = get_CFRunLoopGetCurrent_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopGetCurrent_FxnInst.init(nativeBuffer);
		CFRunLoopGetCurrent_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFRunLoopRefCFType returnValue = (com.apple.jobjc.corefoundation.CFRunLoopRefCFType) new com.apple.jobjc.corefoundation.CFRunLoopRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopGetMain_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopGetMain_FxnInst(){
		return ((CFRunLoopGetMain_FxnInst != null)
	? (CFRunLoopGetMain_FxnInst)
	: (CFRunLoopGetMain_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopGetMain", com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFRunLoopRefCFType CFRunLoopGetMain(){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopGetMain_FxnInst = get_CFRunLoopGetMain_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopGetMain_FxnInst.init(nativeBuffer);
		CFRunLoopGetMain_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFRunLoopRefCFType returnValue = (com.apple.jobjc.corefoundation.CFRunLoopRefCFType) new com.apple.jobjc.corefoundation.CFRunLoopRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopGetNextTimerFireDate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopGetNextTimerFireDate_FxnInst(){
		return ((CFRunLoopGetNextTimerFireDate_FxnInst != null)
	? (CFRunLoopGetNextTimerFireDate_FxnInst)
	: (CFRunLoopGetNextTimerFireDate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopGetNextTimerFireDate", com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public double CFRunLoopGetNextTimerFireDate(final com.apple.jobjc.corefoundation.CFRunLoopRefCFType rl, final com.apple.jobjc.corefoundation.CFStringRefCFType mode){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopGetNextTimerFireDate_FxnInst = get_CFRunLoopGetNextTimerFireDate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopGetNextTimerFireDate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, rl);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, mode);
		CFRunLoopGetNextTimerFireDate_FxnInst.invoke(nativeBuffer);
		final double returnValue = (double) (com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.popDouble(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopGetTypeID_FxnInst(){
		return ((CFRunLoopGetTypeID_FxnInst != null)
	? (CFRunLoopGetTypeID_FxnInst)
	: (CFRunLoopGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFRunLoopGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopGetTypeID_FxnInst = get_CFRunLoopGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopGetTypeID_FxnInst.init(nativeBuffer);
		CFRunLoopGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopIsWaiting_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopIsWaiting_FxnInst(){
		return ((CFRunLoopIsWaiting_FxnInst != null)
	? (CFRunLoopIsWaiting_FxnInst)
	: (CFRunLoopIsWaiting_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopIsWaiting", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFRunLoopIsWaiting(final com.apple.jobjc.corefoundation.CFRunLoopRefCFType rl){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopIsWaiting_FxnInst = get_CFRunLoopIsWaiting_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopIsWaiting_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, rl);
		CFRunLoopIsWaiting_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopObserverCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopObserverCreate_FxnInst(){
		return ((CFRunLoopObserverCreate_FxnInst != null)
	? (CFRunLoopObserverCreate_FxnInst)
	: (CFRunLoopObserverCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopObserverCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFRunLoopObserverRefCFType CFRunLoopObserverCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final long activities, final boolean repeats, final long order, final Object /* CFRunLoopObserverCallBack (^?, ^?) */ callout, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFRunLoopObserverContext> context){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopObserverCreate_FxnInst = get_CFRunLoopObserverCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopObserverCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, activities);
		com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.push(nativeBuffer, repeats);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, order);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, callout);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFRunLoopObserverCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFRunLoopObserverRefCFType returnValue = (com.apple.jobjc.corefoundation.CFRunLoopObserverRefCFType) new com.apple.jobjc.corefoundation.CFRunLoopObserverRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopObserverCreateWithHandler_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopObserverCreateWithHandler_FxnInst(){
		return ((CFRunLoopObserverCreateWithHandler_FxnInst != null)
	? (CFRunLoopObserverCreateWithHandler_FxnInst)
	: (CFRunLoopObserverCreateWithHandler_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopObserverCreateWithHandler", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.UnknownCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFRunLoopObserverRefCFType CFRunLoopObserverCreateWithHandler(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final long activities, final boolean repeats, final long order, final Object /* void(^)(CFRunLoopObserverRef,CFRunLoopActivity) (@, @) */ block){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopObserverCreateWithHandler_FxnInst = get_CFRunLoopObserverCreateWithHandler_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopObserverCreateWithHandler_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, activities);
		com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.push(nativeBuffer, repeats);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, order);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, block);
		CFRunLoopObserverCreateWithHandler_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFRunLoopObserverRefCFType returnValue = (com.apple.jobjc.corefoundation.CFRunLoopObserverRefCFType) new com.apple.jobjc.corefoundation.CFRunLoopObserverRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopObserverDoesRepeat_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopObserverDoesRepeat_FxnInst(){
		return ((CFRunLoopObserverDoesRepeat_FxnInst != null)
	? (CFRunLoopObserverDoesRepeat_FxnInst)
	: (CFRunLoopObserverDoesRepeat_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopObserverDoesRepeat", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFRunLoopObserverDoesRepeat(final com.apple.jobjc.corefoundation.CFRunLoopObserverRefCFType observer){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopObserverDoesRepeat_FxnInst = get_CFRunLoopObserverDoesRepeat_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopObserverDoesRepeat_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, observer);
		CFRunLoopObserverDoesRepeat_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopObserverGetActivities_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopObserverGetActivities_FxnInst(){
		return ((CFRunLoopObserverGetActivities_FxnInst != null)
	? (CFRunLoopObserverGetActivities_FxnInst)
	: (CFRunLoopObserverGetActivities_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopObserverGetActivities", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFRunLoopObserverGetActivities(final com.apple.jobjc.corefoundation.CFRunLoopObserverRefCFType observer){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopObserverGetActivities_FxnInst = get_CFRunLoopObserverGetActivities_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopObserverGetActivities_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, observer);
		CFRunLoopObserverGetActivities_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopObserverGetContext_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopObserverGetContext_FxnInst(){
		return ((CFRunLoopObserverGetContext_FxnInst != null)
	? (CFRunLoopObserverGetContext_FxnInst)
	: (CFRunLoopObserverGetContext_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopObserverGetContext", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFRunLoopObserverGetContext(final com.apple.jobjc.corefoundation.CFRunLoopObserverRefCFType observer, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFRunLoopObserverContext> context){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopObserverGetContext_FxnInst = get_CFRunLoopObserverGetContext_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopObserverGetContext_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, observer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFRunLoopObserverGetContext_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopObserverGetOrder_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopObserverGetOrder_FxnInst(){
		return ((CFRunLoopObserverGetOrder_FxnInst != null)
	? (CFRunLoopObserverGetOrder_FxnInst)
	: (CFRunLoopObserverGetOrder_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopObserverGetOrder", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFRunLoopObserverGetOrder(final com.apple.jobjc.corefoundation.CFRunLoopObserverRefCFType observer){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopObserverGetOrder_FxnInst = get_CFRunLoopObserverGetOrder_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopObserverGetOrder_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, observer);
		CFRunLoopObserverGetOrder_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopObserverGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopObserverGetTypeID_FxnInst(){
		return ((CFRunLoopObserverGetTypeID_FxnInst != null)
	? (CFRunLoopObserverGetTypeID_FxnInst)
	: (CFRunLoopObserverGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopObserverGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFRunLoopObserverGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopObserverGetTypeID_FxnInst = get_CFRunLoopObserverGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopObserverGetTypeID_FxnInst.init(nativeBuffer);
		CFRunLoopObserverGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopObserverInvalidate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopObserverInvalidate_FxnInst(){
		return ((CFRunLoopObserverInvalidate_FxnInst != null)
	? (CFRunLoopObserverInvalidate_FxnInst)
	: (CFRunLoopObserverInvalidate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopObserverInvalidate", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFRunLoopObserverInvalidate(final com.apple.jobjc.corefoundation.CFRunLoopObserverRefCFType observer){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopObserverInvalidate_FxnInst = get_CFRunLoopObserverInvalidate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopObserverInvalidate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, observer);
		CFRunLoopObserverInvalidate_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopObserverIsValid_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopObserverIsValid_FxnInst(){
		return ((CFRunLoopObserverIsValid_FxnInst != null)
	? (CFRunLoopObserverIsValid_FxnInst)
	: (CFRunLoopObserverIsValid_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopObserverIsValid", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFRunLoopObserverIsValid(final com.apple.jobjc.corefoundation.CFRunLoopObserverRefCFType observer){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopObserverIsValid_FxnInst = get_CFRunLoopObserverIsValid_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopObserverIsValid_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, observer);
		CFRunLoopObserverIsValid_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopPerformBlock_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopPerformBlock_FxnInst(){
		return ((CFRunLoopPerformBlock_FxnInst != null)
	? (CFRunLoopPerformBlock_FxnInst)
	: (CFRunLoopPerformBlock_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopPerformBlock", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST)));
	}

	 public void CFRunLoopPerformBlock(final com.apple.jobjc.corefoundation.CFRunLoopRefCFType rl, final com.apple.jobjc.corefoundation.CFTypeRefCFType mode, final Object /* void(^)(void) (@, @) */ block){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopPerformBlock_FxnInst = get_CFRunLoopPerformBlock_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopPerformBlock_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, rl);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, mode);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, block);
		CFRunLoopPerformBlock_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopRemoveObserver_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopRemoveObserver_FxnInst(){
		return ((CFRunLoopRemoveObserver_FxnInst != null)
	? (CFRunLoopRemoveObserver_FxnInst)
	: (CFRunLoopRemoveObserver_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopRemoveObserver", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFRunLoopRemoveObserver(final com.apple.jobjc.corefoundation.CFRunLoopRefCFType rl, final com.apple.jobjc.corefoundation.CFRunLoopObserverRefCFType observer, final com.apple.jobjc.corefoundation.CFStringRefCFType mode){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopRemoveObserver_FxnInst = get_CFRunLoopRemoveObserver_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopRemoveObserver_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, rl);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, observer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, mode);
		CFRunLoopRemoveObserver_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopRemoveSource_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopRemoveSource_FxnInst(){
		return ((CFRunLoopRemoveSource_FxnInst != null)
	? (CFRunLoopRemoveSource_FxnInst)
	: (CFRunLoopRemoveSource_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopRemoveSource", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFRunLoopRemoveSource(final com.apple.jobjc.corefoundation.CFRunLoopRefCFType rl, final com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType source, final com.apple.jobjc.corefoundation.CFStringRefCFType mode){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopRemoveSource_FxnInst = get_CFRunLoopRemoveSource_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopRemoveSource_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, rl);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, source);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, mode);
		CFRunLoopRemoveSource_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopRemoveTimer_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopRemoveTimer_FxnInst(){
		return ((CFRunLoopRemoveTimer_FxnInst != null)
	? (CFRunLoopRemoveTimer_FxnInst)
	: (CFRunLoopRemoveTimer_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopRemoveTimer", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFRunLoopRemoveTimer(final com.apple.jobjc.corefoundation.CFRunLoopRefCFType rl, final com.apple.jobjc.corefoundation.CFRunLoopTimerRefCFType timer, final com.apple.jobjc.corefoundation.CFStringRefCFType mode){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopRemoveTimer_FxnInst = get_CFRunLoopRemoveTimer_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopRemoveTimer_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, rl);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, timer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, mode);
		CFRunLoopRemoveTimer_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopRun_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopRun_FxnInst(){
		return ((CFRunLoopRun_FxnInst != null)
	? (CFRunLoopRun_FxnInst)
	: (CFRunLoopRun_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopRun", com.apple.jobjc.Coder.VoidCoder.INST)));
	}

	 public void CFRunLoopRun(){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopRun_FxnInst = get_CFRunLoopRun_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopRun_FxnInst.init(nativeBuffer);
		CFRunLoopRun_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopRunInMode_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopRunInMode_FxnInst(){
		return ((CFRunLoopRunInMode_FxnInst != null)
	? (CFRunLoopRunInMode_FxnInst)
	: (CFRunLoopRunInMode_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopRunInMode", com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.PrimitiveCoder.BoolCoder.INST)));
	}

	 public int CFRunLoopRunInMode(final com.apple.jobjc.corefoundation.CFStringRefCFType mode, final double seconds, final boolean returnAfterSourceHandled){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopRunInMode_FxnInst = get_CFRunLoopRunInMode_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopRunInMode_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, mode);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, seconds);
		com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.push(nativeBuffer, returnAfterSourceHandled);
		CFRunLoopRunInMode_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopSourceCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopSourceCreate_FxnInst(){
		return ((CFRunLoopSourceCreate_FxnInst != null)
	? (CFRunLoopSourceCreate_FxnInst)
	: (CFRunLoopSourceCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopSourceCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType CFRunLoopSourceCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final long order, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFRunLoopSourceContext> context){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopSourceCreate_FxnInst = get_CFRunLoopSourceCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopSourceCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, order);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFRunLoopSourceCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType returnValue = (com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType) new com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopSourceGetContext_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopSourceGetContext_FxnInst(){
		return ((CFRunLoopSourceGetContext_FxnInst != null)
	? (CFRunLoopSourceGetContext_FxnInst)
	: (CFRunLoopSourceGetContext_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopSourceGetContext", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFRunLoopSourceGetContext(final com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType source, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFRunLoopSourceContext> context){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopSourceGetContext_FxnInst = get_CFRunLoopSourceGetContext_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopSourceGetContext_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, source);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFRunLoopSourceGetContext_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopSourceGetOrder_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopSourceGetOrder_FxnInst(){
		return ((CFRunLoopSourceGetOrder_FxnInst != null)
	? (CFRunLoopSourceGetOrder_FxnInst)
	: (CFRunLoopSourceGetOrder_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopSourceGetOrder", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFRunLoopSourceGetOrder(final com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType source){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopSourceGetOrder_FxnInst = get_CFRunLoopSourceGetOrder_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopSourceGetOrder_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, source);
		CFRunLoopSourceGetOrder_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopSourceGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopSourceGetTypeID_FxnInst(){
		return ((CFRunLoopSourceGetTypeID_FxnInst != null)
	? (CFRunLoopSourceGetTypeID_FxnInst)
	: (CFRunLoopSourceGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopSourceGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFRunLoopSourceGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopSourceGetTypeID_FxnInst = get_CFRunLoopSourceGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopSourceGetTypeID_FxnInst.init(nativeBuffer);
		CFRunLoopSourceGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopSourceInvalidate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopSourceInvalidate_FxnInst(){
		return ((CFRunLoopSourceInvalidate_FxnInst != null)
	? (CFRunLoopSourceInvalidate_FxnInst)
	: (CFRunLoopSourceInvalidate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopSourceInvalidate", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFRunLoopSourceInvalidate(final com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType source){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopSourceInvalidate_FxnInst = get_CFRunLoopSourceInvalidate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopSourceInvalidate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, source);
		CFRunLoopSourceInvalidate_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopSourceIsValid_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopSourceIsValid_FxnInst(){
		return ((CFRunLoopSourceIsValid_FxnInst != null)
	? (CFRunLoopSourceIsValid_FxnInst)
	: (CFRunLoopSourceIsValid_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopSourceIsValid", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFRunLoopSourceIsValid(final com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType source){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopSourceIsValid_FxnInst = get_CFRunLoopSourceIsValid_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopSourceIsValid_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, source);
		CFRunLoopSourceIsValid_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopSourceSignal_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopSourceSignal_FxnInst(){
		return ((CFRunLoopSourceSignal_FxnInst != null)
	? (CFRunLoopSourceSignal_FxnInst)
	: (CFRunLoopSourceSignal_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopSourceSignal", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFRunLoopSourceSignal(final com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType source){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopSourceSignal_FxnInst = get_CFRunLoopSourceSignal_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopSourceSignal_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, source);
		CFRunLoopSourceSignal_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopStop_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopStop_FxnInst(){
		return ((CFRunLoopStop_FxnInst != null)
	? (CFRunLoopStop_FxnInst)
	: (CFRunLoopStop_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopStop", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFRunLoopStop(final com.apple.jobjc.corefoundation.CFRunLoopRefCFType rl){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopStop_FxnInst = get_CFRunLoopStop_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopStop_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, rl);
		CFRunLoopStop_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopTimerCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopTimerCreate_FxnInst(){
		return ((CFRunLoopTimerCreate_FxnInst != null)
	? (CFRunLoopTimerCreate_FxnInst)
	: (CFRunLoopTimerCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopTimerCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFRunLoopTimerRefCFType CFRunLoopTimerCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final double fireDate, final double interval, final long flags, final long order, final Object /* CFRunLoopTimerCallBack (^?, ^?) */ callout, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFRunLoopTimerContext> context){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopTimerCreate_FxnInst = get_CFRunLoopTimerCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopTimerCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, fireDate);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, interval);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, flags);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, order);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, callout);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFRunLoopTimerCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFRunLoopTimerRefCFType returnValue = (com.apple.jobjc.corefoundation.CFRunLoopTimerRefCFType) new com.apple.jobjc.corefoundation.CFRunLoopTimerRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopTimerCreateWithHandler_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopTimerCreateWithHandler_FxnInst(){
		return ((CFRunLoopTimerCreateWithHandler_FxnInst != null)
	? (CFRunLoopTimerCreateWithHandler_FxnInst)
	: (CFRunLoopTimerCreateWithHandler_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopTimerCreateWithHandler", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.UnknownCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFRunLoopTimerRefCFType CFRunLoopTimerCreateWithHandler(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final double fireDate, final double interval, final long flags, final long order, final Object /* void(^)(CFRunLoopTimerRef) (@, @) */ block){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopTimerCreateWithHandler_FxnInst = get_CFRunLoopTimerCreateWithHandler_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopTimerCreateWithHandler_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, fireDate);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, interval);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, flags);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, order);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, block);
		CFRunLoopTimerCreateWithHandler_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFRunLoopTimerRefCFType returnValue = (com.apple.jobjc.corefoundation.CFRunLoopTimerRefCFType) new com.apple.jobjc.corefoundation.CFRunLoopTimerRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopTimerDoesRepeat_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopTimerDoesRepeat_FxnInst(){
		return ((CFRunLoopTimerDoesRepeat_FxnInst != null)
	? (CFRunLoopTimerDoesRepeat_FxnInst)
	: (CFRunLoopTimerDoesRepeat_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopTimerDoesRepeat", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFRunLoopTimerDoesRepeat(final com.apple.jobjc.corefoundation.CFRunLoopTimerRefCFType timer){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopTimerDoesRepeat_FxnInst = get_CFRunLoopTimerDoesRepeat_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopTimerDoesRepeat_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, timer);
		CFRunLoopTimerDoesRepeat_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopTimerGetContext_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopTimerGetContext_FxnInst(){
		return ((CFRunLoopTimerGetContext_FxnInst != null)
	? (CFRunLoopTimerGetContext_FxnInst)
	: (CFRunLoopTimerGetContext_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopTimerGetContext", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFRunLoopTimerGetContext(final com.apple.jobjc.corefoundation.CFRunLoopTimerRefCFType timer, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFRunLoopTimerContext> context){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopTimerGetContext_FxnInst = get_CFRunLoopTimerGetContext_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopTimerGetContext_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, timer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFRunLoopTimerGetContext_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopTimerGetInterval_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopTimerGetInterval_FxnInst(){
		return ((CFRunLoopTimerGetInterval_FxnInst != null)
	? (CFRunLoopTimerGetInterval_FxnInst)
	: (CFRunLoopTimerGetInterval_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopTimerGetInterval", com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public double CFRunLoopTimerGetInterval(final com.apple.jobjc.corefoundation.CFRunLoopTimerRefCFType timer){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopTimerGetInterval_FxnInst = get_CFRunLoopTimerGetInterval_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopTimerGetInterval_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, timer);
		CFRunLoopTimerGetInterval_FxnInst.invoke(nativeBuffer);
		final double returnValue = (double) (com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.popDouble(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopTimerGetNextFireDate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopTimerGetNextFireDate_FxnInst(){
		return ((CFRunLoopTimerGetNextFireDate_FxnInst != null)
	? (CFRunLoopTimerGetNextFireDate_FxnInst)
	: (CFRunLoopTimerGetNextFireDate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopTimerGetNextFireDate", com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public double CFRunLoopTimerGetNextFireDate(final com.apple.jobjc.corefoundation.CFRunLoopTimerRefCFType timer){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopTimerGetNextFireDate_FxnInst = get_CFRunLoopTimerGetNextFireDate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopTimerGetNextFireDate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, timer);
		CFRunLoopTimerGetNextFireDate_FxnInst.invoke(nativeBuffer);
		final double returnValue = (double) (com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.popDouble(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopTimerGetOrder_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopTimerGetOrder_FxnInst(){
		return ((CFRunLoopTimerGetOrder_FxnInst != null)
	? (CFRunLoopTimerGetOrder_FxnInst)
	: (CFRunLoopTimerGetOrder_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopTimerGetOrder", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFRunLoopTimerGetOrder(final com.apple.jobjc.corefoundation.CFRunLoopTimerRefCFType timer){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopTimerGetOrder_FxnInst = get_CFRunLoopTimerGetOrder_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopTimerGetOrder_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, timer);
		CFRunLoopTimerGetOrder_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopTimerGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopTimerGetTypeID_FxnInst(){
		return ((CFRunLoopTimerGetTypeID_FxnInst != null)
	? (CFRunLoopTimerGetTypeID_FxnInst)
	: (CFRunLoopTimerGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopTimerGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFRunLoopTimerGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopTimerGetTypeID_FxnInst = get_CFRunLoopTimerGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopTimerGetTypeID_FxnInst.init(nativeBuffer);
		CFRunLoopTimerGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopTimerInvalidate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopTimerInvalidate_FxnInst(){
		return ((CFRunLoopTimerInvalidate_FxnInst != null)
	? (CFRunLoopTimerInvalidate_FxnInst)
	: (CFRunLoopTimerInvalidate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopTimerInvalidate", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFRunLoopTimerInvalidate(final com.apple.jobjc.corefoundation.CFRunLoopTimerRefCFType timer){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopTimerInvalidate_FxnInst = get_CFRunLoopTimerInvalidate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopTimerInvalidate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, timer);
		CFRunLoopTimerInvalidate_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopTimerIsValid_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopTimerIsValid_FxnInst(){
		return ((CFRunLoopTimerIsValid_FxnInst != null)
	? (CFRunLoopTimerIsValid_FxnInst)
	: (CFRunLoopTimerIsValid_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopTimerIsValid", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFRunLoopTimerIsValid(final com.apple.jobjc.corefoundation.CFRunLoopTimerRefCFType timer){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopTimerIsValid_FxnInst = get_CFRunLoopTimerIsValid_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopTimerIsValid_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, timer);
		CFRunLoopTimerIsValid_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopTimerSetNextFireDate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopTimerSetNextFireDate_FxnInst(){
		return ((CFRunLoopTimerSetNextFireDate_FxnInst != null)
	? (CFRunLoopTimerSetNextFireDate_FxnInst)
	: (CFRunLoopTimerSetNextFireDate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopTimerSetNextFireDate", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST)));
	}

	 public void CFRunLoopTimerSetNextFireDate(final com.apple.jobjc.corefoundation.CFRunLoopTimerRefCFType timer, final double fireDate){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopTimerSetNextFireDate_FxnInst = get_CFRunLoopTimerSetNextFireDate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopTimerSetNextFireDate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, timer);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, fireDate);
		CFRunLoopTimerSetNextFireDate_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFRunLoopWakeUp_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFRunLoopWakeUp_FxnInst(){
		return ((CFRunLoopWakeUp_FxnInst != null)
	? (CFRunLoopWakeUp_FxnInst)
	: (CFRunLoopWakeUp_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFRunLoopWakeUp", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFRunLoopWakeUp(final com.apple.jobjc.corefoundation.CFRunLoopRefCFType rl){
			final com.apple.jobjc.Invoke.FunCall CFRunLoopWakeUp_FxnInst = get_CFRunLoopWakeUp_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFRunLoopWakeUp_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, rl);
		CFRunLoopWakeUp_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFSetAddValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSetAddValue_FxnInst(){
		return ((CFSetAddValue_FxnInst != null)
	? (CFSetAddValue_FxnInst)
	: (CFSetAddValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSetAddValue", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFSetAddValue(final com.apple.jobjc.corefoundation.CFMutableSetRefCFType theSet, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFSetAddValue_FxnInst = get_CFSetAddValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSetAddValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFSetAddValue_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFSetApplyFunction_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSetApplyFunction_FxnInst(){
		return ((CFSetApplyFunction_FxnInst != null)
	? (CFSetApplyFunction_FxnInst)
	: (CFSetApplyFunction_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSetApplyFunction", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFSetApplyFunction(final com.apple.jobjc.corefoundation.CFSetRefCFType theSet, final Object /* CFSetApplierFunction (^?, ^?) */ applier, final com.apple.jobjc.Pointer<Void> context){
			final com.apple.jobjc.Invoke.FunCall CFSetApplyFunction_FxnInst = get_CFSetApplyFunction_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSetApplyFunction_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, applier);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFSetApplyFunction_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFSetContainsValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSetContainsValue_FxnInst(){
		return ((CFSetContainsValue_FxnInst != null)
	? (CFSetContainsValue_FxnInst)
	: (CFSetContainsValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSetContainsValue", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFSetContainsValue(final com.apple.jobjc.corefoundation.CFSetRefCFType theSet, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFSetContainsValue_FxnInst = get_CFSetContainsValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSetContainsValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFSetContainsValue_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSetCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSetCreate_FxnInst(){
		return ((CFSetCreate_FxnInst != null)
	? (CFSetCreate_FxnInst)
	: (CFSetCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSetCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFSetRefCFType CFSetCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.Pointer<com.apple.jobjc.Pointer<Void>> values, final long numValues, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFSetCallBacks> callBacks){
			final com.apple.jobjc.Invoke.FunCall CFSetCreate_FxnInst = get_CFSetCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSetCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, values);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, numValues);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, callBacks);
		CFSetCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFSetRefCFType returnValue = (com.apple.jobjc.corefoundation.CFSetRefCFType) new com.apple.jobjc.corefoundation.CFSetRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSetCreateCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSetCreateCopy_FxnInst(){
		return ((CFSetCreateCopy_FxnInst != null)
	? (CFSetCreateCopy_FxnInst)
	: (CFSetCreateCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSetCreateCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFSetRefCFType CFSetCreateCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFSetRefCFType theSet){
			final com.apple.jobjc.Invoke.FunCall CFSetCreateCopy_FxnInst = get_CFSetCreateCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSetCreateCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		CFSetCreateCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFSetRefCFType returnValue = (com.apple.jobjc.corefoundation.CFSetRefCFType) new com.apple.jobjc.corefoundation.CFSetRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSetCreateMutable_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSetCreateMutable_FxnInst(){
		return ((CFSetCreateMutable_FxnInst != null)
	? (CFSetCreateMutable_FxnInst)
	: (CFSetCreateMutable_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSetCreateMutable", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFMutableSetRefCFType CFSetCreateMutable(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final long capacity, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFSetCallBacks> callBacks){
			final com.apple.jobjc.Invoke.FunCall CFSetCreateMutable_FxnInst = get_CFSetCreateMutable_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSetCreateMutable_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, capacity);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, callBacks);
		CFSetCreateMutable_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFMutableSetRefCFType returnValue = (com.apple.jobjc.corefoundation.CFMutableSetRefCFType) new com.apple.jobjc.corefoundation.CFMutableSetRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSetCreateMutableCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSetCreateMutableCopy_FxnInst(){
		return ((CFSetCreateMutableCopy_FxnInst != null)
	? (CFSetCreateMutableCopy_FxnInst)
	: (CFSetCreateMutableCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSetCreateMutableCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFMutableSetRefCFType CFSetCreateMutableCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final long capacity, final com.apple.jobjc.corefoundation.CFSetRefCFType theSet){
			final com.apple.jobjc.Invoke.FunCall CFSetCreateMutableCopy_FxnInst = get_CFSetCreateMutableCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSetCreateMutableCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, capacity);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		CFSetCreateMutableCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFMutableSetRefCFType returnValue = (com.apple.jobjc.corefoundation.CFMutableSetRefCFType) new com.apple.jobjc.corefoundation.CFMutableSetRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSetGetCount_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSetGetCount_FxnInst(){
		return ((CFSetGetCount_FxnInst != null)
	? (CFSetGetCount_FxnInst)
	: (CFSetGetCount_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSetGetCount", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFSetGetCount(final com.apple.jobjc.corefoundation.CFSetRefCFType theSet){
			final com.apple.jobjc.Invoke.FunCall CFSetGetCount_FxnInst = get_CFSetGetCount_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSetGetCount_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		CFSetGetCount_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSetGetCountOfValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSetGetCountOfValue_FxnInst(){
		return ((CFSetGetCountOfValue_FxnInst != null)
	? (CFSetGetCountOfValue_FxnInst)
	: (CFSetGetCountOfValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSetGetCountOfValue", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFSetGetCountOfValue(final com.apple.jobjc.corefoundation.CFSetRefCFType theSet, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFSetGetCountOfValue_FxnInst = get_CFSetGetCountOfValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSetGetCountOfValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFSetGetCountOfValue_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSetGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSetGetTypeID_FxnInst(){
		return ((CFSetGetTypeID_FxnInst != null)
	? (CFSetGetTypeID_FxnInst)
	: (CFSetGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSetGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFSetGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFSetGetTypeID_FxnInst = get_CFSetGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSetGetTypeID_FxnInst.init(nativeBuffer);
		CFSetGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSetGetValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSetGetValue_FxnInst(){
		return ((CFSetGetValue_FxnInst != null)
	? (CFSetGetValue_FxnInst)
	: (CFSetGetValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSetGetValue", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.Pointer<Void> CFSetGetValue(final com.apple.jobjc.corefoundation.CFSetRefCFType theSet, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFSetGetValue_FxnInst = get_CFSetGetValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSetGetValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFSetGetValue_FxnInst.invoke(nativeBuffer);
		final com.apple.jobjc.Pointer<Void> returnValue = (com.apple.jobjc.Pointer<Void>) (com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSetGetValueIfPresent_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSetGetValueIfPresent_FxnInst(){
		return ((CFSetGetValueIfPresent_FxnInst != null)
	? (CFSetGetValueIfPresent_FxnInst)
	: (CFSetGetValueIfPresent_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSetGetValueIfPresent", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFSetGetValueIfPresent(final com.apple.jobjc.corefoundation.CFSetRefCFType theSet, final com.apple.jobjc.Pointer<Void> candidate, final com.apple.jobjc.Pointer<com.apple.jobjc.Pointer<Void>> value){
			final com.apple.jobjc.Invoke.FunCall CFSetGetValueIfPresent_FxnInst = get_CFSetGetValueIfPresent_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSetGetValueIfPresent_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, candidate);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFSetGetValueIfPresent_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSetGetValues_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSetGetValues_FxnInst(){
		return ((CFSetGetValues_FxnInst != null)
	? (CFSetGetValues_FxnInst)
	: (CFSetGetValues_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSetGetValues", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFSetGetValues(final com.apple.jobjc.corefoundation.CFSetRefCFType theSet, final com.apple.jobjc.Pointer<com.apple.jobjc.Pointer<Void>> values){
			final com.apple.jobjc.Invoke.FunCall CFSetGetValues_FxnInst = get_CFSetGetValues_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSetGetValues_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, values);
		CFSetGetValues_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFSetRemoveAllValues_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSetRemoveAllValues_FxnInst(){
		return ((CFSetRemoveAllValues_FxnInst != null)
	? (CFSetRemoveAllValues_FxnInst)
	: (CFSetRemoveAllValues_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSetRemoveAllValues", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFSetRemoveAllValues(final com.apple.jobjc.corefoundation.CFMutableSetRefCFType theSet){
			final com.apple.jobjc.Invoke.FunCall CFSetRemoveAllValues_FxnInst = get_CFSetRemoveAllValues_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSetRemoveAllValues_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		CFSetRemoveAllValues_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFSetRemoveValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSetRemoveValue_FxnInst(){
		return ((CFSetRemoveValue_FxnInst != null)
	? (CFSetRemoveValue_FxnInst)
	: (CFSetRemoveValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSetRemoveValue", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFSetRemoveValue(final com.apple.jobjc.corefoundation.CFMutableSetRefCFType theSet, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFSetRemoveValue_FxnInst = get_CFSetRemoveValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSetRemoveValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFSetRemoveValue_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFSetReplaceValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSetReplaceValue_FxnInst(){
		return ((CFSetReplaceValue_FxnInst != null)
	? (CFSetReplaceValue_FxnInst)
	: (CFSetReplaceValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSetReplaceValue", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFSetReplaceValue(final com.apple.jobjc.corefoundation.CFMutableSetRefCFType theSet, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFSetReplaceValue_FxnInst = get_CFSetReplaceValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSetReplaceValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFSetReplaceValue_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFSetSetValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSetSetValue_FxnInst(){
		return ((CFSetSetValue_FxnInst != null)
	? (CFSetSetValue_FxnInst)
	: (CFSetSetValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSetSetValue", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFSetSetValue(final com.apple.jobjc.corefoundation.CFMutableSetRefCFType theSet, final com.apple.jobjc.Pointer<Void> value){
			final com.apple.jobjc.Invoke.FunCall CFSetSetValue_FxnInst = get_CFSetSetValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSetSetValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		CFSetSetValue_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFShow_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFShow_FxnInst(){
		return ((CFShow_FxnInst != null)
	? (CFShow_FxnInst)
	: (CFShow_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFShow", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFShow(final com.apple.jobjc.corefoundation.CFTypeRefCFType obj){
			final com.apple.jobjc.Invoke.FunCall CFShow_FxnInst = get_CFShow_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFShow_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, obj);
		CFShow_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFShowStr_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFShowStr_FxnInst(){
		return ((CFShowStr_FxnInst != null)
	? (CFShowStr_FxnInst)
	: (CFShowStr_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFShowStr", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFShowStr(final com.apple.jobjc.corefoundation.CFStringRefCFType str){
			final com.apple.jobjc.Invoke.FunCall CFShowStr_FxnInst = get_CFShowStr_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFShowStr_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, str);
		CFShowStr_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFSocketConnectToAddress_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSocketConnectToAddress_FxnInst(){
		return ((CFSocketConnectToAddress_FxnInst != null)
	? (CFSocketConnectToAddress_FxnInst)
	: (CFSocketConnectToAddress_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSocketConnectToAddress", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST)));
	}

	 public long CFSocketConnectToAddress(final com.apple.jobjc.corefoundation.CFSocketRefCFType s, final com.apple.jobjc.corefoundation.CFDataRefCFType address, final double timeout){
			final com.apple.jobjc.Invoke.FunCall CFSocketConnectToAddress_FxnInst = get_CFSocketConnectToAddress_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSocketConnectToAddress_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, s);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, address);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, timeout);
		CFSocketConnectToAddress_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSocketCopyAddress_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSocketCopyAddress_FxnInst(){
		return ((CFSocketCopyAddress_FxnInst != null)
	? (CFSocketCopyAddress_FxnInst)
	: (CFSocketCopyAddress_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSocketCopyAddress", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDataRefCFType CFSocketCopyAddress(final com.apple.jobjc.corefoundation.CFSocketRefCFType s){
			final com.apple.jobjc.Invoke.FunCall CFSocketCopyAddress_FxnInst = get_CFSocketCopyAddress_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSocketCopyAddress_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, s);
		CFSocketCopyAddress_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDataRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDataRefCFType) new com.apple.jobjc.corefoundation.CFDataRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSocketCopyPeerAddress_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSocketCopyPeerAddress_FxnInst(){
		return ((CFSocketCopyPeerAddress_FxnInst != null)
	? (CFSocketCopyPeerAddress_FxnInst)
	: (CFSocketCopyPeerAddress_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSocketCopyPeerAddress", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDataRefCFType CFSocketCopyPeerAddress(final com.apple.jobjc.corefoundation.CFSocketRefCFType s){
			final com.apple.jobjc.Invoke.FunCall CFSocketCopyPeerAddress_FxnInst = get_CFSocketCopyPeerAddress_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSocketCopyPeerAddress_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, s);
		CFSocketCopyPeerAddress_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDataRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDataRefCFType) new com.apple.jobjc.corefoundation.CFDataRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSocketCopyRegisteredSocketSignature_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSocketCopyRegisteredSocketSignature_FxnInst(){
		return ((CFSocketCopyRegisteredSocketSignature_FxnInst != null)
	? (CFSocketCopyRegisteredSocketSignature_FxnInst)
	: (CFSocketCopyRegisteredSocketSignature_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSocketCopyRegisteredSocketSignature", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFSocketCopyRegisteredSocketSignature(final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFSocketSignature> nameServerSignature, final double timeout, final com.apple.jobjc.corefoundation.CFStringRefCFType name, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFSocketSignature> signature, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFDataRefCFType> nameServerAddress){
			final com.apple.jobjc.Invoke.FunCall CFSocketCopyRegisteredSocketSignature_FxnInst = get_CFSocketCopyRegisteredSocketSignature_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSocketCopyRegisteredSocketSignature_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, nameServerSignature);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, timeout);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, name);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, signature);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, nameServerAddress);
		CFSocketCopyRegisteredSocketSignature_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSocketCopyRegisteredValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSocketCopyRegisteredValue_FxnInst(){
		return ((CFSocketCopyRegisteredValue_FxnInst != null)
	? (CFSocketCopyRegisteredValue_FxnInst)
	: (CFSocketCopyRegisteredValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSocketCopyRegisteredValue", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFSocketCopyRegisteredValue(final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFSocketSignature> nameServerSignature, final double timeout, final com.apple.jobjc.corefoundation.CFStringRefCFType name, final com.apple.jobjc.Pointer<Object /* CFPropertyListRef (@, @) */> value, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFDataRefCFType> nameServerAddress){
			final com.apple.jobjc.Invoke.FunCall CFSocketCopyRegisteredValue_FxnInst = get_CFSocketCopyRegisteredValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSocketCopyRegisteredValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, nameServerSignature);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, timeout);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, name);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, value);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, nameServerAddress);
		CFSocketCopyRegisteredValue_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSocketCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSocketCreate_FxnInst(){
		return ((CFSocketCreate_FxnInst != null)
	? (CFSocketCreate_FxnInst)
	: (CFSocketCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSocketCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder, com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder, com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFSocketRefCFType CFSocketCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final int protocolFamily, final int socketType, final int protocol, final long callBackTypes, final Object /* CFSocketCallBack (^?, ^?) */ callout, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFSocketContext> context){
			final com.apple.jobjc.Invoke.FunCall CFSocketCreate_FxnInst = get_CFSocketCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSocketCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder.push(nativeBuffer, protocolFamily);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder.push(nativeBuffer, socketType);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder.push(nativeBuffer, protocol);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, callBackTypes);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, callout);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFSocketCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFSocketRefCFType returnValue = (com.apple.jobjc.corefoundation.CFSocketRefCFType) new com.apple.jobjc.corefoundation.CFSocketRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSocketCreateConnectedToSocketSignature_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSocketCreateConnectedToSocketSignature_FxnInst(){
		return ((CFSocketCreateConnectedToSocketSignature_FxnInst != null)
	? (CFSocketCreateConnectedToSocketSignature_FxnInst)
	: (CFSocketCreateConnectedToSocketSignature_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSocketCreateConnectedToSocketSignature", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFSocketRefCFType CFSocketCreateConnectedToSocketSignature(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFSocketSignature> signature, final long callBackTypes, final Object /* CFSocketCallBack (^?, ^?) */ callout, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFSocketContext> context, final double timeout){
			final com.apple.jobjc.Invoke.FunCall CFSocketCreateConnectedToSocketSignature_FxnInst = get_CFSocketCreateConnectedToSocketSignature_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSocketCreateConnectedToSocketSignature_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, signature);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, callBackTypes);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, callout);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, timeout);
		CFSocketCreateConnectedToSocketSignature_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFSocketRefCFType returnValue = (com.apple.jobjc.corefoundation.CFSocketRefCFType) new com.apple.jobjc.corefoundation.CFSocketRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSocketCreateRunLoopSource_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSocketCreateRunLoopSource_FxnInst(){
		return ((CFSocketCreateRunLoopSource_FxnInst != null)
	? (CFSocketCreateRunLoopSource_FxnInst)
	: (CFSocketCreateRunLoopSource_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSocketCreateRunLoopSource", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType CFSocketCreateRunLoopSource(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFSocketRefCFType s, final long order){
			final com.apple.jobjc.Invoke.FunCall CFSocketCreateRunLoopSource_FxnInst = get_CFSocketCreateRunLoopSource_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSocketCreateRunLoopSource_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, s);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, order);
		CFSocketCreateRunLoopSource_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType returnValue = (com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType) new com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSocketCreateWithNative_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSocketCreateWithNative_FxnInst(){
		return ((CFSocketCreateWithNative_FxnInst != null)
	? (CFSocketCreateWithNative_FxnInst)
	: (CFSocketCreateWithNative_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSocketCreateWithNative", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.SIntCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFSocketRefCFType CFSocketCreateWithNative(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final int sock, final long callBackTypes, final Object /* CFSocketCallBack (^?, ^?) */ callout, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFSocketContext> context){
			final com.apple.jobjc.Invoke.FunCall CFSocketCreateWithNative_FxnInst = get_CFSocketCreateWithNative_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSocketCreateWithNative_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.PrimitiveCoder.SIntCoder.INST.push(nativeBuffer, sock);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, callBackTypes);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, callout);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFSocketCreateWithNative_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFSocketRefCFType returnValue = (com.apple.jobjc.corefoundation.CFSocketRefCFType) new com.apple.jobjc.corefoundation.CFSocketRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSocketCreateWithSocketSignature_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSocketCreateWithSocketSignature_FxnInst(){
		return ((CFSocketCreateWithSocketSignature_FxnInst != null)
	? (CFSocketCreateWithSocketSignature_FxnInst)
	: (CFSocketCreateWithSocketSignature_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSocketCreateWithSocketSignature", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFSocketRefCFType CFSocketCreateWithSocketSignature(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFSocketSignature> signature, final long callBackTypes, final Object /* CFSocketCallBack (^?, ^?) */ callout, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFSocketContext> context){
			final com.apple.jobjc.Invoke.FunCall CFSocketCreateWithSocketSignature_FxnInst = get_CFSocketCreateWithSocketSignature_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSocketCreateWithSocketSignature_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, signature);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, callBackTypes);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, callout);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFSocketCreateWithSocketSignature_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFSocketRefCFType returnValue = (com.apple.jobjc.corefoundation.CFSocketRefCFType) new com.apple.jobjc.corefoundation.CFSocketRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSocketDisableCallBacks_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSocketDisableCallBacks_FxnInst(){
		return ((CFSocketDisableCallBacks_FxnInst != null)
	? (CFSocketDisableCallBacks_FxnInst)
	: (CFSocketDisableCallBacks_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSocketDisableCallBacks", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public void CFSocketDisableCallBacks(final com.apple.jobjc.corefoundation.CFSocketRefCFType s, final long callBackTypes){
			final com.apple.jobjc.Invoke.FunCall CFSocketDisableCallBacks_FxnInst = get_CFSocketDisableCallBacks_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSocketDisableCallBacks_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, s);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, callBackTypes);
		CFSocketDisableCallBacks_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFSocketEnableCallBacks_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSocketEnableCallBacks_FxnInst(){
		return ((CFSocketEnableCallBacks_FxnInst != null)
	? (CFSocketEnableCallBacks_FxnInst)
	: (CFSocketEnableCallBacks_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSocketEnableCallBacks", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public void CFSocketEnableCallBacks(final com.apple.jobjc.corefoundation.CFSocketRefCFType s, final long callBackTypes){
			final com.apple.jobjc.Invoke.FunCall CFSocketEnableCallBacks_FxnInst = get_CFSocketEnableCallBacks_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSocketEnableCallBacks_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, s);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, callBackTypes);
		CFSocketEnableCallBacks_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFSocketGetContext_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSocketGetContext_FxnInst(){
		return ((CFSocketGetContext_FxnInst != null)
	? (CFSocketGetContext_FxnInst)
	: (CFSocketGetContext_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSocketGetContext", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFSocketGetContext(final com.apple.jobjc.corefoundation.CFSocketRefCFType s, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFSocketContext> context){
			final com.apple.jobjc.Invoke.FunCall CFSocketGetContext_FxnInst = get_CFSocketGetContext_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSocketGetContext_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, s);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFSocketGetContext_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFSocketGetDefaultNameRegistryPortNumber_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSocketGetDefaultNameRegistryPortNumber_FxnInst(){
		return ((CFSocketGetDefaultNameRegistryPortNumber_FxnInst != null)
	? (CFSocketGetDefaultNameRegistryPortNumber_FxnInst)
	: (CFSocketGetDefaultNameRegistryPortNumber_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSocketGetDefaultNameRegistryPortNumber", com.apple.jobjc.PrimitiveCoder.UShortCoder.INST)));
	}

	 public short CFSocketGetDefaultNameRegistryPortNumber(){
			final com.apple.jobjc.Invoke.FunCall CFSocketGetDefaultNameRegistryPortNumber_FxnInst = get_CFSocketGetDefaultNameRegistryPortNumber_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSocketGetDefaultNameRegistryPortNumber_FxnInst.init(nativeBuffer);
		CFSocketGetDefaultNameRegistryPortNumber_FxnInst.invoke(nativeBuffer);
		final short returnValue = (short) (com.apple.jobjc.PrimitiveCoder.UShortCoder.INST.popShort(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSocketGetNative_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSocketGetNative_FxnInst(){
		return ((CFSocketGetNative_FxnInst != null)
	? (CFSocketGetNative_FxnInst)
	: (CFSocketGetNative_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSocketGetNative", com.apple.jobjc.PrimitiveCoder.SIntCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public int CFSocketGetNative(final com.apple.jobjc.corefoundation.CFSocketRefCFType s){
			final com.apple.jobjc.Invoke.FunCall CFSocketGetNative_FxnInst = get_CFSocketGetNative_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSocketGetNative_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, s);
		CFSocketGetNative_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.PrimitiveCoder.SIntCoder.INST.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSocketGetSocketFlags_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSocketGetSocketFlags_FxnInst(){
		return ((CFSocketGetSocketFlags_FxnInst != null)
	? (CFSocketGetSocketFlags_FxnInst)
	: (CFSocketGetSocketFlags_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSocketGetSocketFlags", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFSocketGetSocketFlags(final com.apple.jobjc.corefoundation.CFSocketRefCFType s){
			final com.apple.jobjc.Invoke.FunCall CFSocketGetSocketFlags_FxnInst = get_CFSocketGetSocketFlags_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSocketGetSocketFlags_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, s);
		CFSocketGetSocketFlags_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSocketGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSocketGetTypeID_FxnInst(){
		return ((CFSocketGetTypeID_FxnInst != null)
	? (CFSocketGetTypeID_FxnInst)
	: (CFSocketGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSocketGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFSocketGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFSocketGetTypeID_FxnInst = get_CFSocketGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSocketGetTypeID_FxnInst.init(nativeBuffer);
		CFSocketGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSocketInvalidate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSocketInvalidate_FxnInst(){
		return ((CFSocketInvalidate_FxnInst != null)
	? (CFSocketInvalidate_FxnInst)
	: (CFSocketInvalidate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSocketInvalidate", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFSocketInvalidate(final com.apple.jobjc.corefoundation.CFSocketRefCFType s){
			final com.apple.jobjc.Invoke.FunCall CFSocketInvalidate_FxnInst = get_CFSocketInvalidate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSocketInvalidate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, s);
		CFSocketInvalidate_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFSocketIsValid_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSocketIsValid_FxnInst(){
		return ((CFSocketIsValid_FxnInst != null)
	? (CFSocketIsValid_FxnInst)
	: (CFSocketIsValid_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSocketIsValid", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFSocketIsValid(final com.apple.jobjc.corefoundation.CFSocketRefCFType s){
			final com.apple.jobjc.Invoke.FunCall CFSocketIsValid_FxnInst = get_CFSocketIsValid_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSocketIsValid_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, s);
		CFSocketIsValid_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSocketRegisterSocketSignature_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSocketRegisterSocketSignature_FxnInst(){
		return ((CFSocketRegisterSocketSignature_FxnInst != null)
	? (CFSocketRegisterSocketSignature_FxnInst)
	: (CFSocketRegisterSocketSignature_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSocketRegisterSocketSignature", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFSocketRegisterSocketSignature(final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFSocketSignature> nameServerSignature, final double timeout, final com.apple.jobjc.corefoundation.CFStringRefCFType name, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFSocketSignature> signature){
			final com.apple.jobjc.Invoke.FunCall CFSocketRegisterSocketSignature_FxnInst = get_CFSocketRegisterSocketSignature_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSocketRegisterSocketSignature_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, nameServerSignature);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, timeout);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, name);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, signature);
		CFSocketRegisterSocketSignature_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSocketRegisterValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSocketRegisterValue_FxnInst(){
		return ((CFSocketRegisterValue_FxnInst != null)
	? (CFSocketRegisterValue_FxnInst)
	: (CFSocketRegisterValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSocketRegisterValue", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST)));
	}

	 public long CFSocketRegisterValue(final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFSocketSignature> nameServerSignature, final double timeout, final com.apple.jobjc.corefoundation.CFStringRefCFType name, final Object /* CFPropertyListRef (@, @) */ value){
			final com.apple.jobjc.Invoke.FunCall CFSocketRegisterValue_FxnInst = get_CFSocketRegisterValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSocketRegisterValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, nameServerSignature);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, timeout);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, name);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, value);
		CFSocketRegisterValue_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSocketSendData_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSocketSendData_FxnInst(){
		return ((CFSocketSendData_FxnInst != null)
	? (CFSocketSendData_FxnInst)
	: (CFSocketSendData_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSocketSendData", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST)));
	}

	 public long CFSocketSendData(final com.apple.jobjc.corefoundation.CFSocketRefCFType s, final com.apple.jobjc.corefoundation.CFDataRefCFType address, final com.apple.jobjc.corefoundation.CFDataRefCFType data, final double timeout){
			final com.apple.jobjc.Invoke.FunCall CFSocketSendData_FxnInst = get_CFSocketSendData_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSocketSendData_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, s);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, address);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, data);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, timeout);
		CFSocketSendData_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSocketSetAddress_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSocketSetAddress_FxnInst(){
		return ((CFSocketSetAddress_FxnInst != null)
	? (CFSocketSetAddress_FxnInst)
	: (CFSocketSetAddress_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSocketSetAddress", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFSocketSetAddress(final com.apple.jobjc.corefoundation.CFSocketRefCFType s, final com.apple.jobjc.corefoundation.CFDataRefCFType address){
			final com.apple.jobjc.Invoke.FunCall CFSocketSetAddress_FxnInst = get_CFSocketSetAddress_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSocketSetAddress_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, s);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, address);
		CFSocketSetAddress_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSocketSetDefaultNameRegistryPortNumber_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSocketSetDefaultNameRegistryPortNumber_FxnInst(){
		return ((CFSocketSetDefaultNameRegistryPortNumber_FxnInst != null)
	? (CFSocketSetDefaultNameRegistryPortNumber_FxnInst)
	: (CFSocketSetDefaultNameRegistryPortNumber_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSocketSetDefaultNameRegistryPortNumber", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.PrimitiveCoder.UShortCoder.INST)));
	}

	 public void CFSocketSetDefaultNameRegistryPortNumber(final short port){
			final com.apple.jobjc.Invoke.FunCall CFSocketSetDefaultNameRegistryPortNumber_FxnInst = get_CFSocketSetDefaultNameRegistryPortNumber_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSocketSetDefaultNameRegistryPortNumber_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.UShortCoder.INST.push(nativeBuffer, port);
		CFSocketSetDefaultNameRegistryPortNumber_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFSocketSetSocketFlags_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSocketSetSocketFlags_FxnInst(){
		return ((CFSocketSetSocketFlags_FxnInst != null)
	? (CFSocketSetSocketFlags_FxnInst)
	: (CFSocketSetSocketFlags_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSocketSetSocketFlags", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public void CFSocketSetSocketFlags(final com.apple.jobjc.corefoundation.CFSocketRefCFType s, final long flags){
			final com.apple.jobjc.Invoke.FunCall CFSocketSetSocketFlags_FxnInst = get_CFSocketSetSocketFlags_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSocketSetSocketFlags_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, s);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, flags);
		CFSocketSetSocketFlags_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFSocketUnregister_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSocketUnregister_FxnInst(){
		return ((CFSocketUnregister_FxnInst != null)
	? (CFSocketUnregister_FxnInst)
	: (CFSocketUnregister_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSocketUnregister", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFSocketUnregister(final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFSocketSignature> nameServerSignature, final double timeout, final com.apple.jobjc.corefoundation.CFStringRefCFType name){
			final com.apple.jobjc.Invoke.FunCall CFSocketUnregister_FxnInst = get_CFSocketUnregister_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSocketUnregister_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, nameServerSignature);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, timeout);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, name);
		CFSocketUnregister_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStreamCreateBoundPair_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStreamCreateBoundPair_FxnInst(){
		return ((CFStreamCreateBoundPair_FxnInst != null)
	? (CFStreamCreateBoundPair_FxnInst)
	: (CFStreamCreateBoundPair_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStreamCreateBoundPair", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public void CFStreamCreateBoundPair(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFReadStreamRefCFType> readStream, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFWriteStreamRefCFType> writeStream, final long transferBufferSize){
			final com.apple.jobjc.Invoke.FunCall CFStreamCreateBoundPair_FxnInst = get_CFStreamCreateBoundPair_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStreamCreateBoundPair_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, readStream);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, writeStream);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, transferBufferSize);
		CFStreamCreateBoundPair_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFStreamCreatePairWithPeerSocketSignature_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStreamCreatePairWithPeerSocketSignature_FxnInst(){
		return ((CFStreamCreatePairWithPeerSocketSignature_FxnInst != null)
	? (CFStreamCreatePairWithPeerSocketSignature_FxnInst)
	: (CFStreamCreatePairWithPeerSocketSignature_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStreamCreatePairWithPeerSocketSignature", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFStreamCreatePairWithPeerSocketSignature(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFSocketSignature> signature, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFReadStreamRefCFType> readStream, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFWriteStreamRefCFType> writeStream){
			final com.apple.jobjc.Invoke.FunCall CFStreamCreatePairWithPeerSocketSignature_FxnInst = get_CFStreamCreatePairWithPeerSocketSignature_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStreamCreatePairWithPeerSocketSignature_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, signature);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, readStream);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, writeStream);
		CFStreamCreatePairWithPeerSocketSignature_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFStreamCreatePairWithSocket_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStreamCreatePairWithSocket_FxnInst(){
		return ((CFStreamCreatePairWithSocket_FxnInst != null)
	? (CFStreamCreatePairWithSocket_FxnInst)
	: (CFStreamCreatePairWithSocket_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStreamCreatePairWithSocket", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.SIntCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFStreamCreatePairWithSocket(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final int sock, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFReadStreamRefCFType> readStream, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFWriteStreamRefCFType> writeStream){
			final com.apple.jobjc.Invoke.FunCall CFStreamCreatePairWithSocket_FxnInst = get_CFStreamCreatePairWithSocket_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStreamCreatePairWithSocket_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.PrimitiveCoder.SIntCoder.INST.push(nativeBuffer, sock);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, readStream);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, writeStream);
		CFStreamCreatePairWithSocket_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFStreamCreatePairWithSocketToHost_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStreamCreatePairWithSocketToHost_FxnInst(){
		return ((CFStreamCreatePairWithSocketToHost_FxnInst != null)
	? (CFStreamCreatePairWithSocketToHost_FxnInst)
	: (CFStreamCreatePairWithSocketToHost_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStreamCreatePairWithSocketToHost", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFStreamCreatePairWithSocketToHost(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFStringRefCFType host, final int port, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFReadStreamRefCFType> readStream, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFWriteStreamRefCFType> writeStream){
			final com.apple.jobjc.Invoke.FunCall CFStreamCreatePairWithSocketToHost_FxnInst = get_CFStreamCreatePairWithSocketToHost_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStreamCreatePairWithSocketToHost_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, host);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, port);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, readStream);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, writeStream);
		CFStreamCreatePairWithSocketToHost_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringAppend_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringAppend_FxnInst(){
		return ((CFStringAppend_FxnInst != null)
	? (CFStringAppend_FxnInst)
	: (CFStringAppend_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringAppend", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFStringAppend(final com.apple.jobjc.corefoundation.CFMutableStringRefCFType theString, final com.apple.jobjc.corefoundation.CFStringRefCFType appendedString){
			final com.apple.jobjc.Invoke.FunCall CFStringAppend_FxnInst = get_CFStringAppend_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringAppend_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, appendedString);
		CFStringAppend_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringAppendCString_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringAppendCString_FxnInst(){
		return ((CFStringAppendCString_FxnInst != null)
	? (CFStringAppendCString_FxnInst)
	: (CFStringAppendCString_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringAppendCString", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder)));
	}

	 public void CFStringAppendCString(final com.apple.jobjc.corefoundation.CFMutableStringRefCFType theString, final com.apple.jobjc.Pointer<java.lang.Byte> cStr, final int encoding){
			final com.apple.jobjc.Invoke.FunCall CFStringAppendCString_FxnInst = get_CFStringAppendCString_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringAppendCString_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, cStr);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, encoding);
		CFStringAppendCString_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringAppendCharacters_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringAppendCharacters_FxnInst(){
		return ((CFStringAppendCharacters_FxnInst != null)
	? (CFStringAppendCharacters_FxnInst)
	: (CFStringAppendCharacters_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringAppendCharacters", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public void CFStringAppendCharacters(final com.apple.jobjc.corefoundation.CFMutableStringRefCFType theString, final com.apple.jobjc.Pointer<java.lang.Short> chars, final long numChars){
			final com.apple.jobjc.Invoke.FunCall CFStringAppendCharacters_FxnInst = get_CFStringAppendCharacters_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringAppendCharacters_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, chars);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, numChars);
		CFStringAppendCharacters_FxnInst.invoke(nativeBuffer);
		
		
	}

	 public void CFStringAppendFormat(final com.apple.jobjc.corefoundation.CFMutableStringRefCFType theString, final com.apple.jobjc.corefoundation.CFDictionaryRefCFType formatOptions, final com.apple.jobjc.corefoundation.CFStringRefCFType format, final Object... varargs){
		com.apple.jobjc.Coder[] argCoders = new com.apple.jobjc.Coder[3 + varargs.length];
argCoders[0] = com.apple.jobjc.Coder.PointerCoder.INST;
argCoders[1] = com.apple.jobjc.Coder.PointerCoder.INST;
argCoders[2] = com.apple.jobjc.Coder.PointerCoder.INST;
for(int i = 3; i < (3 + varargs.length); i++)
	argCoders[i] = com.apple.jobjc.Coder.getCoderAtRuntime(varargs[i - 3]);
final com.apple.jobjc.Invoke.FunCall CFStringAppendFormat_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringAppendFormat", com.apple.jobjc.Coder.VoidCoder.INST, argCoders);
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringAppendFormat_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, formatOptions);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, format);
		for(int i = 3; i < (3 + varargs.length); i++)
			argCoders[i].push(nativeBuffer, varargs[i - 3]);
		CFStringAppendFormat_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringAppendFormatAndArguments_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringAppendFormatAndArguments_FxnInst(){
		return ((CFStringAppendFormatAndArguments_FxnInst != null)
	? (CFStringAppendFormatAndArguments_FxnInst)
	: (CFStringAppendFormatAndArguments_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringAppendFormatAndArguments", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST)));
	}

	 public void CFStringAppendFormatAndArguments(final com.apple.jobjc.corefoundation.CFMutableStringRefCFType theString, final com.apple.jobjc.corefoundation.CFDictionaryRefCFType formatOptions, final com.apple.jobjc.corefoundation.CFStringRefCFType format, final Object /* va_list (*, ^{__va_list_tag=II^v^v}) */ arguments){
			final com.apple.jobjc.Invoke.FunCall CFStringAppendFormatAndArguments_FxnInst = get_CFStringAppendFormatAndArguments_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringAppendFormatAndArguments_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, formatOptions);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, format);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, arguments);
		CFStringAppendFormatAndArguments_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringAppendPascalString_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringAppendPascalString_FxnInst(){
		return ((CFStringAppendPascalString_FxnInst != null)
	? (CFStringAppendPascalString_FxnInst)
	: (CFStringAppendPascalString_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringAppendPascalString", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder)));
	}

	 public void CFStringAppendPascalString(final com.apple.jobjc.corefoundation.CFMutableStringRefCFType theString, final Object /* ConstStr255Param (*, *) */ pStr, final int encoding){
			final com.apple.jobjc.Invoke.FunCall CFStringAppendPascalString_FxnInst = get_CFStringAppendPascalString_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringAppendPascalString_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, pStr);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, encoding);
		CFStringAppendPascalString_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringCapitalize_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringCapitalize_FxnInst(){
		return ((CFStringCapitalize_FxnInst != null)
	? (CFStringCapitalize_FxnInst)
	: (CFStringCapitalize_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringCapitalize", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFStringCapitalize(final com.apple.jobjc.corefoundation.CFMutableStringRefCFType theString, final com.apple.jobjc.corefoundation.CFLocaleRefCFType locale){
			final com.apple.jobjc.Invoke.FunCall CFStringCapitalize_FxnInst = get_CFStringCapitalize_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringCapitalize_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, locale);
		CFStringCapitalize_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringCompare_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringCompare_FxnInst(){
		return ((CFStringCompare_FxnInst != null)
	? (CFStringCompare_FxnInst)
	: (CFStringCompare_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringCompare", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFStringCompare(final com.apple.jobjc.corefoundation.CFStringRefCFType theString1, final com.apple.jobjc.corefoundation.CFStringRefCFType theString2, final long compareOptions){
			final com.apple.jobjc.Invoke.FunCall CFStringCompare_FxnInst = get_CFStringCompare_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringCompare_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString1);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString2);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, compareOptions);
		CFStringCompare_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringCompareWithOptions_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringCompareWithOptions_FxnInst(){
		return ((CFStringCompareWithOptions_FxnInst != null)
	? (CFStringCompareWithOptions_FxnInst)
	: (CFStringCompareWithOptions_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringCompareWithOptions", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFStringCompareWithOptions(final com.apple.jobjc.corefoundation.CFStringRefCFType theString1, final com.apple.jobjc.corefoundation.CFStringRefCFType theString2, final com.apple.jobjc.corefoundation.CFRange rangeToCompare, final long compareOptions){
			final com.apple.jobjc.Invoke.FunCall CFStringCompareWithOptions_FxnInst = get_CFStringCompareWithOptions_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringCompareWithOptions_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString1);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString2);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, rangeToCompare);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, compareOptions);
		CFStringCompareWithOptions_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringCompareWithOptionsAndLocale_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringCompareWithOptionsAndLocale_FxnInst(){
		return ((CFStringCompareWithOptionsAndLocale_FxnInst != null)
	? (CFStringCompareWithOptionsAndLocale_FxnInst)
	: (CFStringCompareWithOptionsAndLocale_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringCompareWithOptionsAndLocale", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFStringCompareWithOptionsAndLocale(final com.apple.jobjc.corefoundation.CFStringRefCFType theString1, final com.apple.jobjc.corefoundation.CFStringRefCFType theString2, final com.apple.jobjc.corefoundation.CFRange rangeToCompare, final long compareOptions, final com.apple.jobjc.corefoundation.CFLocaleRefCFType locale){
			final com.apple.jobjc.Invoke.FunCall CFStringCompareWithOptionsAndLocale_FxnInst = get_CFStringCompareWithOptionsAndLocale_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringCompareWithOptionsAndLocale_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString1);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString2);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, rangeToCompare);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, compareOptions);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, locale);
		CFStringCompareWithOptionsAndLocale_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringConvertEncodingToIANACharSetName_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringConvertEncodingToIANACharSetName_FxnInst(){
		return ((CFStringConvertEncodingToIANACharSetName_FxnInst != null)
	? (CFStringConvertEncodingToIANACharSetName_FxnInst)
	: (CFStringConvertEncodingToIANACharSetName_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringConvertEncodingToIANACharSetName", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFStringConvertEncodingToIANACharSetName(final int encoding){
			final com.apple.jobjc.Invoke.FunCall CFStringConvertEncodingToIANACharSetName_FxnInst = get_CFStringConvertEncodingToIANACharSetName_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringConvertEncodingToIANACharSetName_FxnInst.init(nativeBuffer);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, encoding);
		CFStringConvertEncodingToIANACharSetName_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringConvertEncodingToNSStringEncoding_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringConvertEncodingToNSStringEncoding_FxnInst(){
		return ((CFStringConvertEncodingToNSStringEncoding_FxnInst != null)
	? (CFStringConvertEncodingToNSStringEncoding_FxnInst)
	: (CFStringConvertEncodingToNSStringEncoding_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringConvertEncodingToNSStringEncoding", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder)));
	}

	 public long CFStringConvertEncodingToNSStringEncoding(final int encoding){
			final com.apple.jobjc.Invoke.FunCall CFStringConvertEncodingToNSStringEncoding_FxnInst = get_CFStringConvertEncodingToNSStringEncoding_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringConvertEncodingToNSStringEncoding_FxnInst.init(nativeBuffer);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, encoding);
		CFStringConvertEncodingToNSStringEncoding_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringConvertEncodingToWindowsCodepage_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringConvertEncodingToWindowsCodepage_FxnInst(){
		return ((CFStringConvertEncodingToWindowsCodepage_FxnInst != null)
	? (CFStringConvertEncodingToWindowsCodepage_FxnInst)
	: (CFStringConvertEncodingToWindowsCodepage_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringConvertEncodingToWindowsCodepage", com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder)));
	}

	 public int CFStringConvertEncodingToWindowsCodepage(final int encoding){
			final com.apple.jobjc.Invoke.FunCall CFStringConvertEncodingToWindowsCodepage_FxnInst = get_CFStringConvertEncodingToWindowsCodepage_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringConvertEncodingToWindowsCodepage_FxnInst.init(nativeBuffer);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, encoding);
		CFStringConvertEncodingToWindowsCodepage_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringConvertIANACharSetNameToEncoding_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringConvertIANACharSetNameToEncoding_FxnInst(){
		return ((CFStringConvertIANACharSetNameToEncoding_FxnInst != null)
	? (CFStringConvertIANACharSetNameToEncoding_FxnInst)
	: (CFStringConvertIANACharSetNameToEncoding_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringConvertIANACharSetNameToEncoding", com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public int CFStringConvertIANACharSetNameToEncoding(final com.apple.jobjc.corefoundation.CFStringRefCFType theString){
			final com.apple.jobjc.Invoke.FunCall CFStringConvertIANACharSetNameToEncoding_FxnInst = get_CFStringConvertIANACharSetNameToEncoding_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringConvertIANACharSetNameToEncoding_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		CFStringConvertIANACharSetNameToEncoding_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringConvertNSStringEncodingToEncoding_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringConvertNSStringEncodingToEncoding_FxnInst(){
		return ((CFStringConvertNSStringEncodingToEncoding_FxnInst != null)
	? (CFStringConvertNSStringEncodingToEncoding_FxnInst)
	: (CFStringConvertNSStringEncodingToEncoding_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringConvertNSStringEncodingToEncoding", com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public int CFStringConvertNSStringEncodingToEncoding(final long encoding){
			final com.apple.jobjc.Invoke.FunCall CFStringConvertNSStringEncodingToEncoding_FxnInst = get_CFStringConvertNSStringEncodingToEncoding_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringConvertNSStringEncodingToEncoding_FxnInst.init(nativeBuffer);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, encoding);
		CFStringConvertNSStringEncodingToEncoding_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringConvertWindowsCodepageToEncoding_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringConvertWindowsCodepageToEncoding_FxnInst(){
		return ((CFStringConvertWindowsCodepageToEncoding_FxnInst != null)
	? (CFStringConvertWindowsCodepageToEncoding_FxnInst)
	: (CFStringConvertWindowsCodepageToEncoding_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringConvertWindowsCodepageToEncoding", com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder)));
	}

	 public int CFStringConvertWindowsCodepageToEncoding(final int codepage){
			final com.apple.jobjc.Invoke.FunCall CFStringConvertWindowsCodepageToEncoding_FxnInst = get_CFStringConvertWindowsCodepageToEncoding_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringConvertWindowsCodepageToEncoding_FxnInst.init(nativeBuffer);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, codepage);
		CFStringConvertWindowsCodepageToEncoding_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringCreateArrayBySeparatingStrings_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringCreateArrayBySeparatingStrings_FxnInst(){
		return ((CFStringCreateArrayBySeparatingStrings_FxnInst != null)
	? (CFStringCreateArrayBySeparatingStrings_FxnInst)
	: (CFStringCreateArrayBySeparatingStrings_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringCreateArrayBySeparatingStrings", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFArrayRefCFType CFStringCreateArrayBySeparatingStrings(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFStringRefCFType theString, final com.apple.jobjc.corefoundation.CFStringRefCFType separatorString){
			final com.apple.jobjc.Invoke.FunCall CFStringCreateArrayBySeparatingStrings_FxnInst = get_CFStringCreateArrayBySeparatingStrings_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringCreateArrayBySeparatingStrings_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, separatorString);
		CFStringCreateArrayBySeparatingStrings_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFArrayRefCFType) new com.apple.jobjc.corefoundation.CFArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringCreateArrayWithFindResults_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringCreateArrayWithFindResults_FxnInst(){
		return ((CFStringCreateArrayWithFindResults_FxnInst != null)
	? (CFStringCreateArrayWithFindResults_FxnInst)
	: (CFStringCreateArrayWithFindResults_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringCreateArrayWithFindResults", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFArrayRefCFType CFStringCreateArrayWithFindResults(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFStringRefCFType theString, final com.apple.jobjc.corefoundation.CFStringRefCFType stringToFind, final com.apple.jobjc.corefoundation.CFRange rangeToSearch, final long compareOptions){
			final com.apple.jobjc.Invoke.FunCall CFStringCreateArrayWithFindResults_FxnInst = get_CFStringCreateArrayWithFindResults_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringCreateArrayWithFindResults_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stringToFind);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, rangeToSearch);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, compareOptions);
		CFStringCreateArrayWithFindResults_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFArrayRefCFType) new com.apple.jobjc.corefoundation.CFArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringCreateByCombiningStrings_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringCreateByCombiningStrings_FxnInst(){
		return ((CFStringCreateByCombiningStrings_FxnInst != null)
	? (CFStringCreateByCombiningStrings_FxnInst)
	: (CFStringCreateByCombiningStrings_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringCreateByCombiningStrings", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFStringCreateByCombiningStrings(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFArrayRefCFType theArray, final com.apple.jobjc.corefoundation.CFStringRefCFType separatorString){
			final com.apple.jobjc.Invoke.FunCall CFStringCreateByCombiningStrings_FxnInst = get_CFStringCreateByCombiningStrings_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringCreateByCombiningStrings_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theArray);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, separatorString);
		CFStringCreateByCombiningStrings_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringCreateCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringCreateCopy_FxnInst(){
		return ((CFStringCreateCopy_FxnInst != null)
	? (CFStringCreateCopy_FxnInst)
	: (CFStringCreateCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringCreateCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFStringCreateCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFStringRefCFType theString){
			final com.apple.jobjc.Invoke.FunCall CFStringCreateCopy_FxnInst = get_CFStringCreateCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringCreateCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		CFStringCreateCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringCreateExternalRepresentation_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringCreateExternalRepresentation_FxnInst(){
		return ((CFStringCreateExternalRepresentation_FxnInst != null)
	? (CFStringCreateExternalRepresentation_FxnInst)
	: (CFStringCreateExternalRepresentation_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringCreateExternalRepresentation", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDataRefCFType CFStringCreateExternalRepresentation(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFStringRefCFType theString, final int encoding, final byte lossByte){
			final com.apple.jobjc.Invoke.FunCall CFStringCreateExternalRepresentation_FxnInst = get_CFStringCreateExternalRepresentation_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringCreateExternalRepresentation_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, encoding);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, lossByte);
		CFStringCreateExternalRepresentation_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDataRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDataRefCFType) new com.apple.jobjc.corefoundation.CFDataRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringCreateFromExternalRepresentation_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringCreateFromExternalRepresentation_FxnInst(){
		return ((CFStringCreateFromExternalRepresentation_FxnInst != null)
	? (CFStringCreateFromExternalRepresentation_FxnInst)
	: (CFStringCreateFromExternalRepresentation_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringCreateFromExternalRepresentation", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFStringCreateFromExternalRepresentation(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFDataRefCFType data, final int encoding){
			final com.apple.jobjc.Invoke.FunCall CFStringCreateFromExternalRepresentation_FxnInst = get_CFStringCreateFromExternalRepresentation_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringCreateFromExternalRepresentation_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, data);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, encoding);
		CFStringCreateFromExternalRepresentation_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringCreateMutable_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringCreateMutable_FxnInst(){
		return ((CFStringCreateMutable_FxnInst != null)
	? (CFStringCreateMutable_FxnInst)
	: (CFStringCreateMutable_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringCreateMutable", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFMutableStringRefCFType CFStringCreateMutable(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final long maxLength){
			final com.apple.jobjc.Invoke.FunCall CFStringCreateMutable_FxnInst = get_CFStringCreateMutable_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringCreateMutable_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, maxLength);
		CFStringCreateMutable_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFMutableStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFMutableStringRefCFType) new com.apple.jobjc.corefoundation.CFMutableStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringCreateMutableCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringCreateMutableCopy_FxnInst(){
		return ((CFStringCreateMutableCopy_FxnInst != null)
	? (CFStringCreateMutableCopy_FxnInst)
	: (CFStringCreateMutableCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringCreateMutableCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFMutableStringRefCFType CFStringCreateMutableCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final long maxLength, final com.apple.jobjc.corefoundation.CFStringRefCFType theString){
			final com.apple.jobjc.Invoke.FunCall CFStringCreateMutableCopy_FxnInst = get_CFStringCreateMutableCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringCreateMutableCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, maxLength);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		CFStringCreateMutableCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFMutableStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFMutableStringRefCFType) new com.apple.jobjc.corefoundation.CFMutableStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringCreateMutableWithExternalCharactersNoCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringCreateMutableWithExternalCharactersNoCopy_FxnInst(){
		return ((CFStringCreateMutableWithExternalCharactersNoCopy_FxnInst != null)
	? (CFStringCreateMutableWithExternalCharactersNoCopy_FxnInst)
	: (CFStringCreateMutableWithExternalCharactersNoCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringCreateMutableWithExternalCharactersNoCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFMutableStringRefCFType CFStringCreateMutableWithExternalCharactersNoCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.Pointer<java.lang.Short> chars, final long numChars, final long capacity, final com.apple.jobjc.corefoundation.CFAllocatorRefCFType externalCharactersAllocator){
			final com.apple.jobjc.Invoke.FunCall CFStringCreateMutableWithExternalCharactersNoCopy_FxnInst = get_CFStringCreateMutableWithExternalCharactersNoCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringCreateMutableWithExternalCharactersNoCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, chars);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, numChars);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, capacity);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, externalCharactersAllocator);
		CFStringCreateMutableWithExternalCharactersNoCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFMutableStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFMutableStringRefCFType) new com.apple.jobjc.corefoundation.CFMutableStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringCreateWithBytes_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringCreateWithBytes_FxnInst(){
		return ((CFStringCreateWithBytes_FxnInst != null)
	? (CFStringCreateWithBytes_FxnInst)
	: (CFStringCreateWithBytes_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringCreateWithBytes", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder, com.apple.jobjc.PrimitiveCoder.BoolCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFStringCreateWithBytes(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.Pointer<java.lang.Byte> bytes, final long numBytes, final int encoding, final boolean isExternalRepresentation){
			final com.apple.jobjc.Invoke.FunCall CFStringCreateWithBytes_FxnInst = get_CFStringCreateWithBytes_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringCreateWithBytes_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bytes);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, numBytes);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, encoding);
		com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.push(nativeBuffer, isExternalRepresentation);
		CFStringCreateWithBytes_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringCreateWithBytesNoCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringCreateWithBytesNoCopy_FxnInst(){
		return ((CFStringCreateWithBytesNoCopy_FxnInst != null)
	? (CFStringCreateWithBytesNoCopy_FxnInst)
	: (CFStringCreateWithBytesNoCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringCreateWithBytesNoCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder, com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFStringCreateWithBytesNoCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.Pointer<java.lang.Byte> bytes, final long numBytes, final int encoding, final boolean isExternalRepresentation, final com.apple.jobjc.corefoundation.CFAllocatorRefCFType contentsDeallocator){
			final com.apple.jobjc.Invoke.FunCall CFStringCreateWithBytesNoCopy_FxnInst = get_CFStringCreateWithBytesNoCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringCreateWithBytesNoCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bytes);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, numBytes);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, encoding);
		com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.push(nativeBuffer, isExternalRepresentation);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, contentsDeallocator);
		CFStringCreateWithBytesNoCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringCreateWithCString_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringCreateWithCString_FxnInst(){
		return ((CFStringCreateWithCString_FxnInst != null)
	? (CFStringCreateWithCString_FxnInst)
	: (CFStringCreateWithCString_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringCreateWithCString", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFStringCreateWithCString(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.Pointer<java.lang.Byte> cStr, final int encoding){
			final com.apple.jobjc.Invoke.FunCall CFStringCreateWithCString_FxnInst = get_CFStringCreateWithCString_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringCreateWithCString_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, cStr);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, encoding);
		CFStringCreateWithCString_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringCreateWithCStringNoCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringCreateWithCStringNoCopy_FxnInst(){
		return ((CFStringCreateWithCStringNoCopy_FxnInst != null)
	? (CFStringCreateWithCStringNoCopy_FxnInst)
	: (CFStringCreateWithCStringNoCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringCreateWithCStringNoCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFStringCreateWithCStringNoCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.Pointer<java.lang.Byte> cStr, final int encoding, final com.apple.jobjc.corefoundation.CFAllocatorRefCFType contentsDeallocator){
			final com.apple.jobjc.Invoke.FunCall CFStringCreateWithCStringNoCopy_FxnInst = get_CFStringCreateWithCStringNoCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringCreateWithCStringNoCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, cStr);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, encoding);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, contentsDeallocator);
		CFStringCreateWithCStringNoCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringCreateWithCharacters_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringCreateWithCharacters_FxnInst(){
		return ((CFStringCreateWithCharacters_FxnInst != null)
	? (CFStringCreateWithCharacters_FxnInst)
	: (CFStringCreateWithCharacters_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringCreateWithCharacters", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFStringCreateWithCharacters(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.Pointer<java.lang.Short> chars, final long numChars){
			final com.apple.jobjc.Invoke.FunCall CFStringCreateWithCharacters_FxnInst = get_CFStringCreateWithCharacters_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringCreateWithCharacters_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, chars);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, numChars);
		CFStringCreateWithCharacters_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringCreateWithCharactersNoCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringCreateWithCharactersNoCopy_FxnInst(){
		return ((CFStringCreateWithCharactersNoCopy_FxnInst != null)
	? (CFStringCreateWithCharactersNoCopy_FxnInst)
	: (CFStringCreateWithCharactersNoCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringCreateWithCharactersNoCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFStringCreateWithCharactersNoCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.Pointer<java.lang.Short> chars, final long numChars, final com.apple.jobjc.corefoundation.CFAllocatorRefCFType contentsDeallocator){
			final com.apple.jobjc.Invoke.FunCall CFStringCreateWithCharactersNoCopy_FxnInst = get_CFStringCreateWithCharactersNoCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringCreateWithCharactersNoCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, chars);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, numChars);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, contentsDeallocator);
		CFStringCreateWithCharactersNoCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringCreateWithFileSystemRepresentation_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringCreateWithFileSystemRepresentation_FxnInst(){
		return ((CFStringCreateWithFileSystemRepresentation_FxnInst != null)
	? (CFStringCreateWithFileSystemRepresentation_FxnInst)
	: (CFStringCreateWithFileSystemRepresentation_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringCreateWithFileSystemRepresentation", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFStringCreateWithFileSystemRepresentation(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.Pointer<java.lang.Byte> buffer){
			final com.apple.jobjc.Invoke.FunCall CFStringCreateWithFileSystemRepresentation_FxnInst = get_CFStringCreateWithFileSystemRepresentation_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringCreateWithFileSystemRepresentation_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, buffer);
		CFStringCreateWithFileSystemRepresentation_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFStringCreateWithFormat(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFDictionaryRefCFType formatOptions, final com.apple.jobjc.corefoundation.CFStringRefCFType format, final Object... varargs){
		com.apple.jobjc.Coder[] argCoders = new com.apple.jobjc.Coder[3 + varargs.length];
argCoders[0] = com.apple.jobjc.Coder.PointerCoder.INST;
argCoders[1] = com.apple.jobjc.Coder.PointerCoder.INST;
argCoders[2] = com.apple.jobjc.Coder.PointerCoder.INST;
for(int i = 3; i < (3 + varargs.length); i++)
	argCoders[i] = com.apple.jobjc.Coder.getCoderAtRuntime(varargs[i - 3]);
final com.apple.jobjc.Invoke.FunCall CFStringCreateWithFormat_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringCreateWithFormat", com.apple.jobjc.Coder.PointerCoder.INST, argCoders);
		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringCreateWithFormat_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, formatOptions);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, format);
		for(int i = 3; i < (3 + varargs.length); i++)
			argCoders[i].push(nativeBuffer, varargs[i - 3]);
		CFStringCreateWithFormat_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringCreateWithFormatAndArguments_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringCreateWithFormatAndArguments_FxnInst(){
		return ((CFStringCreateWithFormatAndArguments_FxnInst != null)
	? (CFStringCreateWithFormatAndArguments_FxnInst)
	: (CFStringCreateWithFormatAndArguments_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringCreateWithFormatAndArguments", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFStringCreateWithFormatAndArguments(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFDictionaryRefCFType formatOptions, final com.apple.jobjc.corefoundation.CFStringRefCFType format, final Object /* va_list (*, ^{__va_list_tag=II^v^v}) */ arguments){
			final com.apple.jobjc.Invoke.FunCall CFStringCreateWithFormatAndArguments_FxnInst = get_CFStringCreateWithFormatAndArguments_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringCreateWithFormatAndArguments_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, formatOptions);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, format);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, arguments);
		CFStringCreateWithFormatAndArguments_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringCreateWithPascalString_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringCreateWithPascalString_FxnInst(){
		return ((CFStringCreateWithPascalString_FxnInst != null)
	? (CFStringCreateWithPascalString_FxnInst)
	: (CFStringCreateWithPascalString_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringCreateWithPascalString", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFStringCreateWithPascalString(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final Object /* ConstStr255Param (*, *) */ pStr, final int encoding){
			final com.apple.jobjc.Invoke.FunCall CFStringCreateWithPascalString_FxnInst = get_CFStringCreateWithPascalString_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringCreateWithPascalString_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, pStr);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, encoding);
		CFStringCreateWithPascalString_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringCreateWithPascalStringNoCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringCreateWithPascalStringNoCopy_FxnInst(){
		return ((CFStringCreateWithPascalStringNoCopy_FxnInst != null)
	? (CFStringCreateWithPascalStringNoCopy_FxnInst)
	: (CFStringCreateWithPascalStringNoCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringCreateWithPascalStringNoCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFStringCreateWithPascalStringNoCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final Object /* ConstStr255Param (*, *) */ pStr, final int encoding, final com.apple.jobjc.corefoundation.CFAllocatorRefCFType contentsDeallocator){
			final com.apple.jobjc.Invoke.FunCall CFStringCreateWithPascalStringNoCopy_FxnInst = get_CFStringCreateWithPascalStringNoCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringCreateWithPascalStringNoCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, pStr);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, encoding);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, contentsDeallocator);
		CFStringCreateWithPascalStringNoCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringCreateWithSubstring_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringCreateWithSubstring_FxnInst(){
		return ((CFStringCreateWithSubstring_FxnInst != null)
	? (CFStringCreateWithSubstring_FxnInst)
	: (CFStringCreateWithSubstring_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringCreateWithSubstring", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder())));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFStringCreateWithSubstring(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFStringRefCFType str, final com.apple.jobjc.corefoundation.CFRange range){
			final com.apple.jobjc.Invoke.FunCall CFStringCreateWithSubstring_FxnInst = get_CFStringCreateWithSubstring_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringCreateWithSubstring_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, str);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		CFStringCreateWithSubstring_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringDelete_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringDelete_FxnInst(){
		return ((CFStringDelete_FxnInst != null)
	? (CFStringDelete_FxnInst)
	: (CFStringDelete_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringDelete", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder())));
	}

	 public void CFStringDelete(final com.apple.jobjc.corefoundation.CFMutableStringRefCFType theString, final com.apple.jobjc.corefoundation.CFRange range){
			final com.apple.jobjc.Invoke.FunCall CFStringDelete_FxnInst = get_CFStringDelete_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringDelete_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		CFStringDelete_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringFind_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringFind_FxnInst(){
		return ((CFStringFind_FxnInst != null)
	? (CFStringFind_FxnInst)
	: (CFStringFind_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringFind", com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFRange CFStringFind(final com.apple.jobjc.corefoundation.CFStringRefCFType theString, final com.apple.jobjc.corefoundation.CFStringRefCFType stringToFind, final long compareOptions){
			final com.apple.jobjc.Invoke.FunCall CFStringFind_FxnInst = get_CFStringFind_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringFind_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stringToFind);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, compareOptions);
				com.apple.jobjc.corefoundation.CFRange returnValue = com.apple.jobjc.JObjC.getInstance(getRuntime()).CoreFoundation().makeCFRange();
		CFStringFind_FxnInst.invoke(nativeBuffer, returnValue);
		
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringFindAndReplace_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringFindAndReplace_FxnInst(){
		return ((CFStringFindAndReplace_FxnInst != null)
	? (CFStringFindAndReplace_FxnInst)
	: (CFStringFindAndReplace_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringFindAndReplace", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFStringFindAndReplace(final com.apple.jobjc.corefoundation.CFMutableStringRefCFType theString, final com.apple.jobjc.corefoundation.CFStringRefCFType stringToFind, final com.apple.jobjc.corefoundation.CFStringRefCFType replacementString, final com.apple.jobjc.corefoundation.CFRange rangeToSearch, final long compareOptions){
			final com.apple.jobjc.Invoke.FunCall CFStringFindAndReplace_FxnInst = get_CFStringFindAndReplace_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringFindAndReplace_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stringToFind);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, replacementString);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, rangeToSearch);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, compareOptions);
		CFStringFindAndReplace_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringFindCharacterFromSet_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringFindCharacterFromSet_FxnInst(){
		return ((CFStringFindCharacterFromSet_FxnInst != null)
	? (CFStringFindCharacterFromSet_FxnInst)
	: (CFStringFindCharacterFromSet_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringFindCharacterFromSet", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFStringFindCharacterFromSet(final com.apple.jobjc.corefoundation.CFStringRefCFType theString, final com.apple.jobjc.corefoundation.CFCharacterSetRefCFType theSet, final com.apple.jobjc.corefoundation.CFRange rangeToSearch, final long searchOptions, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFRange> result){
			final com.apple.jobjc.Invoke.FunCall CFStringFindCharacterFromSet_FxnInst = get_CFStringFindCharacterFromSet_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringFindCharacterFromSet_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theSet);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, rangeToSearch);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, searchOptions);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, result);
		CFStringFindCharacterFromSet_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringFindWithOptions_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringFindWithOptions_FxnInst(){
		return ((CFStringFindWithOptions_FxnInst != null)
	? (CFStringFindWithOptions_FxnInst)
	: (CFStringFindWithOptions_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringFindWithOptions", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFStringFindWithOptions(final com.apple.jobjc.corefoundation.CFStringRefCFType theString, final com.apple.jobjc.corefoundation.CFStringRefCFType stringToFind, final com.apple.jobjc.corefoundation.CFRange rangeToSearch, final long searchOptions, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFRange> result){
			final com.apple.jobjc.Invoke.FunCall CFStringFindWithOptions_FxnInst = get_CFStringFindWithOptions_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringFindWithOptions_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stringToFind);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, rangeToSearch);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, searchOptions);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, result);
		CFStringFindWithOptions_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringFindWithOptionsAndLocale_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringFindWithOptionsAndLocale_FxnInst(){
		return ((CFStringFindWithOptionsAndLocale_FxnInst != null)
	? (CFStringFindWithOptionsAndLocale_FxnInst)
	: (CFStringFindWithOptionsAndLocale_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringFindWithOptionsAndLocale", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFStringFindWithOptionsAndLocale(final com.apple.jobjc.corefoundation.CFStringRefCFType theString, final com.apple.jobjc.corefoundation.CFStringRefCFType stringToFind, final com.apple.jobjc.corefoundation.CFRange rangeToSearch, final long searchOptions, final com.apple.jobjc.corefoundation.CFLocaleRefCFType locale, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFRange> result){
			final com.apple.jobjc.Invoke.FunCall CFStringFindWithOptionsAndLocale_FxnInst = get_CFStringFindWithOptionsAndLocale_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringFindWithOptionsAndLocale_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stringToFind);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, rangeToSearch);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, searchOptions);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, locale);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, result);
		CFStringFindWithOptionsAndLocale_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringFold_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringFold_FxnInst(){
		return ((CFStringFold_FxnInst != null)
	? (CFStringFold_FxnInst)
	: (CFStringFold_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringFold", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFStringFold(final com.apple.jobjc.corefoundation.CFMutableStringRefCFType theString, final long theFlags, final com.apple.jobjc.corefoundation.CFLocaleRefCFType theLocale){
			final com.apple.jobjc.Invoke.FunCall CFStringFold_FxnInst = get_CFStringFold_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringFold_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, theFlags);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theLocale);
		CFStringFold_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringGetBytes_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringGetBytes_FxnInst(){
		return ((CFStringGetBytes_FxnInst != null)
	? (CFStringGetBytes_FxnInst)
	: (CFStringGetBytes_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringGetBytes", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFStringGetBytes(final com.apple.jobjc.corefoundation.CFStringRefCFType theString, final com.apple.jobjc.corefoundation.CFRange range, final int encoding, final byte lossByte, final boolean isExternalRepresentation, final com.apple.jobjc.Pointer<java.lang.Byte> buffer, final long maxBufLen, final com.apple.jobjc.Pointer<java.lang.Long> usedBufLen){
			final com.apple.jobjc.Invoke.FunCall CFStringGetBytes_FxnInst = get_CFStringGetBytes_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringGetBytes_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, encoding);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, lossByte);
		com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.push(nativeBuffer, isExternalRepresentation);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, buffer);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, maxBufLen);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, usedBufLen);
		CFStringGetBytes_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringGetCString_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringGetCString_FxnInst(){
		return ((CFStringGetCString_FxnInst != null)
	? (CFStringGetCString_FxnInst)
	: (CFStringGetCString_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringGetCString", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder)));
	}

	 public boolean CFStringGetCString(final com.apple.jobjc.corefoundation.CFStringRefCFType theString, final com.apple.jobjc.Pointer<java.lang.Byte> buffer, final long bufferSize, final int encoding){
			final com.apple.jobjc.Invoke.FunCall CFStringGetCString_FxnInst = get_CFStringGetCString_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringGetCString_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, buffer);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, bufferSize);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, encoding);
		CFStringGetCString_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringGetCStringPtr_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringGetCStringPtr_FxnInst(){
		return ((CFStringGetCStringPtr_FxnInst != null)
	? (CFStringGetCStringPtr_FxnInst)
	: (CFStringGetCStringPtr_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringGetCStringPtr", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder)));
	}

	 public com.apple.jobjc.Pointer<java.lang.Byte> CFStringGetCStringPtr(final com.apple.jobjc.corefoundation.CFStringRefCFType theString, final int encoding){
			final com.apple.jobjc.Invoke.FunCall CFStringGetCStringPtr_FxnInst = get_CFStringGetCStringPtr_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringGetCStringPtr_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, encoding);
		CFStringGetCStringPtr_FxnInst.invoke(nativeBuffer);
		final com.apple.jobjc.Pointer<java.lang.Byte> returnValue = (com.apple.jobjc.Pointer<java.lang.Byte>) (com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringGetCharacterAtIndex_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringGetCharacterAtIndex_FxnInst(){
		return ((CFStringGetCharacterAtIndex_FxnInst != null)
	? (CFStringGetCharacterAtIndex_FxnInst)
	: (CFStringGetCharacterAtIndex_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringGetCharacterAtIndex", com.apple.jobjc.PrimitiveCoder.UShortCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public short CFStringGetCharacterAtIndex(final com.apple.jobjc.corefoundation.CFStringRefCFType theString, final long idx){
			final com.apple.jobjc.Invoke.FunCall CFStringGetCharacterAtIndex_FxnInst = get_CFStringGetCharacterAtIndex_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringGetCharacterAtIndex_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, idx);
		CFStringGetCharacterAtIndex_FxnInst.invoke(nativeBuffer);
		final short returnValue = (short) (com.apple.jobjc.PrimitiveCoder.UShortCoder.INST.popShort(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringGetCharacterFromInlineBuffer_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringGetCharacterFromInlineBuffer_FxnInst(){
		return ((CFStringGetCharacterFromInlineBuffer_FxnInst != null)
	? (CFStringGetCharacterFromInlineBuffer_FxnInst)
	: (CFStringGetCharacterFromInlineBuffer_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringGetCharacterFromInlineBuffer", com.apple.jobjc.PrimitiveCoder.UShortCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public short CFStringGetCharacterFromInlineBuffer(final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFStringInlineBuffer> buf, final long idx){
			final com.apple.jobjc.Invoke.FunCall CFStringGetCharacterFromInlineBuffer_FxnInst = get_CFStringGetCharacterFromInlineBuffer_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringGetCharacterFromInlineBuffer_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, buf);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, idx);
		CFStringGetCharacterFromInlineBuffer_FxnInst.invoke(nativeBuffer);
		final short returnValue = (short) (com.apple.jobjc.PrimitiveCoder.UShortCoder.INST.popShort(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringGetCharacters_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringGetCharacters_FxnInst(){
		return ((CFStringGetCharacters_FxnInst != null)
	? (CFStringGetCharacters_FxnInst)
	: (CFStringGetCharacters_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringGetCharacters", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFStringGetCharacters(final com.apple.jobjc.corefoundation.CFStringRefCFType theString, final com.apple.jobjc.corefoundation.CFRange range, final com.apple.jobjc.Pointer<java.lang.Short> buffer){
			final com.apple.jobjc.Invoke.FunCall CFStringGetCharacters_FxnInst = get_CFStringGetCharacters_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringGetCharacters_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, buffer);
		CFStringGetCharacters_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringGetCharactersPtr_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringGetCharactersPtr_FxnInst(){
		return ((CFStringGetCharactersPtr_FxnInst != null)
	? (CFStringGetCharactersPtr_FxnInst)
	: (CFStringGetCharactersPtr_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringGetCharactersPtr", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.Pointer<java.lang.Short> CFStringGetCharactersPtr(final com.apple.jobjc.corefoundation.CFStringRefCFType theString){
			final com.apple.jobjc.Invoke.FunCall CFStringGetCharactersPtr_FxnInst = get_CFStringGetCharactersPtr_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringGetCharactersPtr_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		CFStringGetCharactersPtr_FxnInst.invoke(nativeBuffer);
		final com.apple.jobjc.Pointer<java.lang.Short> returnValue = (com.apple.jobjc.Pointer<java.lang.Short>) (com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringGetDoubleValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringGetDoubleValue_FxnInst(){
		return ((CFStringGetDoubleValue_FxnInst != null)
	? (CFStringGetDoubleValue_FxnInst)
	: (CFStringGetDoubleValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringGetDoubleValue", com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public double CFStringGetDoubleValue(final com.apple.jobjc.corefoundation.CFStringRefCFType str){
			final com.apple.jobjc.Invoke.FunCall CFStringGetDoubleValue_FxnInst = get_CFStringGetDoubleValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringGetDoubleValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, str);
		CFStringGetDoubleValue_FxnInst.invoke(nativeBuffer);
		final double returnValue = (double) (com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.popDouble(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringGetFastestEncoding_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringGetFastestEncoding_FxnInst(){
		return ((CFStringGetFastestEncoding_FxnInst != null)
	? (CFStringGetFastestEncoding_FxnInst)
	: (CFStringGetFastestEncoding_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringGetFastestEncoding", com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public int CFStringGetFastestEncoding(final com.apple.jobjc.corefoundation.CFStringRefCFType theString){
			final com.apple.jobjc.Invoke.FunCall CFStringGetFastestEncoding_FxnInst = get_CFStringGetFastestEncoding_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringGetFastestEncoding_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		CFStringGetFastestEncoding_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringGetFileSystemRepresentation_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringGetFileSystemRepresentation_FxnInst(){
		return ((CFStringGetFileSystemRepresentation_FxnInst != null)
	? (CFStringGetFileSystemRepresentation_FxnInst)
	: (CFStringGetFileSystemRepresentation_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringGetFileSystemRepresentation", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public boolean CFStringGetFileSystemRepresentation(final com.apple.jobjc.corefoundation.CFStringRefCFType string, final com.apple.jobjc.Pointer<java.lang.Byte> buffer, final long maxBufLen){
			final com.apple.jobjc.Invoke.FunCall CFStringGetFileSystemRepresentation_FxnInst = get_CFStringGetFileSystemRepresentation_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringGetFileSystemRepresentation_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, string);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, buffer);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, maxBufLen);
		CFStringGetFileSystemRepresentation_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringGetHyphenationLocationBeforeIndex_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringGetHyphenationLocationBeforeIndex_FxnInst(){
		return ((CFStringGetHyphenationLocationBeforeIndex_FxnInst != null)
	? (CFStringGetHyphenationLocationBeforeIndex_FxnInst)
	: (CFStringGetHyphenationLocationBeforeIndex_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringGetHyphenationLocationBeforeIndex", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFStringGetHyphenationLocationBeforeIndex(final com.apple.jobjc.corefoundation.CFStringRefCFType string, final long location, final com.apple.jobjc.corefoundation.CFRange limitRange, final long options, final com.apple.jobjc.corefoundation.CFLocaleRefCFType locale, final com.apple.jobjc.Pointer<java.lang.Integer> character){
			final com.apple.jobjc.Invoke.FunCall CFStringGetHyphenationLocationBeforeIndex_FxnInst = get_CFStringGetHyphenationLocationBeforeIndex_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringGetHyphenationLocationBeforeIndex_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, string);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, location);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, limitRange);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, options);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, locale);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, character);
		CFStringGetHyphenationLocationBeforeIndex_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringGetIntValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringGetIntValue_FxnInst(){
		return ((CFStringGetIntValue_FxnInst != null)
	? (CFStringGetIntValue_FxnInst)
	: (CFStringGetIntValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringGetIntValue", com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public int CFStringGetIntValue(final com.apple.jobjc.corefoundation.CFStringRefCFType str){
			final com.apple.jobjc.Invoke.FunCall CFStringGetIntValue_FxnInst = get_CFStringGetIntValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringGetIntValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, str);
		CFStringGetIntValue_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringGetLength_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringGetLength_FxnInst(){
		return ((CFStringGetLength_FxnInst != null)
	? (CFStringGetLength_FxnInst)
	: (CFStringGetLength_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringGetLength", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFStringGetLength(final com.apple.jobjc.corefoundation.CFStringRefCFType theString){
			final com.apple.jobjc.Invoke.FunCall CFStringGetLength_FxnInst = get_CFStringGetLength_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringGetLength_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		CFStringGetLength_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringGetLineBounds_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringGetLineBounds_FxnInst(){
		return ((CFStringGetLineBounds_FxnInst != null)
	? (CFStringGetLineBounds_FxnInst)
	: (CFStringGetLineBounds_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringGetLineBounds", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFStringGetLineBounds(final com.apple.jobjc.corefoundation.CFStringRefCFType theString, final com.apple.jobjc.corefoundation.CFRange range, final com.apple.jobjc.Pointer<java.lang.Long> lineBeginIndex, final com.apple.jobjc.Pointer<java.lang.Long> lineEndIndex, final com.apple.jobjc.Pointer<java.lang.Long> contentsEndIndex){
			final com.apple.jobjc.Invoke.FunCall CFStringGetLineBounds_FxnInst = get_CFStringGetLineBounds_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringGetLineBounds_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, lineBeginIndex);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, lineEndIndex);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, contentsEndIndex);
		CFStringGetLineBounds_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringGetListOfAvailableEncodings_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringGetListOfAvailableEncodings_FxnInst(){
		return ((CFStringGetListOfAvailableEncodings_FxnInst != null)
	? (CFStringGetListOfAvailableEncodings_FxnInst)
	: (CFStringGetListOfAvailableEncodings_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringGetListOfAvailableEncodings", com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.Pointer<java.lang.Integer> CFStringGetListOfAvailableEncodings(){
			final com.apple.jobjc.Invoke.FunCall CFStringGetListOfAvailableEncodings_FxnInst = get_CFStringGetListOfAvailableEncodings_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringGetListOfAvailableEncodings_FxnInst.init(nativeBuffer);
		CFStringGetListOfAvailableEncodings_FxnInst.invoke(nativeBuffer);
		final com.apple.jobjc.Pointer<java.lang.Integer> returnValue = (com.apple.jobjc.Pointer<java.lang.Integer>) (com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringGetLongCharacterForSurrogatePair_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringGetLongCharacterForSurrogatePair_FxnInst(){
		return ((CFStringGetLongCharacterForSurrogatePair_FxnInst != null)
	? (CFStringGetLongCharacterForSurrogatePair_FxnInst)
	: (CFStringGetLongCharacterForSurrogatePair_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringGetLongCharacterForSurrogatePair", com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder, com.apple.jobjc.PrimitiveCoder.UShortCoder.INST, com.apple.jobjc.PrimitiveCoder.UShortCoder.INST)));
	}

	 public int CFStringGetLongCharacterForSurrogatePair(final short surrogateHigh, final short surrogateLow){
			final com.apple.jobjc.Invoke.FunCall CFStringGetLongCharacterForSurrogatePair_FxnInst = get_CFStringGetLongCharacterForSurrogatePair_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringGetLongCharacterForSurrogatePair_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.UShortCoder.INST.push(nativeBuffer, surrogateHigh);
		com.apple.jobjc.PrimitiveCoder.UShortCoder.INST.push(nativeBuffer, surrogateLow);
		CFStringGetLongCharacterForSurrogatePair_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringGetMaximumSizeForEncoding_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringGetMaximumSizeForEncoding_FxnInst(){
		return ((CFStringGetMaximumSizeForEncoding_FxnInst != null)
	? (CFStringGetMaximumSizeForEncoding_FxnInst)
	: (CFStringGetMaximumSizeForEncoding_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringGetMaximumSizeForEncoding", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder)));
	}

	 public long CFStringGetMaximumSizeForEncoding(final long length, final int encoding){
			final com.apple.jobjc.Invoke.FunCall CFStringGetMaximumSizeForEncoding_FxnInst = get_CFStringGetMaximumSizeForEncoding_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringGetMaximumSizeForEncoding_FxnInst.init(nativeBuffer);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, length);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, encoding);
		CFStringGetMaximumSizeForEncoding_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringGetMaximumSizeOfFileSystemRepresentation_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringGetMaximumSizeOfFileSystemRepresentation_FxnInst(){
		return ((CFStringGetMaximumSizeOfFileSystemRepresentation_FxnInst != null)
	? (CFStringGetMaximumSizeOfFileSystemRepresentation_FxnInst)
	: (CFStringGetMaximumSizeOfFileSystemRepresentation_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringGetMaximumSizeOfFileSystemRepresentation", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFStringGetMaximumSizeOfFileSystemRepresentation(final com.apple.jobjc.corefoundation.CFStringRefCFType string){
			final com.apple.jobjc.Invoke.FunCall CFStringGetMaximumSizeOfFileSystemRepresentation_FxnInst = get_CFStringGetMaximumSizeOfFileSystemRepresentation_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringGetMaximumSizeOfFileSystemRepresentation_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, string);
		CFStringGetMaximumSizeOfFileSystemRepresentation_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringGetMostCompatibleMacStringEncoding_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringGetMostCompatibleMacStringEncoding_FxnInst(){
		return ((CFStringGetMostCompatibleMacStringEncoding_FxnInst != null)
	? (CFStringGetMostCompatibleMacStringEncoding_FxnInst)
	: (CFStringGetMostCompatibleMacStringEncoding_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringGetMostCompatibleMacStringEncoding", com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder)));
	}

	 public int CFStringGetMostCompatibleMacStringEncoding(final int encoding){
			final com.apple.jobjc.Invoke.FunCall CFStringGetMostCompatibleMacStringEncoding_FxnInst = get_CFStringGetMostCompatibleMacStringEncoding_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringGetMostCompatibleMacStringEncoding_FxnInst.init(nativeBuffer);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, encoding);
		CFStringGetMostCompatibleMacStringEncoding_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringGetNameOfEncoding_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringGetNameOfEncoding_FxnInst(){
		return ((CFStringGetNameOfEncoding_FxnInst != null)
	? (CFStringGetNameOfEncoding_FxnInst)
	: (CFStringGetNameOfEncoding_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringGetNameOfEncoding", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFStringGetNameOfEncoding(final int encoding){
			final com.apple.jobjc.Invoke.FunCall CFStringGetNameOfEncoding_FxnInst = get_CFStringGetNameOfEncoding_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringGetNameOfEncoding_FxnInst.init(nativeBuffer);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, encoding);
		CFStringGetNameOfEncoding_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringGetParagraphBounds_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringGetParagraphBounds_FxnInst(){
		return ((CFStringGetParagraphBounds_FxnInst != null)
	? (CFStringGetParagraphBounds_FxnInst)
	: (CFStringGetParagraphBounds_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringGetParagraphBounds", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFStringGetParagraphBounds(final com.apple.jobjc.corefoundation.CFStringRefCFType string, final com.apple.jobjc.corefoundation.CFRange range, final com.apple.jobjc.Pointer<java.lang.Long> parBeginIndex, final com.apple.jobjc.Pointer<java.lang.Long> parEndIndex, final com.apple.jobjc.Pointer<java.lang.Long> contentsEndIndex){
			final com.apple.jobjc.Invoke.FunCall CFStringGetParagraphBounds_FxnInst = get_CFStringGetParagraphBounds_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringGetParagraphBounds_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, string);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, parBeginIndex);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, parEndIndex);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, contentsEndIndex);
		CFStringGetParagraphBounds_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringGetPascalString_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringGetPascalString_FxnInst(){
		return ((CFStringGetPascalString_FxnInst != null)
	? (CFStringGetPascalString_FxnInst)
	: (CFStringGetPascalString_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringGetPascalString", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder)));
	}

	 public boolean CFStringGetPascalString(final com.apple.jobjc.corefoundation.CFStringRefCFType theString, final Object /* StringPtr (*, *) */ buffer, final long bufferSize, final int encoding){
			final com.apple.jobjc.Invoke.FunCall CFStringGetPascalString_FxnInst = get_CFStringGetPascalString_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringGetPascalString_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, buffer);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, bufferSize);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, encoding);
		CFStringGetPascalString_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringGetPascalStringPtr_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringGetPascalStringPtr_FxnInst(){
		return ((CFStringGetPascalStringPtr_FxnInst != null)
	? (CFStringGetPascalStringPtr_FxnInst)
	: (CFStringGetPascalStringPtr_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringGetPascalStringPtr", com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder)));
	}

	 public Object /* ConstStringPtr (*, *) */ CFStringGetPascalStringPtr(final com.apple.jobjc.corefoundation.CFStringRefCFType theString, final int encoding){
			final com.apple.jobjc.Invoke.FunCall CFStringGetPascalStringPtr_FxnInst = get_CFStringGetPascalStringPtr_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringGetPascalStringPtr_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, encoding);
		CFStringGetPascalStringPtr_FxnInst.invoke(nativeBuffer);
		final Object /* ConstStringPtr (*, *) */ returnValue = (Object /* ConstStringPtr (*, *) */) (com.apple.jobjc.Coder.UnknownCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringGetRangeOfComposedCharactersAtIndex_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringGetRangeOfComposedCharactersAtIndex_FxnInst(){
		return ((CFStringGetRangeOfComposedCharactersAtIndex_FxnInst != null)
	? (CFStringGetRangeOfComposedCharactersAtIndex_FxnInst)
	: (CFStringGetRangeOfComposedCharactersAtIndex_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringGetRangeOfComposedCharactersAtIndex", com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFRange CFStringGetRangeOfComposedCharactersAtIndex(final com.apple.jobjc.corefoundation.CFStringRefCFType theString, final long theIndex){
			final com.apple.jobjc.Invoke.FunCall CFStringGetRangeOfComposedCharactersAtIndex_FxnInst = get_CFStringGetRangeOfComposedCharactersAtIndex_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringGetRangeOfComposedCharactersAtIndex_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, theIndex);
				com.apple.jobjc.corefoundation.CFRange returnValue = com.apple.jobjc.JObjC.getInstance(getRuntime()).CoreFoundation().makeCFRange();
		CFStringGetRangeOfComposedCharactersAtIndex_FxnInst.invoke(nativeBuffer, returnValue);
		
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringGetSmallestEncoding_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringGetSmallestEncoding_FxnInst(){
		return ((CFStringGetSmallestEncoding_FxnInst != null)
	? (CFStringGetSmallestEncoding_FxnInst)
	: (CFStringGetSmallestEncoding_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringGetSmallestEncoding", com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public int CFStringGetSmallestEncoding(final com.apple.jobjc.corefoundation.CFStringRefCFType theString){
			final com.apple.jobjc.Invoke.FunCall CFStringGetSmallestEncoding_FxnInst = get_CFStringGetSmallestEncoding_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringGetSmallestEncoding_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		CFStringGetSmallestEncoding_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringGetSurrogatePairForLongCharacter_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringGetSurrogatePairForLongCharacter_FxnInst(){
		return ((CFStringGetSurrogatePairForLongCharacter_FxnInst != null)
	? (CFStringGetSurrogatePairForLongCharacter_FxnInst)
	: (CFStringGetSurrogatePairForLongCharacter_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringGetSurrogatePairForLongCharacter", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFStringGetSurrogatePairForLongCharacter(final int character, final com.apple.jobjc.Pointer<java.lang.Short> surrogates){
			final com.apple.jobjc.Invoke.FunCall CFStringGetSurrogatePairForLongCharacter_FxnInst = get_CFStringGetSurrogatePairForLongCharacter_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringGetSurrogatePairForLongCharacter_FxnInst.init(nativeBuffer);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, character);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, surrogates);
		CFStringGetSurrogatePairForLongCharacter_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringGetSystemEncoding_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringGetSystemEncoding_FxnInst(){
		return ((CFStringGetSystemEncoding_FxnInst != null)
	? (CFStringGetSystemEncoding_FxnInst)
	: (CFStringGetSystemEncoding_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringGetSystemEncoding", com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder)));
	}

	 public int CFStringGetSystemEncoding(){
			final com.apple.jobjc.Invoke.FunCall CFStringGetSystemEncoding_FxnInst = get_CFStringGetSystemEncoding_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringGetSystemEncoding_FxnInst.init(nativeBuffer);
		CFStringGetSystemEncoding_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringGetTypeID_FxnInst(){
		return ((CFStringGetTypeID_FxnInst != null)
	? (CFStringGetTypeID_FxnInst)
	: (CFStringGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFStringGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFStringGetTypeID_FxnInst = get_CFStringGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringGetTypeID_FxnInst.init(nativeBuffer);
		CFStringGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringHasPrefix_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringHasPrefix_FxnInst(){
		return ((CFStringHasPrefix_FxnInst != null)
	? (CFStringHasPrefix_FxnInst)
	: (CFStringHasPrefix_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringHasPrefix", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFStringHasPrefix(final com.apple.jobjc.corefoundation.CFStringRefCFType theString, final com.apple.jobjc.corefoundation.CFStringRefCFType prefix){
			final com.apple.jobjc.Invoke.FunCall CFStringHasPrefix_FxnInst = get_CFStringHasPrefix_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringHasPrefix_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, prefix);
		CFStringHasPrefix_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringHasSuffix_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringHasSuffix_FxnInst(){
		return ((CFStringHasSuffix_FxnInst != null)
	? (CFStringHasSuffix_FxnInst)
	: (CFStringHasSuffix_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringHasSuffix", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFStringHasSuffix(final com.apple.jobjc.corefoundation.CFStringRefCFType theString, final com.apple.jobjc.corefoundation.CFStringRefCFType suffix){
			final com.apple.jobjc.Invoke.FunCall CFStringHasSuffix_FxnInst = get_CFStringHasSuffix_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringHasSuffix_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, suffix);
		CFStringHasSuffix_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringInitInlineBuffer_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringInitInlineBuffer_FxnInst(){
		return ((CFStringInitInlineBuffer_FxnInst != null)
	? (CFStringInitInlineBuffer_FxnInst)
	: (CFStringInitInlineBuffer_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringInitInlineBuffer", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder())));
	}

	 public void CFStringInitInlineBuffer(final com.apple.jobjc.corefoundation.CFStringRefCFType str, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFStringInlineBuffer> buf, final com.apple.jobjc.corefoundation.CFRange range){
			final com.apple.jobjc.Invoke.FunCall CFStringInitInlineBuffer_FxnInst = get_CFStringInitInlineBuffer_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringInitInlineBuffer_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, str);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, buf);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		CFStringInitInlineBuffer_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringInsert_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringInsert_FxnInst(){
		return ((CFStringInsert_FxnInst != null)
	? (CFStringInsert_FxnInst)
	: (CFStringInsert_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringInsert", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFStringInsert(final com.apple.jobjc.corefoundation.CFMutableStringRefCFType str, final long idx, final com.apple.jobjc.corefoundation.CFStringRefCFType insertedStr){
			final com.apple.jobjc.Invoke.FunCall CFStringInsert_FxnInst = get_CFStringInsert_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringInsert_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, str);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, idx);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, insertedStr);
		CFStringInsert_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringIsEncodingAvailable_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringIsEncodingAvailable_FxnInst(){
		return ((CFStringIsEncodingAvailable_FxnInst != null)
	? (CFStringIsEncodingAvailable_FxnInst)
	: (CFStringIsEncodingAvailable_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringIsEncodingAvailable", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder)));
	}

	 public boolean CFStringIsEncodingAvailable(final int encoding){
			final com.apple.jobjc.Invoke.FunCall CFStringIsEncodingAvailable_FxnInst = get_CFStringIsEncodingAvailable_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringIsEncodingAvailable_FxnInst.init(nativeBuffer);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, encoding);
		CFStringIsEncodingAvailable_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringIsHyphenationAvailableForLocale_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringIsHyphenationAvailableForLocale_FxnInst(){
		return ((CFStringIsHyphenationAvailableForLocale_FxnInst != null)
	? (CFStringIsHyphenationAvailableForLocale_FxnInst)
	: (CFStringIsHyphenationAvailableForLocale_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringIsHyphenationAvailableForLocale", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFStringIsHyphenationAvailableForLocale(final com.apple.jobjc.corefoundation.CFLocaleRefCFType locale){
			final com.apple.jobjc.Invoke.FunCall CFStringIsHyphenationAvailableForLocale_FxnInst = get_CFStringIsHyphenationAvailableForLocale_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringIsHyphenationAvailableForLocale_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, locale);
		CFStringIsHyphenationAvailableForLocale_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringIsSurrogateHighCharacter_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringIsSurrogateHighCharacter_FxnInst(){
		return ((CFStringIsSurrogateHighCharacter_FxnInst != null)
	? (CFStringIsSurrogateHighCharacter_FxnInst)
	: (CFStringIsSurrogateHighCharacter_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringIsSurrogateHighCharacter", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.PrimitiveCoder.UShortCoder.INST)));
	}

	 public boolean CFStringIsSurrogateHighCharacter(final short character){
			final com.apple.jobjc.Invoke.FunCall CFStringIsSurrogateHighCharacter_FxnInst = get_CFStringIsSurrogateHighCharacter_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringIsSurrogateHighCharacter_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.UShortCoder.INST.push(nativeBuffer, character);
		CFStringIsSurrogateHighCharacter_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringIsSurrogateLowCharacter_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringIsSurrogateLowCharacter_FxnInst(){
		return ((CFStringIsSurrogateLowCharacter_FxnInst != null)
	? (CFStringIsSurrogateLowCharacter_FxnInst)
	: (CFStringIsSurrogateLowCharacter_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringIsSurrogateLowCharacter", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.PrimitiveCoder.UShortCoder.INST)));
	}

	 public boolean CFStringIsSurrogateLowCharacter(final short character){
			final com.apple.jobjc.Invoke.FunCall CFStringIsSurrogateLowCharacter_FxnInst = get_CFStringIsSurrogateLowCharacter_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringIsSurrogateLowCharacter_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.UShortCoder.INST.push(nativeBuffer, character);
		CFStringIsSurrogateLowCharacter_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringLowercase_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringLowercase_FxnInst(){
		return ((CFStringLowercase_FxnInst != null)
	? (CFStringLowercase_FxnInst)
	: (CFStringLowercase_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringLowercase", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFStringLowercase(final com.apple.jobjc.corefoundation.CFMutableStringRefCFType theString, final com.apple.jobjc.corefoundation.CFLocaleRefCFType locale){
			final com.apple.jobjc.Invoke.FunCall CFStringLowercase_FxnInst = get_CFStringLowercase_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringLowercase_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, locale);
		CFStringLowercase_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringNormalize_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringNormalize_FxnInst(){
		return ((CFStringNormalize_FxnInst != null)
	? (CFStringNormalize_FxnInst)
	: (CFStringNormalize_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringNormalize", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public void CFStringNormalize(final com.apple.jobjc.corefoundation.CFMutableStringRefCFType theString, final long theForm){
			final com.apple.jobjc.Invoke.FunCall CFStringNormalize_FxnInst = get_CFStringNormalize_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringNormalize_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, theForm);
		CFStringNormalize_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringPad_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringPad_FxnInst(){
		return ((CFStringPad_FxnInst != null)
	? (CFStringPad_FxnInst)
	: (CFStringPad_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringPad", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public void CFStringPad(final com.apple.jobjc.corefoundation.CFMutableStringRefCFType theString, final com.apple.jobjc.corefoundation.CFStringRefCFType padString, final long length, final long indexIntoPad){
			final com.apple.jobjc.Invoke.FunCall CFStringPad_FxnInst = get_CFStringPad_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringPad_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, padString);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, length);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, indexIntoPad);
		CFStringPad_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringReplace_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringReplace_FxnInst(){
		return ((CFStringReplace_FxnInst != null)
	? (CFStringReplace_FxnInst)
	: (CFStringReplace_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringReplace", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFStringReplace(final com.apple.jobjc.corefoundation.CFMutableStringRefCFType theString, final com.apple.jobjc.corefoundation.CFRange range, final com.apple.jobjc.corefoundation.CFStringRefCFType replacement){
			final com.apple.jobjc.Invoke.FunCall CFStringReplace_FxnInst = get_CFStringReplace_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringReplace_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, replacement);
		CFStringReplace_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringReplaceAll_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringReplaceAll_FxnInst(){
		return ((CFStringReplaceAll_FxnInst != null)
	? (CFStringReplaceAll_FxnInst)
	: (CFStringReplaceAll_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringReplaceAll", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFStringReplaceAll(final com.apple.jobjc.corefoundation.CFMutableStringRefCFType theString, final com.apple.jobjc.corefoundation.CFStringRefCFType replacement){
			final com.apple.jobjc.Invoke.FunCall CFStringReplaceAll_FxnInst = get_CFStringReplaceAll_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringReplaceAll_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, replacement);
		CFStringReplaceAll_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringSetExternalCharactersNoCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringSetExternalCharactersNoCopy_FxnInst(){
		return ((CFStringSetExternalCharactersNoCopy_FxnInst != null)
	? (CFStringSetExternalCharactersNoCopy_FxnInst)
	: (CFStringSetExternalCharactersNoCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringSetExternalCharactersNoCopy", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public void CFStringSetExternalCharactersNoCopy(final com.apple.jobjc.corefoundation.CFMutableStringRefCFType theString, final com.apple.jobjc.Pointer<java.lang.Short> chars, final long length, final long capacity){
			final com.apple.jobjc.Invoke.FunCall CFStringSetExternalCharactersNoCopy_FxnInst = get_CFStringSetExternalCharactersNoCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringSetExternalCharactersNoCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, chars);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, length);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, capacity);
		CFStringSetExternalCharactersNoCopy_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringTokenizerAdvanceToNextToken_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringTokenizerAdvanceToNextToken_FxnInst(){
		return ((CFStringTokenizerAdvanceToNextToken_FxnInst != null)
	? (CFStringTokenizerAdvanceToNextToken_FxnInst)
	: (CFStringTokenizerAdvanceToNextToken_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringTokenizerAdvanceToNextToken", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFStringTokenizerAdvanceToNextToken(final com.apple.jobjc.corefoundation.CFStringTokenizerRefCFType tokenizer){
			final com.apple.jobjc.Invoke.FunCall CFStringTokenizerAdvanceToNextToken_FxnInst = get_CFStringTokenizerAdvanceToNextToken_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringTokenizerAdvanceToNextToken_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tokenizer);
		CFStringTokenizerAdvanceToNextToken_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringTokenizerCopyBestStringLanguage_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringTokenizerCopyBestStringLanguage_FxnInst(){
		return ((CFStringTokenizerCopyBestStringLanguage_FxnInst != null)
	? (CFStringTokenizerCopyBestStringLanguage_FxnInst)
	: (CFStringTokenizerCopyBestStringLanguage_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringTokenizerCopyBestStringLanguage", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder())));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFStringTokenizerCopyBestStringLanguage(final com.apple.jobjc.corefoundation.CFStringRefCFType string, final com.apple.jobjc.corefoundation.CFRange range){
			final com.apple.jobjc.Invoke.FunCall CFStringTokenizerCopyBestStringLanguage_FxnInst = get_CFStringTokenizerCopyBestStringLanguage_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringTokenizerCopyBestStringLanguage_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, string);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		CFStringTokenizerCopyBestStringLanguage_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringTokenizerCopyCurrentTokenAttribute_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringTokenizerCopyCurrentTokenAttribute_FxnInst(){
		return ((CFStringTokenizerCopyCurrentTokenAttribute_FxnInst != null)
	? (CFStringTokenizerCopyCurrentTokenAttribute_FxnInst)
	: (CFStringTokenizerCopyCurrentTokenAttribute_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringTokenizerCopyCurrentTokenAttribute", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFTypeRefCFType CFStringTokenizerCopyCurrentTokenAttribute(final com.apple.jobjc.corefoundation.CFStringTokenizerRefCFType tokenizer, final long attribute){
			final com.apple.jobjc.Invoke.FunCall CFStringTokenizerCopyCurrentTokenAttribute_FxnInst = get_CFStringTokenizerCopyCurrentTokenAttribute_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringTokenizerCopyCurrentTokenAttribute_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tokenizer);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, attribute);
		CFStringTokenizerCopyCurrentTokenAttribute_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFTypeRefCFType returnValue = (com.apple.jobjc.corefoundation.CFTypeRefCFType) new com.apple.jobjc.corefoundation.CFTypeRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringTokenizerCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringTokenizerCreate_FxnInst(){
		return ((CFStringTokenizerCreate_FxnInst != null)
	? (CFStringTokenizerCreate_FxnInst)
	: (CFStringTokenizerCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringTokenizerCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringTokenizerRefCFType CFStringTokenizerCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFStringRefCFType string, final com.apple.jobjc.corefoundation.CFRange range, final long options, final com.apple.jobjc.corefoundation.CFLocaleRefCFType locale){
			final com.apple.jobjc.Invoke.FunCall CFStringTokenizerCreate_FxnInst = get_CFStringTokenizerCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringTokenizerCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, string);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, options);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, locale);
		CFStringTokenizerCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringTokenizerRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringTokenizerRefCFType) new com.apple.jobjc.corefoundation.CFStringTokenizerRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringTokenizerGetCurrentSubTokens_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringTokenizerGetCurrentSubTokens_FxnInst(){
		return ((CFStringTokenizerGetCurrentSubTokens_FxnInst != null)
	? (CFStringTokenizerGetCurrentSubTokens_FxnInst)
	: (CFStringTokenizerGetCurrentSubTokens_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringTokenizerGetCurrentSubTokens", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFStringTokenizerGetCurrentSubTokens(final com.apple.jobjc.corefoundation.CFStringTokenizerRefCFType tokenizer, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFRange> ranges, final long maxRangeLength, final com.apple.jobjc.corefoundation.CFMutableArrayRefCFType derivedSubTokens){
			final com.apple.jobjc.Invoke.FunCall CFStringTokenizerGetCurrentSubTokens_FxnInst = get_CFStringTokenizerGetCurrentSubTokens_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringTokenizerGetCurrentSubTokens_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tokenizer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, ranges);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, maxRangeLength);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, derivedSubTokens);
		CFStringTokenizerGetCurrentSubTokens_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringTokenizerGetCurrentTokenRange_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringTokenizerGetCurrentTokenRange_FxnInst(){
		return ((CFStringTokenizerGetCurrentTokenRange_FxnInst != null)
	? (CFStringTokenizerGetCurrentTokenRange_FxnInst)
	: (CFStringTokenizerGetCurrentTokenRange_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringTokenizerGetCurrentTokenRange", com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFRange CFStringTokenizerGetCurrentTokenRange(final com.apple.jobjc.corefoundation.CFStringTokenizerRefCFType tokenizer){
			final com.apple.jobjc.Invoke.FunCall CFStringTokenizerGetCurrentTokenRange_FxnInst = get_CFStringTokenizerGetCurrentTokenRange_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringTokenizerGetCurrentTokenRange_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tokenizer);
				com.apple.jobjc.corefoundation.CFRange returnValue = com.apple.jobjc.JObjC.getInstance(getRuntime()).CoreFoundation().makeCFRange();
		CFStringTokenizerGetCurrentTokenRange_FxnInst.invoke(nativeBuffer, returnValue);
		
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringTokenizerGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringTokenizerGetTypeID_FxnInst(){
		return ((CFStringTokenizerGetTypeID_FxnInst != null)
	? (CFStringTokenizerGetTypeID_FxnInst)
	: (CFStringTokenizerGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringTokenizerGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFStringTokenizerGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFStringTokenizerGetTypeID_FxnInst = get_CFStringTokenizerGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringTokenizerGetTypeID_FxnInst.init(nativeBuffer);
		CFStringTokenizerGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringTokenizerGoToTokenAtIndex_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringTokenizerGoToTokenAtIndex_FxnInst(){
		return ((CFStringTokenizerGoToTokenAtIndex_FxnInst != null)
	? (CFStringTokenizerGoToTokenAtIndex_FxnInst)
	: (CFStringTokenizerGoToTokenAtIndex_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringTokenizerGoToTokenAtIndex", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public long CFStringTokenizerGoToTokenAtIndex(final com.apple.jobjc.corefoundation.CFStringTokenizerRefCFType tokenizer, final long index){
			final com.apple.jobjc.Invoke.FunCall CFStringTokenizerGoToTokenAtIndex_FxnInst = get_CFStringTokenizerGoToTokenAtIndex_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringTokenizerGoToTokenAtIndex_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tokenizer);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, index);
		CFStringTokenizerGoToTokenAtIndex_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringTokenizerSetString_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringTokenizerSetString_FxnInst(){
		return ((CFStringTokenizerSetString_FxnInst != null)
	? (CFStringTokenizerSetString_FxnInst)
	: (CFStringTokenizerSetString_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringTokenizerSetString", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFRange.getStructCoder())));
	}

	 public void CFStringTokenizerSetString(final com.apple.jobjc.corefoundation.CFStringTokenizerRefCFType tokenizer, final com.apple.jobjc.corefoundation.CFStringRefCFType string, final com.apple.jobjc.corefoundation.CFRange range){
			final com.apple.jobjc.Invoke.FunCall CFStringTokenizerSetString_FxnInst = get_CFStringTokenizerSetString_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringTokenizerSetString_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tokenizer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, string);
		com.apple.jobjc.corefoundation.CFRange.getStructCoder().push(nativeBuffer, range);
		CFStringTokenizerSetString_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringTransform_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringTransform_FxnInst(){
		return ((CFStringTransform_FxnInst != null)
	? (CFStringTransform_FxnInst)
	: (CFStringTransform_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringTransform", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.BoolCoder.INST)));
	}

	 public boolean CFStringTransform(final com.apple.jobjc.corefoundation.CFMutableStringRefCFType string, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFRange> range, final com.apple.jobjc.corefoundation.CFStringRefCFType transform, final boolean reverse){
			final com.apple.jobjc.Invoke.FunCall CFStringTransform_FxnInst = get_CFStringTransform_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringTransform_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, string);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, range);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, transform);
		com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.push(nativeBuffer, reverse);
		CFStringTransform_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringTrim_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringTrim_FxnInst(){
		return ((CFStringTrim_FxnInst != null)
	? (CFStringTrim_FxnInst)
	: (CFStringTrim_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringTrim", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFStringTrim(final com.apple.jobjc.corefoundation.CFMutableStringRefCFType theString, final com.apple.jobjc.corefoundation.CFStringRefCFType trimString){
			final com.apple.jobjc.Invoke.FunCall CFStringTrim_FxnInst = get_CFStringTrim_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringTrim_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, trimString);
		CFStringTrim_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringTrimWhitespace_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringTrimWhitespace_FxnInst(){
		return ((CFStringTrimWhitespace_FxnInst != null)
	? (CFStringTrimWhitespace_FxnInst)
	: (CFStringTrimWhitespace_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringTrimWhitespace", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFStringTrimWhitespace(final com.apple.jobjc.corefoundation.CFMutableStringRefCFType theString){
			final com.apple.jobjc.Invoke.FunCall CFStringTrimWhitespace_FxnInst = get_CFStringTrimWhitespace_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringTrimWhitespace_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		CFStringTrimWhitespace_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFStringUppercase_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFStringUppercase_FxnInst(){
		return ((CFStringUppercase_FxnInst != null)
	? (CFStringUppercase_FxnInst)
	: (CFStringUppercase_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFStringUppercase", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFStringUppercase(final com.apple.jobjc.corefoundation.CFMutableStringRefCFType theString, final com.apple.jobjc.corefoundation.CFLocaleRefCFType locale){
			final com.apple.jobjc.Invoke.FunCall CFStringUppercase_FxnInst = get_CFStringUppercase_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFStringUppercase_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, theString);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, locale);
		CFStringUppercase_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFSwapInt16_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSwapInt16_FxnInst(){
		return ((CFSwapInt16_FxnInst != null)
	? (CFSwapInt16_FxnInst)
	: (CFSwapInt16_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSwapInt16", com.apple.jobjc.PrimitiveCoder.UShortCoder.INST, com.apple.jobjc.PrimitiveCoder.UShortCoder.INST)));
	}

	 public short CFSwapInt16(final short arg){
			final com.apple.jobjc.Invoke.FunCall CFSwapInt16_FxnInst = get_CFSwapInt16_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSwapInt16_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.UShortCoder.INST.push(nativeBuffer, arg);
		CFSwapInt16_FxnInst.invoke(nativeBuffer);
		final short returnValue = (short) (com.apple.jobjc.PrimitiveCoder.UShortCoder.INST.popShort(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSwapInt16BigToHost_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSwapInt16BigToHost_FxnInst(){
		return ((CFSwapInt16BigToHost_FxnInst != null)
	? (CFSwapInt16BigToHost_FxnInst)
	: (CFSwapInt16BigToHost_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSwapInt16BigToHost", com.apple.jobjc.PrimitiveCoder.UShortCoder.INST, com.apple.jobjc.PrimitiveCoder.UShortCoder.INST)));
	}

	 public short CFSwapInt16BigToHost(final short arg){
			final com.apple.jobjc.Invoke.FunCall CFSwapInt16BigToHost_FxnInst = get_CFSwapInt16BigToHost_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSwapInt16BigToHost_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.UShortCoder.INST.push(nativeBuffer, arg);
		CFSwapInt16BigToHost_FxnInst.invoke(nativeBuffer);
		final short returnValue = (short) (com.apple.jobjc.PrimitiveCoder.UShortCoder.INST.popShort(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSwapInt16HostToBig_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSwapInt16HostToBig_FxnInst(){
		return ((CFSwapInt16HostToBig_FxnInst != null)
	? (CFSwapInt16HostToBig_FxnInst)
	: (CFSwapInt16HostToBig_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSwapInt16HostToBig", com.apple.jobjc.PrimitiveCoder.UShortCoder.INST, com.apple.jobjc.PrimitiveCoder.UShortCoder.INST)));
	}

	 public short CFSwapInt16HostToBig(final short arg){
			final com.apple.jobjc.Invoke.FunCall CFSwapInt16HostToBig_FxnInst = get_CFSwapInt16HostToBig_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSwapInt16HostToBig_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.UShortCoder.INST.push(nativeBuffer, arg);
		CFSwapInt16HostToBig_FxnInst.invoke(nativeBuffer);
		final short returnValue = (short) (com.apple.jobjc.PrimitiveCoder.UShortCoder.INST.popShort(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSwapInt16HostToLittle_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSwapInt16HostToLittle_FxnInst(){
		return ((CFSwapInt16HostToLittle_FxnInst != null)
	? (CFSwapInt16HostToLittle_FxnInst)
	: (CFSwapInt16HostToLittle_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSwapInt16HostToLittle", com.apple.jobjc.PrimitiveCoder.UShortCoder.INST, com.apple.jobjc.PrimitiveCoder.UShortCoder.INST)));
	}

	 public short CFSwapInt16HostToLittle(final short arg){
			final com.apple.jobjc.Invoke.FunCall CFSwapInt16HostToLittle_FxnInst = get_CFSwapInt16HostToLittle_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSwapInt16HostToLittle_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.UShortCoder.INST.push(nativeBuffer, arg);
		CFSwapInt16HostToLittle_FxnInst.invoke(nativeBuffer);
		final short returnValue = (short) (com.apple.jobjc.PrimitiveCoder.UShortCoder.INST.popShort(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSwapInt16LittleToHost_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSwapInt16LittleToHost_FxnInst(){
		return ((CFSwapInt16LittleToHost_FxnInst != null)
	? (CFSwapInt16LittleToHost_FxnInst)
	: (CFSwapInt16LittleToHost_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSwapInt16LittleToHost", com.apple.jobjc.PrimitiveCoder.UShortCoder.INST, com.apple.jobjc.PrimitiveCoder.UShortCoder.INST)));
	}

	 public short CFSwapInt16LittleToHost(final short arg){
			final com.apple.jobjc.Invoke.FunCall CFSwapInt16LittleToHost_FxnInst = get_CFSwapInt16LittleToHost_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSwapInt16LittleToHost_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.UShortCoder.INST.push(nativeBuffer, arg);
		CFSwapInt16LittleToHost_FxnInst.invoke(nativeBuffer);
		final short returnValue = (short) (com.apple.jobjc.PrimitiveCoder.UShortCoder.INST.popShort(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSwapInt32_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSwapInt32_FxnInst(){
		return ((CFSwapInt32_FxnInst != null)
	? (CFSwapInt32_FxnInst)
	: (CFSwapInt32_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSwapInt32", com.apple.jobjc.PrimitiveCoder.UIntCoder.INST, com.apple.jobjc.PrimitiveCoder.UIntCoder.INST)));
	}

	 public int CFSwapInt32(final int arg){
			final com.apple.jobjc.Invoke.FunCall CFSwapInt32_FxnInst = get_CFSwapInt32_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSwapInt32_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.UIntCoder.INST.push(nativeBuffer, arg);
		CFSwapInt32_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.PrimitiveCoder.UIntCoder.INST.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSwapInt32BigToHost_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSwapInt32BigToHost_FxnInst(){
		return ((CFSwapInt32BigToHost_FxnInst != null)
	? (CFSwapInt32BigToHost_FxnInst)
	: (CFSwapInt32BigToHost_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSwapInt32BigToHost", com.apple.jobjc.PrimitiveCoder.UIntCoder.INST, com.apple.jobjc.PrimitiveCoder.UIntCoder.INST)));
	}

	 public int CFSwapInt32BigToHost(final int arg){
			final com.apple.jobjc.Invoke.FunCall CFSwapInt32BigToHost_FxnInst = get_CFSwapInt32BigToHost_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSwapInt32BigToHost_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.UIntCoder.INST.push(nativeBuffer, arg);
		CFSwapInt32BigToHost_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.PrimitiveCoder.UIntCoder.INST.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSwapInt32HostToBig_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSwapInt32HostToBig_FxnInst(){
		return ((CFSwapInt32HostToBig_FxnInst != null)
	? (CFSwapInt32HostToBig_FxnInst)
	: (CFSwapInt32HostToBig_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSwapInt32HostToBig", com.apple.jobjc.PrimitiveCoder.UIntCoder.INST, com.apple.jobjc.PrimitiveCoder.UIntCoder.INST)));
	}

	 public int CFSwapInt32HostToBig(final int arg){
			final com.apple.jobjc.Invoke.FunCall CFSwapInt32HostToBig_FxnInst = get_CFSwapInt32HostToBig_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSwapInt32HostToBig_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.UIntCoder.INST.push(nativeBuffer, arg);
		CFSwapInt32HostToBig_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.PrimitiveCoder.UIntCoder.INST.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSwapInt32HostToLittle_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSwapInt32HostToLittle_FxnInst(){
		return ((CFSwapInt32HostToLittle_FxnInst != null)
	? (CFSwapInt32HostToLittle_FxnInst)
	: (CFSwapInt32HostToLittle_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSwapInt32HostToLittle", com.apple.jobjc.PrimitiveCoder.UIntCoder.INST, com.apple.jobjc.PrimitiveCoder.UIntCoder.INST)));
	}

	 public int CFSwapInt32HostToLittle(final int arg){
			final com.apple.jobjc.Invoke.FunCall CFSwapInt32HostToLittle_FxnInst = get_CFSwapInt32HostToLittle_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSwapInt32HostToLittle_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.UIntCoder.INST.push(nativeBuffer, arg);
		CFSwapInt32HostToLittle_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.PrimitiveCoder.UIntCoder.INST.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSwapInt32LittleToHost_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSwapInt32LittleToHost_FxnInst(){
		return ((CFSwapInt32LittleToHost_FxnInst != null)
	? (CFSwapInt32LittleToHost_FxnInst)
	: (CFSwapInt32LittleToHost_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSwapInt32LittleToHost", com.apple.jobjc.PrimitiveCoder.UIntCoder.INST, com.apple.jobjc.PrimitiveCoder.UIntCoder.INST)));
	}

	 public int CFSwapInt32LittleToHost(final int arg){
			final com.apple.jobjc.Invoke.FunCall CFSwapInt32LittleToHost_FxnInst = get_CFSwapInt32LittleToHost_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSwapInt32LittleToHost_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.UIntCoder.INST.push(nativeBuffer, arg);
		CFSwapInt32LittleToHost_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.PrimitiveCoder.UIntCoder.INST.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSwapInt64_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSwapInt64_FxnInst(){
		return ((CFSwapInt64_FxnInst != null)
	? (CFSwapInt64_FxnInst)
	: (CFSwapInt64_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSwapInt64", com.apple.jobjc.PrimitiveCoder.ULongLongCoder.INST, com.apple.jobjc.PrimitiveCoder.ULongLongCoder.INST)));
	}

	 public long CFSwapInt64(final long arg){
			final com.apple.jobjc.Invoke.FunCall CFSwapInt64_FxnInst = get_CFSwapInt64_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSwapInt64_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.ULongLongCoder.INST.push(nativeBuffer, arg);
		CFSwapInt64_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.PrimitiveCoder.ULongLongCoder.INST.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSwapInt64BigToHost_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSwapInt64BigToHost_FxnInst(){
		return ((CFSwapInt64BigToHost_FxnInst != null)
	? (CFSwapInt64BigToHost_FxnInst)
	: (CFSwapInt64BigToHost_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSwapInt64BigToHost", com.apple.jobjc.PrimitiveCoder.ULongLongCoder.INST, com.apple.jobjc.PrimitiveCoder.ULongLongCoder.INST)));
	}

	 public long CFSwapInt64BigToHost(final long arg){
			final com.apple.jobjc.Invoke.FunCall CFSwapInt64BigToHost_FxnInst = get_CFSwapInt64BigToHost_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSwapInt64BigToHost_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.ULongLongCoder.INST.push(nativeBuffer, arg);
		CFSwapInt64BigToHost_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.PrimitiveCoder.ULongLongCoder.INST.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSwapInt64HostToBig_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSwapInt64HostToBig_FxnInst(){
		return ((CFSwapInt64HostToBig_FxnInst != null)
	? (CFSwapInt64HostToBig_FxnInst)
	: (CFSwapInt64HostToBig_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSwapInt64HostToBig", com.apple.jobjc.PrimitiveCoder.ULongLongCoder.INST, com.apple.jobjc.PrimitiveCoder.ULongLongCoder.INST)));
	}

	 public long CFSwapInt64HostToBig(final long arg){
			final com.apple.jobjc.Invoke.FunCall CFSwapInt64HostToBig_FxnInst = get_CFSwapInt64HostToBig_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSwapInt64HostToBig_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.ULongLongCoder.INST.push(nativeBuffer, arg);
		CFSwapInt64HostToBig_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.PrimitiveCoder.ULongLongCoder.INST.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSwapInt64HostToLittle_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSwapInt64HostToLittle_FxnInst(){
		return ((CFSwapInt64HostToLittle_FxnInst != null)
	? (CFSwapInt64HostToLittle_FxnInst)
	: (CFSwapInt64HostToLittle_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSwapInt64HostToLittle", com.apple.jobjc.PrimitiveCoder.ULongLongCoder.INST, com.apple.jobjc.PrimitiveCoder.ULongLongCoder.INST)));
	}

	 public long CFSwapInt64HostToLittle(final long arg){
			final com.apple.jobjc.Invoke.FunCall CFSwapInt64HostToLittle_FxnInst = get_CFSwapInt64HostToLittle_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSwapInt64HostToLittle_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.ULongLongCoder.INST.push(nativeBuffer, arg);
		CFSwapInt64HostToLittle_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.PrimitiveCoder.ULongLongCoder.INST.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFSwapInt64LittleToHost_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFSwapInt64LittleToHost_FxnInst(){
		return ((CFSwapInt64LittleToHost_FxnInst != null)
	? (CFSwapInt64LittleToHost_FxnInst)
	: (CFSwapInt64LittleToHost_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFSwapInt64LittleToHost", com.apple.jobjc.PrimitiveCoder.ULongLongCoder.INST, com.apple.jobjc.PrimitiveCoder.ULongLongCoder.INST)));
	}

	 public long CFSwapInt64LittleToHost(final long arg){
			final com.apple.jobjc.Invoke.FunCall CFSwapInt64LittleToHost_FxnInst = get_CFSwapInt64LittleToHost_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFSwapInt64LittleToHost_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.ULongLongCoder.INST.push(nativeBuffer, arg);
		CFSwapInt64LittleToHost_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.PrimitiveCoder.ULongLongCoder.INST.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFTimeZoneCopyAbbreviation_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTimeZoneCopyAbbreviation_FxnInst(){
		return ((CFTimeZoneCopyAbbreviation_FxnInst != null)
	? (CFTimeZoneCopyAbbreviation_FxnInst)
	: (CFTimeZoneCopyAbbreviation_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTimeZoneCopyAbbreviation", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFTimeZoneCopyAbbreviation(final com.apple.jobjc.corefoundation.CFTimeZoneRefCFType tz, final double at){
			final com.apple.jobjc.Invoke.FunCall CFTimeZoneCopyAbbreviation_FxnInst = get_CFTimeZoneCopyAbbreviation_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTimeZoneCopyAbbreviation_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tz);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, at);
		CFTimeZoneCopyAbbreviation_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFTimeZoneCopyAbbreviationDictionary_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTimeZoneCopyAbbreviationDictionary_FxnInst(){
		return ((CFTimeZoneCopyAbbreviationDictionary_FxnInst != null)
	? (CFTimeZoneCopyAbbreviationDictionary_FxnInst)
	: (CFTimeZoneCopyAbbreviationDictionary_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTimeZoneCopyAbbreviationDictionary", com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDictionaryRefCFType CFTimeZoneCopyAbbreviationDictionary(){
			final com.apple.jobjc.Invoke.FunCall CFTimeZoneCopyAbbreviationDictionary_FxnInst = get_CFTimeZoneCopyAbbreviationDictionary_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTimeZoneCopyAbbreviationDictionary_FxnInst.init(nativeBuffer);
		CFTimeZoneCopyAbbreviationDictionary_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDictionaryRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDictionaryRefCFType) new com.apple.jobjc.corefoundation.CFDictionaryRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFTimeZoneCopyDefault_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTimeZoneCopyDefault_FxnInst(){
		return ((CFTimeZoneCopyDefault_FxnInst != null)
	? (CFTimeZoneCopyDefault_FxnInst)
	: (CFTimeZoneCopyDefault_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTimeZoneCopyDefault", com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFTimeZoneRefCFType CFTimeZoneCopyDefault(){
			final com.apple.jobjc.Invoke.FunCall CFTimeZoneCopyDefault_FxnInst = get_CFTimeZoneCopyDefault_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTimeZoneCopyDefault_FxnInst.init(nativeBuffer);
		CFTimeZoneCopyDefault_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFTimeZoneRefCFType returnValue = (com.apple.jobjc.corefoundation.CFTimeZoneRefCFType) new com.apple.jobjc.corefoundation.CFTimeZoneRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFTimeZoneCopyKnownNames_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTimeZoneCopyKnownNames_FxnInst(){
		return ((CFTimeZoneCopyKnownNames_FxnInst != null)
	? (CFTimeZoneCopyKnownNames_FxnInst)
	: (CFTimeZoneCopyKnownNames_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTimeZoneCopyKnownNames", com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFArrayRefCFType CFTimeZoneCopyKnownNames(){
			final com.apple.jobjc.Invoke.FunCall CFTimeZoneCopyKnownNames_FxnInst = get_CFTimeZoneCopyKnownNames_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTimeZoneCopyKnownNames_FxnInst.init(nativeBuffer);
		CFTimeZoneCopyKnownNames_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFArrayRefCFType returnValue = (com.apple.jobjc.corefoundation.CFArrayRefCFType) new com.apple.jobjc.corefoundation.CFArrayRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFTimeZoneCopyLocalizedName_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTimeZoneCopyLocalizedName_FxnInst(){
		return ((CFTimeZoneCopyLocalizedName_FxnInst != null)
	? (CFTimeZoneCopyLocalizedName_FxnInst)
	: (CFTimeZoneCopyLocalizedName_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTimeZoneCopyLocalizedName", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFTimeZoneCopyLocalizedName(final com.apple.jobjc.corefoundation.CFTimeZoneRefCFType tz, final long style, final com.apple.jobjc.corefoundation.CFLocaleRefCFType locale){
			final com.apple.jobjc.Invoke.FunCall CFTimeZoneCopyLocalizedName_FxnInst = get_CFTimeZoneCopyLocalizedName_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTimeZoneCopyLocalizedName_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tz);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, style);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, locale);
		CFTimeZoneCopyLocalizedName_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFTimeZoneCopySystem_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTimeZoneCopySystem_FxnInst(){
		return ((CFTimeZoneCopySystem_FxnInst != null)
	? (CFTimeZoneCopySystem_FxnInst)
	: (CFTimeZoneCopySystem_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTimeZoneCopySystem", com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFTimeZoneRefCFType CFTimeZoneCopySystem(){
			final com.apple.jobjc.Invoke.FunCall CFTimeZoneCopySystem_FxnInst = get_CFTimeZoneCopySystem_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTimeZoneCopySystem_FxnInst.init(nativeBuffer);
		CFTimeZoneCopySystem_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFTimeZoneRefCFType returnValue = (com.apple.jobjc.corefoundation.CFTimeZoneRefCFType) new com.apple.jobjc.corefoundation.CFTimeZoneRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFTimeZoneCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTimeZoneCreate_FxnInst(){
		return ((CFTimeZoneCreate_FxnInst != null)
	? (CFTimeZoneCreate_FxnInst)
	: (CFTimeZoneCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTimeZoneCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFTimeZoneRefCFType CFTimeZoneCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFStringRefCFType name, final com.apple.jobjc.corefoundation.CFDataRefCFType data){
			final com.apple.jobjc.Invoke.FunCall CFTimeZoneCreate_FxnInst = get_CFTimeZoneCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTimeZoneCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, name);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, data);
		CFTimeZoneCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFTimeZoneRefCFType returnValue = (com.apple.jobjc.corefoundation.CFTimeZoneRefCFType) new com.apple.jobjc.corefoundation.CFTimeZoneRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFTimeZoneCreateWithName_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTimeZoneCreateWithName_FxnInst(){
		return ((CFTimeZoneCreateWithName_FxnInst != null)
	? (CFTimeZoneCreateWithName_FxnInst)
	: (CFTimeZoneCreateWithName_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTimeZoneCreateWithName", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.BoolCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFTimeZoneRefCFType CFTimeZoneCreateWithName(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFStringRefCFType name, final boolean tryAbbrev){
			final com.apple.jobjc.Invoke.FunCall CFTimeZoneCreateWithName_FxnInst = get_CFTimeZoneCreateWithName_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTimeZoneCreateWithName_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, name);
		com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.push(nativeBuffer, tryAbbrev);
		CFTimeZoneCreateWithName_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFTimeZoneRefCFType returnValue = (com.apple.jobjc.corefoundation.CFTimeZoneRefCFType) new com.apple.jobjc.corefoundation.CFTimeZoneRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFTimeZoneCreateWithTimeIntervalFromGMT_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTimeZoneCreateWithTimeIntervalFromGMT_FxnInst(){
		return ((CFTimeZoneCreateWithTimeIntervalFromGMT_FxnInst != null)
	? (CFTimeZoneCreateWithTimeIntervalFromGMT_FxnInst)
	: (CFTimeZoneCreateWithTimeIntervalFromGMT_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTimeZoneCreateWithTimeIntervalFromGMT", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFTimeZoneRefCFType CFTimeZoneCreateWithTimeIntervalFromGMT(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final double ti){
			final com.apple.jobjc.Invoke.FunCall CFTimeZoneCreateWithTimeIntervalFromGMT_FxnInst = get_CFTimeZoneCreateWithTimeIntervalFromGMT_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTimeZoneCreateWithTimeIntervalFromGMT_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, ti);
		CFTimeZoneCreateWithTimeIntervalFromGMT_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFTimeZoneRefCFType returnValue = (com.apple.jobjc.corefoundation.CFTimeZoneRefCFType) new com.apple.jobjc.corefoundation.CFTimeZoneRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFTimeZoneGetData_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTimeZoneGetData_FxnInst(){
		return ((CFTimeZoneGetData_FxnInst != null)
	? (CFTimeZoneGetData_FxnInst)
	: (CFTimeZoneGetData_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTimeZoneGetData", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDataRefCFType CFTimeZoneGetData(final com.apple.jobjc.corefoundation.CFTimeZoneRefCFType tz){
			final com.apple.jobjc.Invoke.FunCall CFTimeZoneGetData_FxnInst = get_CFTimeZoneGetData_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTimeZoneGetData_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tz);
		CFTimeZoneGetData_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDataRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDataRefCFType) new com.apple.jobjc.corefoundation.CFDataRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFTimeZoneGetDaylightSavingTimeOffset_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTimeZoneGetDaylightSavingTimeOffset_FxnInst(){
		return ((CFTimeZoneGetDaylightSavingTimeOffset_FxnInst != null)
	? (CFTimeZoneGetDaylightSavingTimeOffset_FxnInst)
	: (CFTimeZoneGetDaylightSavingTimeOffset_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTimeZoneGetDaylightSavingTimeOffset", com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST)));
	}

	 public double CFTimeZoneGetDaylightSavingTimeOffset(final com.apple.jobjc.corefoundation.CFTimeZoneRefCFType tz, final double at){
			final com.apple.jobjc.Invoke.FunCall CFTimeZoneGetDaylightSavingTimeOffset_FxnInst = get_CFTimeZoneGetDaylightSavingTimeOffset_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTimeZoneGetDaylightSavingTimeOffset_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tz);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, at);
		CFTimeZoneGetDaylightSavingTimeOffset_FxnInst.invoke(nativeBuffer);
		final double returnValue = (double) (com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.popDouble(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFTimeZoneGetName_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTimeZoneGetName_FxnInst(){
		return ((CFTimeZoneGetName_FxnInst != null)
	? (CFTimeZoneGetName_FxnInst)
	: (CFTimeZoneGetName_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTimeZoneGetName", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFTimeZoneGetName(final com.apple.jobjc.corefoundation.CFTimeZoneRefCFType tz){
			final com.apple.jobjc.Invoke.FunCall CFTimeZoneGetName_FxnInst = get_CFTimeZoneGetName_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTimeZoneGetName_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tz);
		CFTimeZoneGetName_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFTimeZoneGetNextDaylightSavingTimeTransition_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTimeZoneGetNextDaylightSavingTimeTransition_FxnInst(){
		return ((CFTimeZoneGetNextDaylightSavingTimeTransition_FxnInst != null)
	? (CFTimeZoneGetNextDaylightSavingTimeTransition_FxnInst)
	: (CFTimeZoneGetNextDaylightSavingTimeTransition_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTimeZoneGetNextDaylightSavingTimeTransition", com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST)));
	}

	 public double CFTimeZoneGetNextDaylightSavingTimeTransition(final com.apple.jobjc.corefoundation.CFTimeZoneRefCFType tz, final double at){
			final com.apple.jobjc.Invoke.FunCall CFTimeZoneGetNextDaylightSavingTimeTransition_FxnInst = get_CFTimeZoneGetNextDaylightSavingTimeTransition_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTimeZoneGetNextDaylightSavingTimeTransition_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tz);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, at);
		CFTimeZoneGetNextDaylightSavingTimeTransition_FxnInst.invoke(nativeBuffer);
		final double returnValue = (double) (com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.popDouble(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFTimeZoneGetSecondsFromGMT_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTimeZoneGetSecondsFromGMT_FxnInst(){
		return ((CFTimeZoneGetSecondsFromGMT_FxnInst != null)
	? (CFTimeZoneGetSecondsFromGMT_FxnInst)
	: (CFTimeZoneGetSecondsFromGMT_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTimeZoneGetSecondsFromGMT", com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST)));
	}

	 public double CFTimeZoneGetSecondsFromGMT(final com.apple.jobjc.corefoundation.CFTimeZoneRefCFType tz, final double at){
			final com.apple.jobjc.Invoke.FunCall CFTimeZoneGetSecondsFromGMT_FxnInst = get_CFTimeZoneGetSecondsFromGMT_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTimeZoneGetSecondsFromGMT_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tz);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, at);
		CFTimeZoneGetSecondsFromGMT_FxnInst.invoke(nativeBuffer);
		final double returnValue = (double) (com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.popDouble(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFTimeZoneGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTimeZoneGetTypeID_FxnInst(){
		return ((CFTimeZoneGetTypeID_FxnInst != null)
	? (CFTimeZoneGetTypeID_FxnInst)
	: (CFTimeZoneGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTimeZoneGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFTimeZoneGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFTimeZoneGetTypeID_FxnInst = get_CFTimeZoneGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTimeZoneGetTypeID_FxnInst.init(nativeBuffer);
		CFTimeZoneGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFTimeZoneIsDaylightSavingTime_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTimeZoneIsDaylightSavingTime_FxnInst(){
		return ((CFTimeZoneIsDaylightSavingTime_FxnInst != null)
	? (CFTimeZoneIsDaylightSavingTime_FxnInst)
	: (CFTimeZoneIsDaylightSavingTime_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTimeZoneIsDaylightSavingTime", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST)));
	}

	 public boolean CFTimeZoneIsDaylightSavingTime(final com.apple.jobjc.corefoundation.CFTimeZoneRefCFType tz, final double at){
			final com.apple.jobjc.Invoke.FunCall CFTimeZoneIsDaylightSavingTime_FxnInst = get_CFTimeZoneIsDaylightSavingTime_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTimeZoneIsDaylightSavingTime_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tz);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, at);
		CFTimeZoneIsDaylightSavingTime_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFTimeZoneResetSystem_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTimeZoneResetSystem_FxnInst(){
		return ((CFTimeZoneResetSystem_FxnInst != null)
	? (CFTimeZoneResetSystem_FxnInst)
	: (CFTimeZoneResetSystem_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTimeZoneResetSystem", com.apple.jobjc.Coder.VoidCoder.INST)));
	}

	 public void CFTimeZoneResetSystem(){
			final com.apple.jobjc.Invoke.FunCall CFTimeZoneResetSystem_FxnInst = get_CFTimeZoneResetSystem_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTimeZoneResetSystem_FxnInst.init(nativeBuffer);
		CFTimeZoneResetSystem_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFTimeZoneSetAbbreviationDictionary_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTimeZoneSetAbbreviationDictionary_FxnInst(){
		return ((CFTimeZoneSetAbbreviationDictionary_FxnInst != null)
	? (CFTimeZoneSetAbbreviationDictionary_FxnInst)
	: (CFTimeZoneSetAbbreviationDictionary_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTimeZoneSetAbbreviationDictionary", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFTimeZoneSetAbbreviationDictionary(final com.apple.jobjc.corefoundation.CFDictionaryRefCFType dict){
			final com.apple.jobjc.Invoke.FunCall CFTimeZoneSetAbbreviationDictionary_FxnInst = get_CFTimeZoneSetAbbreviationDictionary_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTimeZoneSetAbbreviationDictionary_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, dict);
		CFTimeZoneSetAbbreviationDictionary_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFTimeZoneSetDefault_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTimeZoneSetDefault_FxnInst(){
		return ((CFTimeZoneSetDefault_FxnInst != null)
	? (CFTimeZoneSetDefault_FxnInst)
	: (CFTimeZoneSetDefault_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTimeZoneSetDefault", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFTimeZoneSetDefault(final com.apple.jobjc.corefoundation.CFTimeZoneRefCFType tz){
			final com.apple.jobjc.Invoke.FunCall CFTimeZoneSetDefault_FxnInst = get_CFTimeZoneSetDefault_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTimeZoneSetDefault_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tz);
		CFTimeZoneSetDefault_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFTreeAppendChild_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTreeAppendChild_FxnInst(){
		return ((CFTreeAppendChild_FxnInst != null)
	? (CFTreeAppendChild_FxnInst)
	: (CFTreeAppendChild_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTreeAppendChild", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFTreeAppendChild(final com.apple.jobjc.corefoundation.CFTreeRefCFType tree, final com.apple.jobjc.corefoundation.CFTreeRefCFType newChild){
			final com.apple.jobjc.Invoke.FunCall CFTreeAppendChild_FxnInst = get_CFTreeAppendChild_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTreeAppendChild_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tree);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, newChild);
		CFTreeAppendChild_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFTreeApplyFunctionToChildren_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTreeApplyFunctionToChildren_FxnInst(){
		return ((CFTreeApplyFunctionToChildren_FxnInst != null)
	? (CFTreeApplyFunctionToChildren_FxnInst)
	: (CFTreeApplyFunctionToChildren_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTreeApplyFunctionToChildren", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFTreeApplyFunctionToChildren(final com.apple.jobjc.corefoundation.CFTreeRefCFType tree, final Object /* CFTreeApplierFunction (^?, ^?) */ applier, final com.apple.jobjc.Pointer<Void> context){
			final com.apple.jobjc.Invoke.FunCall CFTreeApplyFunctionToChildren_FxnInst = get_CFTreeApplyFunctionToChildren_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTreeApplyFunctionToChildren_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tree);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, applier);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFTreeApplyFunctionToChildren_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFTreeCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTreeCreate_FxnInst(){
		return ((CFTreeCreate_FxnInst != null)
	? (CFTreeCreate_FxnInst)
	: (CFTreeCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTreeCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFTreeRefCFType CFTreeCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFTreeContext> context){
			final com.apple.jobjc.Invoke.FunCall CFTreeCreate_FxnInst = get_CFTreeCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTreeCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFTreeCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFTreeRefCFType returnValue = (com.apple.jobjc.corefoundation.CFTreeRefCFType) new com.apple.jobjc.corefoundation.CFTreeRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFTreeFindRoot_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTreeFindRoot_FxnInst(){
		return ((CFTreeFindRoot_FxnInst != null)
	? (CFTreeFindRoot_FxnInst)
	: (CFTreeFindRoot_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTreeFindRoot", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFTreeRefCFType CFTreeFindRoot(final com.apple.jobjc.corefoundation.CFTreeRefCFType tree){
			final com.apple.jobjc.Invoke.FunCall CFTreeFindRoot_FxnInst = get_CFTreeFindRoot_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTreeFindRoot_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tree);
		CFTreeFindRoot_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFTreeRefCFType returnValue = (com.apple.jobjc.corefoundation.CFTreeRefCFType) new com.apple.jobjc.corefoundation.CFTreeRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFTreeGetChildAtIndex_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTreeGetChildAtIndex_FxnInst(){
		return ((CFTreeGetChildAtIndex_FxnInst != null)
	? (CFTreeGetChildAtIndex_FxnInst)
	: (CFTreeGetChildAtIndex_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTreeGetChildAtIndex", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFTreeRefCFType CFTreeGetChildAtIndex(final com.apple.jobjc.corefoundation.CFTreeRefCFType tree, final long idx){
			final com.apple.jobjc.Invoke.FunCall CFTreeGetChildAtIndex_FxnInst = get_CFTreeGetChildAtIndex_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTreeGetChildAtIndex_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tree);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, idx);
		CFTreeGetChildAtIndex_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFTreeRefCFType returnValue = (com.apple.jobjc.corefoundation.CFTreeRefCFType) new com.apple.jobjc.corefoundation.CFTreeRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFTreeGetChildCount_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTreeGetChildCount_FxnInst(){
		return ((CFTreeGetChildCount_FxnInst != null)
	? (CFTreeGetChildCount_FxnInst)
	: (CFTreeGetChildCount_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTreeGetChildCount", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFTreeGetChildCount(final com.apple.jobjc.corefoundation.CFTreeRefCFType tree){
			final com.apple.jobjc.Invoke.FunCall CFTreeGetChildCount_FxnInst = get_CFTreeGetChildCount_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTreeGetChildCount_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tree);
		CFTreeGetChildCount_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFTreeGetChildren_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTreeGetChildren_FxnInst(){
		return ((CFTreeGetChildren_FxnInst != null)
	? (CFTreeGetChildren_FxnInst)
	: (CFTreeGetChildren_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTreeGetChildren", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFTreeGetChildren(final com.apple.jobjc.corefoundation.CFTreeRefCFType tree, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFTreeRefCFType> children){
			final com.apple.jobjc.Invoke.FunCall CFTreeGetChildren_FxnInst = get_CFTreeGetChildren_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTreeGetChildren_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tree);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, children);
		CFTreeGetChildren_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFTreeGetContext_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTreeGetContext_FxnInst(){
		return ((CFTreeGetContext_FxnInst != null)
	? (CFTreeGetContext_FxnInst)
	: (CFTreeGetContext_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTreeGetContext", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFTreeGetContext(final com.apple.jobjc.corefoundation.CFTreeRefCFType tree, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFTreeContext> context){
			final com.apple.jobjc.Invoke.FunCall CFTreeGetContext_FxnInst = get_CFTreeGetContext_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTreeGetContext_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tree);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFTreeGetContext_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFTreeGetFirstChild_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTreeGetFirstChild_FxnInst(){
		return ((CFTreeGetFirstChild_FxnInst != null)
	? (CFTreeGetFirstChild_FxnInst)
	: (CFTreeGetFirstChild_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTreeGetFirstChild", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFTreeRefCFType CFTreeGetFirstChild(final com.apple.jobjc.corefoundation.CFTreeRefCFType tree){
			final com.apple.jobjc.Invoke.FunCall CFTreeGetFirstChild_FxnInst = get_CFTreeGetFirstChild_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTreeGetFirstChild_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tree);
		CFTreeGetFirstChild_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFTreeRefCFType returnValue = (com.apple.jobjc.corefoundation.CFTreeRefCFType) new com.apple.jobjc.corefoundation.CFTreeRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFTreeGetNextSibling_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTreeGetNextSibling_FxnInst(){
		return ((CFTreeGetNextSibling_FxnInst != null)
	? (CFTreeGetNextSibling_FxnInst)
	: (CFTreeGetNextSibling_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTreeGetNextSibling", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFTreeRefCFType CFTreeGetNextSibling(final com.apple.jobjc.corefoundation.CFTreeRefCFType tree){
			final com.apple.jobjc.Invoke.FunCall CFTreeGetNextSibling_FxnInst = get_CFTreeGetNextSibling_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTreeGetNextSibling_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tree);
		CFTreeGetNextSibling_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFTreeRefCFType returnValue = (com.apple.jobjc.corefoundation.CFTreeRefCFType) new com.apple.jobjc.corefoundation.CFTreeRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFTreeGetParent_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTreeGetParent_FxnInst(){
		return ((CFTreeGetParent_FxnInst != null)
	? (CFTreeGetParent_FxnInst)
	: (CFTreeGetParent_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTreeGetParent", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFTreeRefCFType CFTreeGetParent(final com.apple.jobjc.corefoundation.CFTreeRefCFType tree){
			final com.apple.jobjc.Invoke.FunCall CFTreeGetParent_FxnInst = get_CFTreeGetParent_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTreeGetParent_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tree);
		CFTreeGetParent_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFTreeRefCFType returnValue = (com.apple.jobjc.corefoundation.CFTreeRefCFType) new com.apple.jobjc.corefoundation.CFTreeRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFTreeGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTreeGetTypeID_FxnInst(){
		return ((CFTreeGetTypeID_FxnInst != null)
	? (CFTreeGetTypeID_FxnInst)
	: (CFTreeGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTreeGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFTreeGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFTreeGetTypeID_FxnInst = get_CFTreeGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTreeGetTypeID_FxnInst.init(nativeBuffer);
		CFTreeGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFTreeInsertSibling_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTreeInsertSibling_FxnInst(){
		return ((CFTreeInsertSibling_FxnInst != null)
	? (CFTreeInsertSibling_FxnInst)
	: (CFTreeInsertSibling_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTreeInsertSibling", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFTreeInsertSibling(final com.apple.jobjc.corefoundation.CFTreeRefCFType tree, final com.apple.jobjc.corefoundation.CFTreeRefCFType newSibling){
			final com.apple.jobjc.Invoke.FunCall CFTreeInsertSibling_FxnInst = get_CFTreeInsertSibling_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTreeInsertSibling_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tree);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, newSibling);
		CFTreeInsertSibling_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFTreePrependChild_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTreePrependChild_FxnInst(){
		return ((CFTreePrependChild_FxnInst != null)
	? (CFTreePrependChild_FxnInst)
	: (CFTreePrependChild_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTreePrependChild", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFTreePrependChild(final com.apple.jobjc.corefoundation.CFTreeRefCFType tree, final com.apple.jobjc.corefoundation.CFTreeRefCFType newChild){
			final com.apple.jobjc.Invoke.FunCall CFTreePrependChild_FxnInst = get_CFTreePrependChild_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTreePrependChild_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tree);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, newChild);
		CFTreePrependChild_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFTreeRemove_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTreeRemove_FxnInst(){
		return ((CFTreeRemove_FxnInst != null)
	? (CFTreeRemove_FxnInst)
	: (CFTreeRemove_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTreeRemove", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFTreeRemove(final com.apple.jobjc.corefoundation.CFTreeRefCFType tree){
			final com.apple.jobjc.Invoke.FunCall CFTreeRemove_FxnInst = get_CFTreeRemove_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTreeRemove_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tree);
		CFTreeRemove_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFTreeRemoveAllChildren_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTreeRemoveAllChildren_FxnInst(){
		return ((CFTreeRemoveAllChildren_FxnInst != null)
	? (CFTreeRemoveAllChildren_FxnInst)
	: (CFTreeRemoveAllChildren_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTreeRemoveAllChildren", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFTreeRemoveAllChildren(final com.apple.jobjc.corefoundation.CFTreeRefCFType tree){
			final com.apple.jobjc.Invoke.FunCall CFTreeRemoveAllChildren_FxnInst = get_CFTreeRemoveAllChildren_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTreeRemoveAllChildren_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tree);
		CFTreeRemoveAllChildren_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFTreeSetContext_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTreeSetContext_FxnInst(){
		return ((CFTreeSetContext_FxnInst != null)
	? (CFTreeSetContext_FxnInst)
	: (CFTreeSetContext_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTreeSetContext", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFTreeSetContext(final com.apple.jobjc.corefoundation.CFTreeRefCFType tree, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFTreeContext> context){
			final com.apple.jobjc.Invoke.FunCall CFTreeSetContext_FxnInst = get_CFTreeSetContext_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTreeSetContext_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tree);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFTreeSetContext_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFTreeSortChildren_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFTreeSortChildren_FxnInst(){
		return ((CFTreeSortChildren_FxnInst != null)
	? (CFTreeSortChildren_FxnInst)
	: (CFTreeSortChildren_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFTreeSortChildren", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFTreeSortChildren(final com.apple.jobjc.corefoundation.CFTreeRefCFType tree, final Object /* CFComparatorFunction (^?, ^?) */ comparator, final com.apple.jobjc.Pointer<Void> context){
			final com.apple.jobjc.Invoke.FunCall CFTreeSortChildren_FxnInst = get_CFTreeSortChildren_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFTreeSortChildren_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, tree);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, comparator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFTreeSortChildren_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCanBeDecomposed_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCanBeDecomposed_FxnInst(){
		return ((CFURLCanBeDecomposed_FxnInst != null)
	? (CFURLCanBeDecomposed_FxnInst)
	: (CFURLCanBeDecomposed_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCanBeDecomposed", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFURLCanBeDecomposed(final com.apple.jobjc.corefoundation.CFURLRefCFType anURL){
			final com.apple.jobjc.Invoke.FunCall CFURLCanBeDecomposed_FxnInst = get_CFURLCanBeDecomposed_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCanBeDecomposed_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, anURL);
		CFURLCanBeDecomposed_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLClearResourcePropertyCache_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLClearResourcePropertyCache_FxnInst(){
		return ((CFURLClearResourcePropertyCache_FxnInst != null)
	? (CFURLClearResourcePropertyCache_FxnInst)
	: (CFURLClearResourcePropertyCache_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLClearResourcePropertyCache", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFURLClearResourcePropertyCache(final com.apple.jobjc.corefoundation.CFURLRefCFType url){
			final com.apple.jobjc.Invoke.FunCall CFURLClearResourcePropertyCache_FxnInst = get_CFURLClearResourcePropertyCache_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLClearResourcePropertyCache_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		CFURLClearResourcePropertyCache_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLClearResourcePropertyCacheForKey_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLClearResourcePropertyCacheForKey_FxnInst(){
		return ((CFURLClearResourcePropertyCacheForKey_FxnInst != null)
	? (CFURLClearResourcePropertyCacheForKey_FxnInst)
	: (CFURLClearResourcePropertyCacheForKey_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLClearResourcePropertyCacheForKey", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFURLClearResourcePropertyCacheForKey(final com.apple.jobjc.corefoundation.CFURLRefCFType url, final com.apple.jobjc.corefoundation.CFStringRefCFType key){
			final com.apple.jobjc.Invoke.FunCall CFURLClearResourcePropertyCacheForKey_FxnInst = get_CFURLClearResourcePropertyCacheForKey_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLClearResourcePropertyCacheForKey_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, key);
		CFURLClearResourcePropertyCacheForKey_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCopyAbsoluteURL_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCopyAbsoluteURL_FxnInst(){
		return ((CFURLCopyAbsoluteURL_FxnInst != null)
	? (CFURLCopyAbsoluteURL_FxnInst)
	: (CFURLCopyAbsoluteURL_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCopyAbsoluteURL", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFURLCopyAbsoluteURL(final com.apple.jobjc.corefoundation.CFURLRefCFType relativeURL){
			final com.apple.jobjc.Invoke.FunCall CFURLCopyAbsoluteURL_FxnInst = get_CFURLCopyAbsoluteURL_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCopyAbsoluteURL_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, relativeURL);
		CFURLCopyAbsoluteURL_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCopyFileSystemPath_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCopyFileSystemPath_FxnInst(){
		return ((CFURLCopyFileSystemPath_FxnInst != null)
	? (CFURLCopyFileSystemPath_FxnInst)
	: (CFURLCopyFileSystemPath_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCopyFileSystemPath", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFURLCopyFileSystemPath(final com.apple.jobjc.corefoundation.CFURLRefCFType anURL, final long pathStyle){
			final com.apple.jobjc.Invoke.FunCall CFURLCopyFileSystemPath_FxnInst = get_CFURLCopyFileSystemPath_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCopyFileSystemPath_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, anURL);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, pathStyle);
		CFURLCopyFileSystemPath_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCopyFragment_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCopyFragment_FxnInst(){
		return ((CFURLCopyFragment_FxnInst != null)
	? (CFURLCopyFragment_FxnInst)
	: (CFURLCopyFragment_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCopyFragment", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFURLCopyFragment(final com.apple.jobjc.corefoundation.CFURLRefCFType anURL, final com.apple.jobjc.corefoundation.CFStringRefCFType charactersToLeaveEscaped){
			final com.apple.jobjc.Invoke.FunCall CFURLCopyFragment_FxnInst = get_CFURLCopyFragment_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCopyFragment_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, anURL);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, charactersToLeaveEscaped);
		CFURLCopyFragment_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCopyHostName_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCopyHostName_FxnInst(){
		return ((CFURLCopyHostName_FxnInst != null)
	? (CFURLCopyHostName_FxnInst)
	: (CFURLCopyHostName_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCopyHostName", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFURLCopyHostName(final com.apple.jobjc.corefoundation.CFURLRefCFType anURL){
			final com.apple.jobjc.Invoke.FunCall CFURLCopyHostName_FxnInst = get_CFURLCopyHostName_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCopyHostName_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, anURL);
		CFURLCopyHostName_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCopyLastPathComponent_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCopyLastPathComponent_FxnInst(){
		return ((CFURLCopyLastPathComponent_FxnInst != null)
	? (CFURLCopyLastPathComponent_FxnInst)
	: (CFURLCopyLastPathComponent_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCopyLastPathComponent", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFURLCopyLastPathComponent(final com.apple.jobjc.corefoundation.CFURLRefCFType url){
			final com.apple.jobjc.Invoke.FunCall CFURLCopyLastPathComponent_FxnInst = get_CFURLCopyLastPathComponent_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCopyLastPathComponent_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		CFURLCopyLastPathComponent_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCopyNetLocation_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCopyNetLocation_FxnInst(){
		return ((CFURLCopyNetLocation_FxnInst != null)
	? (CFURLCopyNetLocation_FxnInst)
	: (CFURLCopyNetLocation_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCopyNetLocation", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFURLCopyNetLocation(final com.apple.jobjc.corefoundation.CFURLRefCFType anURL){
			final com.apple.jobjc.Invoke.FunCall CFURLCopyNetLocation_FxnInst = get_CFURLCopyNetLocation_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCopyNetLocation_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, anURL);
		CFURLCopyNetLocation_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCopyParameterString_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCopyParameterString_FxnInst(){
		return ((CFURLCopyParameterString_FxnInst != null)
	? (CFURLCopyParameterString_FxnInst)
	: (CFURLCopyParameterString_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCopyParameterString", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFURLCopyParameterString(final com.apple.jobjc.corefoundation.CFURLRefCFType anURL, final com.apple.jobjc.corefoundation.CFStringRefCFType charactersToLeaveEscaped){
			final com.apple.jobjc.Invoke.FunCall CFURLCopyParameterString_FxnInst = get_CFURLCopyParameterString_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCopyParameterString_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, anURL);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, charactersToLeaveEscaped);
		CFURLCopyParameterString_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCopyPassword_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCopyPassword_FxnInst(){
		return ((CFURLCopyPassword_FxnInst != null)
	? (CFURLCopyPassword_FxnInst)
	: (CFURLCopyPassword_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCopyPassword", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFURLCopyPassword(final com.apple.jobjc.corefoundation.CFURLRefCFType anURL){
			final com.apple.jobjc.Invoke.FunCall CFURLCopyPassword_FxnInst = get_CFURLCopyPassword_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCopyPassword_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, anURL);
		CFURLCopyPassword_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCopyPath_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCopyPath_FxnInst(){
		return ((CFURLCopyPath_FxnInst != null)
	? (CFURLCopyPath_FxnInst)
	: (CFURLCopyPath_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCopyPath", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFURLCopyPath(final com.apple.jobjc.corefoundation.CFURLRefCFType anURL){
			final com.apple.jobjc.Invoke.FunCall CFURLCopyPath_FxnInst = get_CFURLCopyPath_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCopyPath_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, anURL);
		CFURLCopyPath_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCopyPathExtension_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCopyPathExtension_FxnInst(){
		return ((CFURLCopyPathExtension_FxnInst != null)
	? (CFURLCopyPathExtension_FxnInst)
	: (CFURLCopyPathExtension_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCopyPathExtension", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFURLCopyPathExtension(final com.apple.jobjc.corefoundation.CFURLRefCFType url){
			final com.apple.jobjc.Invoke.FunCall CFURLCopyPathExtension_FxnInst = get_CFURLCopyPathExtension_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCopyPathExtension_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		CFURLCopyPathExtension_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCopyQueryString_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCopyQueryString_FxnInst(){
		return ((CFURLCopyQueryString_FxnInst != null)
	? (CFURLCopyQueryString_FxnInst)
	: (CFURLCopyQueryString_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCopyQueryString", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFURLCopyQueryString(final com.apple.jobjc.corefoundation.CFURLRefCFType anURL, final com.apple.jobjc.corefoundation.CFStringRefCFType charactersToLeaveEscaped){
			final com.apple.jobjc.Invoke.FunCall CFURLCopyQueryString_FxnInst = get_CFURLCopyQueryString_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCopyQueryString_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, anURL);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, charactersToLeaveEscaped);
		CFURLCopyQueryString_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCopyResourcePropertiesForKeys_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCopyResourcePropertiesForKeys_FxnInst(){
		return ((CFURLCopyResourcePropertiesForKeys_FxnInst != null)
	? (CFURLCopyResourcePropertiesForKeys_FxnInst)
	: (CFURLCopyResourcePropertiesForKeys_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCopyResourcePropertiesForKeys", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDictionaryRefCFType CFURLCopyResourcePropertiesForKeys(final com.apple.jobjc.corefoundation.CFURLRefCFType url, final com.apple.jobjc.corefoundation.CFArrayRefCFType keys, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFErrorRefCFType> error){
			final com.apple.jobjc.Invoke.FunCall CFURLCopyResourcePropertiesForKeys_FxnInst = get_CFURLCopyResourcePropertiesForKeys_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCopyResourcePropertiesForKeys_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, keys);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, error);
		CFURLCopyResourcePropertiesForKeys_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDictionaryRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDictionaryRefCFType) new com.apple.jobjc.corefoundation.CFDictionaryRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCopyResourcePropertyForKey_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCopyResourcePropertyForKey_FxnInst(){
		return ((CFURLCopyResourcePropertyForKey_FxnInst != null)
	? (CFURLCopyResourcePropertyForKey_FxnInst)
	: (CFURLCopyResourcePropertyForKey_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCopyResourcePropertyForKey", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFURLCopyResourcePropertyForKey(final com.apple.jobjc.corefoundation.CFURLRefCFType url, final com.apple.jobjc.corefoundation.CFStringRefCFType key, final com.apple.jobjc.Pointer<Void> propertyValueTypeRefPtr, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFErrorRefCFType> error){
			final com.apple.jobjc.Invoke.FunCall CFURLCopyResourcePropertyForKey_FxnInst = get_CFURLCopyResourcePropertyForKey_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCopyResourcePropertyForKey_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, key);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, propertyValueTypeRefPtr);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, error);
		CFURLCopyResourcePropertyForKey_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCopyResourceSpecifier_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCopyResourceSpecifier_FxnInst(){
		return ((CFURLCopyResourceSpecifier_FxnInst != null)
	? (CFURLCopyResourceSpecifier_FxnInst)
	: (CFURLCopyResourceSpecifier_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCopyResourceSpecifier", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFURLCopyResourceSpecifier(final com.apple.jobjc.corefoundation.CFURLRefCFType anURL){
			final com.apple.jobjc.Invoke.FunCall CFURLCopyResourceSpecifier_FxnInst = get_CFURLCopyResourceSpecifier_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCopyResourceSpecifier_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, anURL);
		CFURLCopyResourceSpecifier_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCopyScheme_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCopyScheme_FxnInst(){
		return ((CFURLCopyScheme_FxnInst != null)
	? (CFURLCopyScheme_FxnInst)
	: (CFURLCopyScheme_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCopyScheme", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFURLCopyScheme(final com.apple.jobjc.corefoundation.CFURLRefCFType anURL){
			final com.apple.jobjc.Invoke.FunCall CFURLCopyScheme_FxnInst = get_CFURLCopyScheme_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCopyScheme_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, anURL);
		CFURLCopyScheme_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCopyStrictPath_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCopyStrictPath_FxnInst(){
		return ((CFURLCopyStrictPath_FxnInst != null)
	? (CFURLCopyStrictPath_FxnInst)
	: (CFURLCopyStrictPath_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCopyStrictPath", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFURLCopyStrictPath(final com.apple.jobjc.corefoundation.CFURLRefCFType anURL, final com.apple.jobjc.Pointer<java.lang.Boolean> isAbsolute){
			final com.apple.jobjc.Invoke.FunCall CFURLCopyStrictPath_FxnInst = get_CFURLCopyStrictPath_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCopyStrictPath_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, anURL);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, isAbsolute);
		CFURLCopyStrictPath_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCopyUserName_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCopyUserName_FxnInst(){
		return ((CFURLCopyUserName_FxnInst != null)
	? (CFURLCopyUserName_FxnInst)
	: (CFURLCopyUserName_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCopyUserName", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFURLCopyUserName(final com.apple.jobjc.corefoundation.CFURLRefCFType anURL){
			final com.apple.jobjc.Invoke.FunCall CFURLCopyUserName_FxnInst = get_CFURLCopyUserName_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCopyUserName_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, anURL);
		CFURLCopyUserName_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCreateAbsoluteURLWithBytes_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCreateAbsoluteURLWithBytes_FxnInst(){
		return ((CFURLCreateAbsoluteURLWithBytes_FxnInst != null)
	? (CFURLCreateAbsoluteURLWithBytes_FxnInst)
	: (CFURLCreateAbsoluteURLWithBytes_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCreateAbsoluteURLWithBytes", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.BoolCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFURLCreateAbsoluteURLWithBytes(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.Pointer<java.lang.Byte> relativeURLBytes, final long length, final int encoding, final com.apple.jobjc.corefoundation.CFURLRefCFType baseURL, final boolean useCompatibilityMode){
			final com.apple.jobjc.Invoke.FunCall CFURLCreateAbsoluteURLWithBytes_FxnInst = get_CFURLCreateAbsoluteURLWithBytes_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCreateAbsoluteURLWithBytes_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, relativeURLBytes);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, length);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, encoding);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, baseURL);
		com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.push(nativeBuffer, useCompatibilityMode);
		CFURLCreateAbsoluteURLWithBytes_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCreateBookmarkData_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCreateBookmarkData_FxnInst(){
		return ((CFURLCreateBookmarkData_FxnInst != null)
	? (CFURLCreateBookmarkData_FxnInst)
	: (CFURLCreateBookmarkData_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCreateBookmarkData", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDataRefCFType CFURLCreateBookmarkData(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFURLRefCFType url, final long options, final com.apple.jobjc.corefoundation.CFArrayRefCFType resourcePropertiesToInclude, final com.apple.jobjc.corefoundation.CFURLRefCFType relativeToURL, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFErrorRefCFType> error){
			final com.apple.jobjc.Invoke.FunCall CFURLCreateBookmarkData_FxnInst = get_CFURLCreateBookmarkData_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCreateBookmarkData_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, options);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, resourcePropertiesToInclude);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, relativeToURL);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, error);
		CFURLCreateBookmarkData_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDataRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDataRefCFType) new com.apple.jobjc.corefoundation.CFDataRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCreateBookmarkDataFromAliasRecord_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCreateBookmarkDataFromAliasRecord_FxnInst(){
		return ((CFURLCreateBookmarkDataFromAliasRecord_FxnInst != null)
	? (CFURLCreateBookmarkDataFromAliasRecord_FxnInst)
	: (CFURLCreateBookmarkDataFromAliasRecord_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCreateBookmarkDataFromAliasRecord", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDataRefCFType CFURLCreateBookmarkDataFromAliasRecord(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocatorRef, final com.apple.jobjc.corefoundation.CFDataRefCFType aliasRecordDataRef){
			final com.apple.jobjc.Invoke.FunCall CFURLCreateBookmarkDataFromAliasRecord_FxnInst = get_CFURLCreateBookmarkDataFromAliasRecord_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCreateBookmarkDataFromAliasRecord_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocatorRef);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, aliasRecordDataRef);
		CFURLCreateBookmarkDataFromAliasRecord_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDataRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDataRefCFType) new com.apple.jobjc.corefoundation.CFDataRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCreateBookmarkDataFromFile_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCreateBookmarkDataFromFile_FxnInst(){
		return ((CFURLCreateBookmarkDataFromFile_FxnInst != null)
	? (CFURLCreateBookmarkDataFromFile_FxnInst)
	: (CFURLCreateBookmarkDataFromFile_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCreateBookmarkDataFromFile", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDataRefCFType CFURLCreateBookmarkDataFromFile(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFURLRefCFType fileURL, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFErrorRefCFType> errorRef){
			final com.apple.jobjc.Invoke.FunCall CFURLCreateBookmarkDataFromFile_FxnInst = get_CFURLCreateBookmarkDataFromFile_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCreateBookmarkDataFromFile_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, fileURL);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, errorRef);
		CFURLCreateBookmarkDataFromFile_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDataRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDataRefCFType) new com.apple.jobjc.corefoundation.CFDataRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCreateByResolvingBookmarkData_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCreateByResolvingBookmarkData_FxnInst(){
		return ((CFURLCreateByResolvingBookmarkData_FxnInst != null)
	? (CFURLCreateByResolvingBookmarkData_FxnInst)
	: (CFURLCreateByResolvingBookmarkData_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCreateByResolvingBookmarkData", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFURLCreateByResolvingBookmarkData(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFDataRefCFType bookmark, final long options, final com.apple.jobjc.corefoundation.CFURLRefCFType relativeToURL, final com.apple.jobjc.corefoundation.CFArrayRefCFType resourcePropertiesToInclude, final com.apple.jobjc.Pointer<java.lang.Boolean> isStale, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFErrorRefCFType> error){
			final com.apple.jobjc.Invoke.FunCall CFURLCreateByResolvingBookmarkData_FxnInst = get_CFURLCreateByResolvingBookmarkData_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCreateByResolvingBookmarkData_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bookmark);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, options);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, relativeToURL);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, resourcePropertiesToInclude);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, isStale);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, error);
		CFURLCreateByResolvingBookmarkData_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCreateCopyAppendingPathComponent_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCreateCopyAppendingPathComponent_FxnInst(){
		return ((CFURLCreateCopyAppendingPathComponent_FxnInst != null)
	? (CFURLCreateCopyAppendingPathComponent_FxnInst)
	: (CFURLCreateCopyAppendingPathComponent_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCreateCopyAppendingPathComponent", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.BoolCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFURLCreateCopyAppendingPathComponent(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFURLRefCFType url, final com.apple.jobjc.corefoundation.CFStringRefCFType pathComponent, final boolean isDirectory){
			final com.apple.jobjc.Invoke.FunCall CFURLCreateCopyAppendingPathComponent_FxnInst = get_CFURLCreateCopyAppendingPathComponent_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCreateCopyAppendingPathComponent_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, pathComponent);
		com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.push(nativeBuffer, isDirectory);
		CFURLCreateCopyAppendingPathComponent_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCreateCopyAppendingPathExtension_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCreateCopyAppendingPathExtension_FxnInst(){
		return ((CFURLCreateCopyAppendingPathExtension_FxnInst != null)
	? (CFURLCreateCopyAppendingPathExtension_FxnInst)
	: (CFURLCreateCopyAppendingPathExtension_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCreateCopyAppendingPathExtension", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFURLCreateCopyAppendingPathExtension(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFURLRefCFType url, final com.apple.jobjc.corefoundation.CFStringRefCFType extension){
			final com.apple.jobjc.Invoke.FunCall CFURLCreateCopyAppendingPathExtension_FxnInst = get_CFURLCreateCopyAppendingPathExtension_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCreateCopyAppendingPathExtension_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, extension);
		CFURLCreateCopyAppendingPathExtension_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCreateCopyDeletingLastPathComponent_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCreateCopyDeletingLastPathComponent_FxnInst(){
		return ((CFURLCreateCopyDeletingLastPathComponent_FxnInst != null)
	? (CFURLCreateCopyDeletingLastPathComponent_FxnInst)
	: (CFURLCreateCopyDeletingLastPathComponent_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCreateCopyDeletingLastPathComponent", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFURLCreateCopyDeletingLastPathComponent(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFURLRefCFType url){
			final com.apple.jobjc.Invoke.FunCall CFURLCreateCopyDeletingLastPathComponent_FxnInst = get_CFURLCreateCopyDeletingLastPathComponent_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCreateCopyDeletingLastPathComponent_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		CFURLCreateCopyDeletingLastPathComponent_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCreateCopyDeletingPathExtension_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCreateCopyDeletingPathExtension_FxnInst(){
		return ((CFURLCreateCopyDeletingPathExtension_FxnInst != null)
	? (CFURLCreateCopyDeletingPathExtension_FxnInst)
	: (CFURLCreateCopyDeletingPathExtension_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCreateCopyDeletingPathExtension", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFURLCreateCopyDeletingPathExtension(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFURLRefCFType url){
			final com.apple.jobjc.Invoke.FunCall CFURLCreateCopyDeletingPathExtension_FxnInst = get_CFURLCreateCopyDeletingPathExtension_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCreateCopyDeletingPathExtension_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		CFURLCreateCopyDeletingPathExtension_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCreateData_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCreateData_FxnInst(){
		return ((CFURLCreateData_FxnInst != null)
	? (CFURLCreateData_FxnInst)
	: (CFURLCreateData_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCreateData", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder, com.apple.jobjc.PrimitiveCoder.BoolCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDataRefCFType CFURLCreateData(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFURLRefCFType url, final int encoding, final boolean escapeWhitespace){
			final com.apple.jobjc.Invoke.FunCall CFURLCreateData_FxnInst = get_CFURLCreateData_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCreateData_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, encoding);
		com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.push(nativeBuffer, escapeWhitespace);
		CFURLCreateData_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDataRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDataRefCFType) new com.apple.jobjc.corefoundation.CFDataRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCreateDataAndPropertiesFromResource_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCreateDataAndPropertiesFromResource_FxnInst(){
		return ((CFURLCreateDataAndPropertiesFromResource_FxnInst != null)
	? (CFURLCreateDataAndPropertiesFromResource_FxnInst)
	: (CFURLCreateDataAndPropertiesFromResource_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCreateDataAndPropertiesFromResource", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFURLCreateDataAndPropertiesFromResource(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFURLRefCFType url, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFDataRefCFType> resourceData, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFDictionaryRefCFType> properties, final com.apple.jobjc.corefoundation.CFArrayRefCFType desiredProperties, final com.apple.jobjc.Pointer<java.lang.Integer> errorCode){
			final com.apple.jobjc.Invoke.FunCall CFURLCreateDataAndPropertiesFromResource_FxnInst = get_CFURLCreateDataAndPropertiesFromResource_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCreateDataAndPropertiesFromResource_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, resourceData);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, properties);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, desiredProperties);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, errorCode);
		CFURLCreateDataAndPropertiesFromResource_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCreateFilePathURL_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCreateFilePathURL_FxnInst(){
		return ((CFURLCreateFilePathURL_FxnInst != null)
	? (CFURLCreateFilePathURL_FxnInst)
	: (CFURLCreateFilePathURL_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCreateFilePathURL", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFURLCreateFilePathURL(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFURLRefCFType url, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFErrorRefCFType> error){
			final com.apple.jobjc.Invoke.FunCall CFURLCreateFilePathURL_FxnInst = get_CFURLCreateFilePathURL_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCreateFilePathURL_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, error);
		CFURLCreateFilePathURL_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCreateFileReferenceURL_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCreateFileReferenceURL_FxnInst(){
		return ((CFURLCreateFileReferenceURL_FxnInst != null)
	? (CFURLCreateFileReferenceURL_FxnInst)
	: (CFURLCreateFileReferenceURL_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCreateFileReferenceURL", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFURLCreateFileReferenceURL(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFURLRefCFType url, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFErrorRefCFType> error){
			final com.apple.jobjc.Invoke.FunCall CFURLCreateFileReferenceURL_FxnInst = get_CFURLCreateFileReferenceURL_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCreateFileReferenceURL_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, error);
		CFURLCreateFileReferenceURL_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCreateFromFSRef_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCreateFromFSRef_FxnInst(){
		return ((CFURLCreateFromFSRef_FxnInst != null)
	? (CFURLCreateFromFSRef_FxnInst)
	: (CFURLCreateFromFSRef_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCreateFromFSRef", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFURLCreateFromFSRef(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final Object /* structFSRef* (^{FSRef=[80C]}, ^{FSRef=[80C]}) */ fsRef){
			final com.apple.jobjc.Invoke.FunCall CFURLCreateFromFSRef_FxnInst = get_CFURLCreateFromFSRef_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCreateFromFSRef_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, fsRef);
		CFURLCreateFromFSRef_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCreateFromFileSystemRepresentation_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCreateFromFileSystemRepresentation_FxnInst(){
		return ((CFURLCreateFromFileSystemRepresentation_FxnInst != null)
	? (CFURLCreateFromFileSystemRepresentation_FxnInst)
	: (CFURLCreateFromFileSystemRepresentation_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCreateFromFileSystemRepresentation", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.PrimitiveCoder.BoolCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFURLCreateFromFileSystemRepresentation(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.Pointer<java.lang.Byte> buffer, final long bufLen, final boolean isDirectory){
			final com.apple.jobjc.Invoke.FunCall CFURLCreateFromFileSystemRepresentation_FxnInst = get_CFURLCreateFromFileSystemRepresentation_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCreateFromFileSystemRepresentation_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, buffer);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, bufLen);
		com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.push(nativeBuffer, isDirectory);
		CFURLCreateFromFileSystemRepresentation_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCreateFromFileSystemRepresentationRelativeToBase_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCreateFromFileSystemRepresentationRelativeToBase_FxnInst(){
		return ((CFURLCreateFromFileSystemRepresentationRelativeToBase_FxnInst != null)
	? (CFURLCreateFromFileSystemRepresentationRelativeToBase_FxnInst)
	: (CFURLCreateFromFileSystemRepresentationRelativeToBase_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCreateFromFileSystemRepresentationRelativeToBase", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFURLCreateFromFileSystemRepresentationRelativeToBase(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.Pointer<java.lang.Byte> buffer, final long bufLen, final boolean isDirectory, final com.apple.jobjc.corefoundation.CFURLRefCFType baseURL){
			final com.apple.jobjc.Invoke.FunCall CFURLCreateFromFileSystemRepresentationRelativeToBase_FxnInst = get_CFURLCreateFromFileSystemRepresentationRelativeToBase_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCreateFromFileSystemRepresentationRelativeToBase_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, buffer);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, bufLen);
		com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.push(nativeBuffer, isDirectory);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, baseURL);
		CFURLCreateFromFileSystemRepresentationRelativeToBase_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCreatePropertyFromResource_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCreatePropertyFromResource_FxnInst(){
		return ((CFURLCreatePropertyFromResource_FxnInst != null)
	? (CFURLCreatePropertyFromResource_FxnInst)
	: (CFURLCreatePropertyFromResource_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCreatePropertyFromResource", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFTypeRefCFType CFURLCreatePropertyFromResource(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFURLRefCFType url, final com.apple.jobjc.corefoundation.CFStringRefCFType property, final com.apple.jobjc.Pointer<java.lang.Integer> errorCode){
			final com.apple.jobjc.Invoke.FunCall CFURLCreatePropertyFromResource_FxnInst = get_CFURLCreatePropertyFromResource_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCreatePropertyFromResource_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, property);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, errorCode);
		CFURLCreatePropertyFromResource_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFTypeRefCFType returnValue = (com.apple.jobjc.corefoundation.CFTypeRefCFType) new com.apple.jobjc.corefoundation.CFTypeRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCreateResourcePropertiesForKeysFromBookmarkData_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCreateResourcePropertiesForKeysFromBookmarkData_FxnInst(){
		return ((CFURLCreateResourcePropertiesForKeysFromBookmarkData_FxnInst != null)
	? (CFURLCreateResourcePropertiesForKeysFromBookmarkData_FxnInst)
	: (CFURLCreateResourcePropertiesForKeysFromBookmarkData_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCreateResourcePropertiesForKeysFromBookmarkData", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDictionaryRefCFType CFURLCreateResourcePropertiesForKeysFromBookmarkData(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFArrayRefCFType resourcePropertiesToReturn, final com.apple.jobjc.corefoundation.CFDataRefCFType bookmark){
			final com.apple.jobjc.Invoke.FunCall CFURLCreateResourcePropertiesForKeysFromBookmarkData_FxnInst = get_CFURLCreateResourcePropertiesForKeysFromBookmarkData_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCreateResourcePropertiesForKeysFromBookmarkData_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, resourcePropertiesToReturn);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bookmark);
		CFURLCreateResourcePropertiesForKeysFromBookmarkData_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDictionaryRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDictionaryRefCFType) new com.apple.jobjc.corefoundation.CFDictionaryRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCreateResourcePropertyForKeyFromBookmarkData_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCreateResourcePropertyForKeyFromBookmarkData_FxnInst(){
		return ((CFURLCreateResourcePropertyForKeyFromBookmarkData_FxnInst != null)
	? (CFURLCreateResourcePropertyForKeyFromBookmarkData_FxnInst)
	: (CFURLCreateResourcePropertyForKeyFromBookmarkData_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCreateResourcePropertyForKeyFromBookmarkData", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFTypeRefCFType CFURLCreateResourcePropertyForKeyFromBookmarkData(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFStringRefCFType resourcePropertyKey, final com.apple.jobjc.corefoundation.CFDataRefCFType bookmark){
			final com.apple.jobjc.Invoke.FunCall CFURLCreateResourcePropertyForKeyFromBookmarkData_FxnInst = get_CFURLCreateResourcePropertyForKeyFromBookmarkData_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCreateResourcePropertyForKeyFromBookmarkData_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, resourcePropertyKey);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bookmark);
		CFURLCreateResourcePropertyForKeyFromBookmarkData_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFTypeRefCFType returnValue = (com.apple.jobjc.corefoundation.CFTypeRefCFType) new com.apple.jobjc.corefoundation.CFTypeRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCreateStringByAddingPercentEscapes_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCreateStringByAddingPercentEscapes_FxnInst(){
		return ((CFURLCreateStringByAddingPercentEscapes_FxnInst != null)
	? (CFURLCreateStringByAddingPercentEscapes_FxnInst)
	: (CFURLCreateStringByAddingPercentEscapes_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCreateStringByAddingPercentEscapes", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFURLCreateStringByAddingPercentEscapes(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFStringRefCFType originalString, final com.apple.jobjc.corefoundation.CFStringRefCFType charactersToLeaveUnescaped, final com.apple.jobjc.corefoundation.CFStringRefCFType legalURLCharactersToBeEscaped, final int encoding){
			final com.apple.jobjc.Invoke.FunCall CFURLCreateStringByAddingPercentEscapes_FxnInst = get_CFURLCreateStringByAddingPercentEscapes_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCreateStringByAddingPercentEscapes_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, originalString);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, charactersToLeaveUnescaped);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, legalURLCharactersToBeEscaped);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, encoding);
		CFURLCreateStringByAddingPercentEscapes_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCreateStringByReplacingPercentEscapes_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCreateStringByReplacingPercentEscapes_FxnInst(){
		return ((CFURLCreateStringByReplacingPercentEscapes_FxnInst != null)
	? (CFURLCreateStringByReplacingPercentEscapes_FxnInst)
	: (CFURLCreateStringByReplacingPercentEscapes_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCreateStringByReplacingPercentEscapes", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFURLCreateStringByReplacingPercentEscapes(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFStringRefCFType originalString, final com.apple.jobjc.corefoundation.CFStringRefCFType charactersToLeaveEscaped){
			final com.apple.jobjc.Invoke.FunCall CFURLCreateStringByReplacingPercentEscapes_FxnInst = get_CFURLCreateStringByReplacingPercentEscapes_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCreateStringByReplacingPercentEscapes_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, originalString);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, charactersToLeaveEscaped);
		CFURLCreateStringByReplacingPercentEscapes_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCreateStringByReplacingPercentEscapesUsingEncoding_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCreateStringByReplacingPercentEscapesUsingEncoding_FxnInst(){
		return ((CFURLCreateStringByReplacingPercentEscapesUsingEncoding_FxnInst != null)
	? (CFURLCreateStringByReplacingPercentEscapesUsingEncoding_FxnInst)
	: (CFURLCreateStringByReplacingPercentEscapesUsingEncoding_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCreateStringByReplacingPercentEscapesUsingEncoding", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFURLCreateStringByReplacingPercentEscapesUsingEncoding(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFStringRefCFType origString, final com.apple.jobjc.corefoundation.CFStringRefCFType charsToLeaveEscaped, final int encoding){
			final com.apple.jobjc.Invoke.FunCall CFURLCreateStringByReplacingPercentEscapesUsingEncoding_FxnInst = get_CFURLCreateStringByReplacingPercentEscapesUsingEncoding_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCreateStringByReplacingPercentEscapesUsingEncoding_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, origString);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, charsToLeaveEscaped);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, encoding);
		CFURLCreateStringByReplacingPercentEscapesUsingEncoding_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCreateWithBytes_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCreateWithBytes_FxnInst(){
		return ((CFURLCreateWithBytes_FxnInst != null)
	? (CFURLCreateWithBytes_FxnInst)
	: (CFURLCreateWithBytes_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCreateWithBytes", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFURLCreateWithBytes(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.Pointer<java.lang.Byte> URLBytes, final long length, final int encoding, final com.apple.jobjc.corefoundation.CFURLRefCFType baseURL){
			final com.apple.jobjc.Invoke.FunCall CFURLCreateWithBytes_FxnInst = get_CFURLCreateWithBytes_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCreateWithBytes_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, URLBytes);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, length);
		com.apple.jobjc.MixedPrimitiveCoder.ULongUIntCoder.push(nativeBuffer, encoding);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, baseURL);
		CFURLCreateWithBytes_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCreateWithFileSystemPath_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCreateWithFileSystemPath_FxnInst(){
		return ((CFURLCreateWithFileSystemPath_FxnInst != null)
	? (CFURLCreateWithFileSystemPath_FxnInst)
	: (CFURLCreateWithFileSystemPath_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCreateWithFileSystemPath", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.PrimitiveCoder.BoolCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFURLCreateWithFileSystemPath(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFStringRefCFType filePath, final long pathStyle, final boolean isDirectory){
			final com.apple.jobjc.Invoke.FunCall CFURLCreateWithFileSystemPath_FxnInst = get_CFURLCreateWithFileSystemPath_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCreateWithFileSystemPath_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, filePath);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, pathStyle);
		com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.push(nativeBuffer, isDirectory);
		CFURLCreateWithFileSystemPath_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCreateWithFileSystemPathRelativeToBase_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCreateWithFileSystemPathRelativeToBase_FxnInst(){
		return ((CFURLCreateWithFileSystemPathRelativeToBase_FxnInst != null)
	? (CFURLCreateWithFileSystemPathRelativeToBase_FxnInst)
	: (CFURLCreateWithFileSystemPathRelativeToBase_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCreateWithFileSystemPathRelativeToBase", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFURLCreateWithFileSystemPathRelativeToBase(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFStringRefCFType filePath, final long pathStyle, final boolean isDirectory, final com.apple.jobjc.corefoundation.CFURLRefCFType baseURL){
			final com.apple.jobjc.Invoke.FunCall CFURLCreateWithFileSystemPathRelativeToBase_FxnInst = get_CFURLCreateWithFileSystemPathRelativeToBase_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCreateWithFileSystemPathRelativeToBase_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, filePath);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, pathStyle);
		com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.push(nativeBuffer, isDirectory);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, baseURL);
		CFURLCreateWithFileSystemPathRelativeToBase_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLCreateWithString_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLCreateWithString_FxnInst(){
		return ((CFURLCreateWithString_FxnInst != null)
	? (CFURLCreateWithString_FxnInst)
	: (CFURLCreateWithString_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLCreateWithString", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFURLCreateWithString(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFStringRefCFType URLString, final com.apple.jobjc.corefoundation.CFURLRefCFType baseURL){
			final com.apple.jobjc.Invoke.FunCall CFURLCreateWithString_FxnInst = get_CFURLCreateWithString_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLCreateWithString_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, URLString);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, baseURL);
		CFURLCreateWithString_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLDestroyResource_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLDestroyResource_FxnInst(){
		return ((CFURLDestroyResource_FxnInst != null)
	? (CFURLDestroyResource_FxnInst)
	: (CFURLDestroyResource_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLDestroyResource", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFURLDestroyResource(final com.apple.jobjc.corefoundation.CFURLRefCFType url, final com.apple.jobjc.Pointer<java.lang.Integer> errorCode){
			final com.apple.jobjc.Invoke.FunCall CFURLDestroyResource_FxnInst = get_CFURLDestroyResource_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLDestroyResource_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, errorCode);
		CFURLDestroyResource_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLEnumeratorCreateForDirectoryURL_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLEnumeratorCreateForDirectoryURL_FxnInst(){
		return ((CFURLEnumeratorCreateForDirectoryURL_FxnInst != null)
	? (CFURLEnumeratorCreateForDirectoryURL_FxnInst)
	: (CFURLEnumeratorCreateForDirectoryURL_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLEnumeratorCreateForDirectoryURL", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLEnumeratorRefCFType CFURLEnumeratorCreateForDirectoryURL(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFURLRefCFType directoryURL, final long option, final com.apple.jobjc.corefoundation.CFArrayRefCFType propertyKeys){
			final com.apple.jobjc.Invoke.FunCall CFURLEnumeratorCreateForDirectoryURL_FxnInst = get_CFURLEnumeratorCreateForDirectoryURL_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLEnumeratorCreateForDirectoryURL_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, directoryURL);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, option);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, propertyKeys);
		CFURLEnumeratorCreateForDirectoryURL_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLEnumeratorRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLEnumeratorRefCFType) new com.apple.jobjc.corefoundation.CFURLEnumeratorRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLEnumeratorCreateForMountedVolumes_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLEnumeratorCreateForMountedVolumes_FxnInst(){
		return ((CFURLEnumeratorCreateForMountedVolumes_FxnInst != null)
	? (CFURLEnumeratorCreateForMountedVolumes_FxnInst)
	: (CFURLEnumeratorCreateForMountedVolumes_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLEnumeratorCreateForMountedVolumes", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLEnumeratorRefCFType CFURLEnumeratorCreateForMountedVolumes(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final long option, final com.apple.jobjc.corefoundation.CFArrayRefCFType propertyKeys){
			final com.apple.jobjc.Invoke.FunCall CFURLEnumeratorCreateForMountedVolumes_FxnInst = get_CFURLEnumeratorCreateForMountedVolumes_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLEnumeratorCreateForMountedVolumes_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, option);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, propertyKeys);
		CFURLEnumeratorCreateForMountedVolumes_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLEnumeratorRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLEnumeratorRefCFType) new com.apple.jobjc.corefoundation.CFURLEnumeratorRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLEnumeratorGetDescendentLevel_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLEnumeratorGetDescendentLevel_FxnInst(){
		return ((CFURLEnumeratorGetDescendentLevel_FxnInst != null)
	? (CFURLEnumeratorGetDescendentLevel_FxnInst)
	: (CFURLEnumeratorGetDescendentLevel_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLEnumeratorGetDescendentLevel", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFURLEnumeratorGetDescendentLevel(final com.apple.jobjc.corefoundation.CFURLEnumeratorRefCFType enumerator){
			final com.apple.jobjc.Invoke.FunCall CFURLEnumeratorGetDescendentLevel_FxnInst = get_CFURLEnumeratorGetDescendentLevel_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLEnumeratorGetDescendentLevel_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, enumerator);
		CFURLEnumeratorGetDescendentLevel_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLEnumeratorGetNextURL_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLEnumeratorGetNextURL_FxnInst(){
		return ((CFURLEnumeratorGetNextURL_FxnInst != null)
	? (CFURLEnumeratorGetNextURL_FxnInst)
	: (CFURLEnumeratorGetNextURL_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLEnumeratorGetNextURL", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFURLEnumeratorGetNextURL(final com.apple.jobjc.corefoundation.CFURLEnumeratorRefCFType enumerator, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFURLRefCFType> url, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFErrorRefCFType> error){
			final com.apple.jobjc.Invoke.FunCall CFURLEnumeratorGetNextURL_FxnInst = get_CFURLEnumeratorGetNextURL_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLEnumeratorGetNextURL_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, enumerator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, error);
		CFURLEnumeratorGetNextURL_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLEnumeratorGetSourceDidChange_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLEnumeratorGetSourceDidChange_FxnInst(){
		return ((CFURLEnumeratorGetSourceDidChange_FxnInst != null)
	? (CFURLEnumeratorGetSourceDidChange_FxnInst)
	: (CFURLEnumeratorGetSourceDidChange_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLEnumeratorGetSourceDidChange", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFURLEnumeratorGetSourceDidChange(final com.apple.jobjc.corefoundation.CFURLEnumeratorRefCFType enumerator){
			final com.apple.jobjc.Invoke.FunCall CFURLEnumeratorGetSourceDidChange_FxnInst = get_CFURLEnumeratorGetSourceDidChange_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLEnumeratorGetSourceDidChange_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, enumerator);
		CFURLEnumeratorGetSourceDidChange_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLEnumeratorGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLEnumeratorGetTypeID_FxnInst(){
		return ((CFURLEnumeratorGetTypeID_FxnInst != null)
	? (CFURLEnumeratorGetTypeID_FxnInst)
	: (CFURLEnumeratorGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLEnumeratorGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFURLEnumeratorGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFURLEnumeratorGetTypeID_FxnInst = get_CFURLEnumeratorGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLEnumeratorGetTypeID_FxnInst.init(nativeBuffer);
		CFURLEnumeratorGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLEnumeratorSkipDescendents_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLEnumeratorSkipDescendents_FxnInst(){
		return ((CFURLEnumeratorSkipDescendents_FxnInst != null)
	? (CFURLEnumeratorSkipDescendents_FxnInst)
	: (CFURLEnumeratorSkipDescendents_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLEnumeratorSkipDescendents", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFURLEnumeratorSkipDescendents(final com.apple.jobjc.corefoundation.CFURLEnumeratorRefCFType enumerator){
			final com.apple.jobjc.Invoke.FunCall CFURLEnumeratorSkipDescendents_FxnInst = get_CFURLEnumeratorSkipDescendents_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLEnumeratorSkipDescendents_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, enumerator);
		CFURLEnumeratorSkipDescendents_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLGetBaseURL_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLGetBaseURL_FxnInst(){
		return ((CFURLGetBaseURL_FxnInst != null)
	? (CFURLGetBaseURL_FxnInst)
	: (CFURLGetBaseURL_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLGetBaseURL", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFURLGetBaseURL(final com.apple.jobjc.corefoundation.CFURLRefCFType anURL){
			final com.apple.jobjc.Invoke.FunCall CFURLGetBaseURL_FxnInst = get_CFURLGetBaseURL_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLGetBaseURL_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, anURL);
		CFURLGetBaseURL_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLGetByteRangeForComponent_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLGetByteRangeForComponent_FxnInst(){
		return ((CFURLGetByteRangeForComponent_FxnInst != null)
	? (CFURLGetByteRangeForComponent_FxnInst)
	: (CFURLGetByteRangeForComponent_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLGetByteRangeForComponent", com.apple.jobjc.corefoundation.CFRange.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFRange CFURLGetByteRangeForComponent(final com.apple.jobjc.corefoundation.CFURLRefCFType url, final long component, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFRange> rangeIncludingSeparators){
			final com.apple.jobjc.Invoke.FunCall CFURLGetByteRangeForComponent_FxnInst = get_CFURLGetByteRangeForComponent_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLGetByteRangeForComponent_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, component);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, rangeIncludingSeparators);
				com.apple.jobjc.corefoundation.CFRange returnValue = com.apple.jobjc.JObjC.getInstance(getRuntime()).CoreFoundation().makeCFRange();
		CFURLGetByteRangeForComponent_FxnInst.invoke(nativeBuffer, returnValue);
		
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLGetBytes_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLGetBytes_FxnInst(){
		return ((CFURLGetBytes_FxnInst != null)
	? (CFURLGetBytes_FxnInst)
	: (CFURLGetBytes_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLGetBytes", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public long CFURLGetBytes(final com.apple.jobjc.corefoundation.CFURLRefCFType url, final com.apple.jobjc.Pointer<java.lang.Byte> buffer, final long bufferLength){
			final com.apple.jobjc.Invoke.FunCall CFURLGetBytes_FxnInst = get_CFURLGetBytes_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLGetBytes_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, buffer);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, bufferLength);
		CFURLGetBytes_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLGetFSRef_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLGetFSRef_FxnInst(){
		return ((CFURLGetFSRef_FxnInst != null)
	? (CFURLGetFSRef_FxnInst)
	: (CFURLGetFSRef_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLGetFSRef", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST)));
	}

	 public boolean CFURLGetFSRef(final com.apple.jobjc.corefoundation.CFURLRefCFType url, final Object /* structFSRef* (^{FSRef=[80C]}, ^{FSRef=[80C]}) */ fsRef){
			final com.apple.jobjc.Invoke.FunCall CFURLGetFSRef_FxnInst = get_CFURLGetFSRef_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLGetFSRef_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, fsRef);
		CFURLGetFSRef_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLGetFileSystemRepresentation_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLGetFileSystemRepresentation_FxnInst(){
		return ((CFURLGetFileSystemRepresentation_FxnInst != null)
	? (CFURLGetFileSystemRepresentation_FxnInst)
	: (CFURLGetFileSystemRepresentation_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLGetFileSystemRepresentation", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public boolean CFURLGetFileSystemRepresentation(final com.apple.jobjc.corefoundation.CFURLRefCFType url, final boolean resolveAgainstBase, final com.apple.jobjc.Pointer<java.lang.Byte> buffer, final long maxBufLen){
			final com.apple.jobjc.Invoke.FunCall CFURLGetFileSystemRepresentation_FxnInst = get_CFURLGetFileSystemRepresentation_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLGetFileSystemRepresentation_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.push(nativeBuffer, resolveAgainstBase);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, buffer);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, maxBufLen);
		CFURLGetFileSystemRepresentation_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLGetPortNumber_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLGetPortNumber_FxnInst(){
		return ((CFURLGetPortNumber_FxnInst != null)
	? (CFURLGetPortNumber_FxnInst)
	: (CFURLGetPortNumber_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLGetPortNumber", com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public int CFURLGetPortNumber(final com.apple.jobjc.corefoundation.CFURLRefCFType anURL){
			final com.apple.jobjc.Invoke.FunCall CFURLGetPortNumber_FxnInst = get_CFURLGetPortNumber_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLGetPortNumber_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, anURL);
		CFURLGetPortNumber_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLGetString_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLGetString_FxnInst(){
		return ((CFURLGetString_FxnInst != null)
	? (CFURLGetString_FxnInst)
	: (CFURLGetString_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLGetString", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFURLGetString(final com.apple.jobjc.corefoundation.CFURLRefCFType anURL){
			final com.apple.jobjc.Invoke.FunCall CFURLGetString_FxnInst = get_CFURLGetString_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLGetString_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, anURL);
		CFURLGetString_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLGetTypeID_FxnInst(){
		return ((CFURLGetTypeID_FxnInst != null)
	? (CFURLGetTypeID_FxnInst)
	: (CFURLGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFURLGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFURLGetTypeID_FxnInst = get_CFURLGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLGetTypeID_FxnInst.init(nativeBuffer);
		CFURLGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLHasDirectoryPath_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLHasDirectoryPath_FxnInst(){
		return ((CFURLHasDirectoryPath_FxnInst != null)
	? (CFURLHasDirectoryPath_FxnInst)
	: (CFURLHasDirectoryPath_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLHasDirectoryPath", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFURLHasDirectoryPath(final com.apple.jobjc.corefoundation.CFURLRefCFType anURL){
			final com.apple.jobjc.Invoke.FunCall CFURLHasDirectoryPath_FxnInst = get_CFURLHasDirectoryPath_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLHasDirectoryPath_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, anURL);
		CFURLHasDirectoryPath_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLResourceIsReachable_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLResourceIsReachable_FxnInst(){
		return ((CFURLResourceIsReachable_FxnInst != null)
	? (CFURLResourceIsReachable_FxnInst)
	: (CFURLResourceIsReachable_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLResourceIsReachable", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFURLResourceIsReachable(final com.apple.jobjc.corefoundation.CFURLRefCFType url, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFErrorRefCFType> error){
			final com.apple.jobjc.Invoke.FunCall CFURLResourceIsReachable_FxnInst = get_CFURLResourceIsReachable_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLResourceIsReachable_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, error);
		CFURLResourceIsReachable_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLSetResourcePropertiesForKeys_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLSetResourcePropertiesForKeys_FxnInst(){
		return ((CFURLSetResourcePropertiesForKeys_FxnInst != null)
	? (CFURLSetResourcePropertiesForKeys_FxnInst)
	: (CFURLSetResourcePropertiesForKeys_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLSetResourcePropertiesForKeys", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFURLSetResourcePropertiesForKeys(final com.apple.jobjc.corefoundation.CFURLRefCFType url, final com.apple.jobjc.corefoundation.CFDictionaryRefCFType keyedPropertyValues, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFErrorRefCFType> error){
			final com.apple.jobjc.Invoke.FunCall CFURLSetResourcePropertiesForKeys_FxnInst = get_CFURLSetResourcePropertiesForKeys_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLSetResourcePropertiesForKeys_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, keyedPropertyValues);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, error);
		CFURLSetResourcePropertiesForKeys_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLSetResourcePropertyForKey_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLSetResourcePropertyForKey_FxnInst(){
		return ((CFURLSetResourcePropertyForKey_FxnInst != null)
	? (CFURLSetResourcePropertyForKey_FxnInst)
	: (CFURLSetResourcePropertyForKey_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLSetResourcePropertyForKey", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFURLSetResourcePropertyForKey(final com.apple.jobjc.corefoundation.CFURLRefCFType url, final com.apple.jobjc.corefoundation.CFStringRefCFType key, final com.apple.jobjc.corefoundation.CFTypeRefCFType propertyValue, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFErrorRefCFType> error){
			final com.apple.jobjc.Invoke.FunCall CFURLSetResourcePropertyForKey_FxnInst = get_CFURLSetResourcePropertyForKey_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLSetResourcePropertyForKey_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, key);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, propertyValue);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, error);
		CFURLSetResourcePropertyForKey_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLSetTemporaryResourcePropertyForKey_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLSetTemporaryResourcePropertyForKey_FxnInst(){
		return ((CFURLSetTemporaryResourcePropertyForKey_FxnInst != null)
	? (CFURLSetTemporaryResourcePropertyForKey_FxnInst)
	: (CFURLSetTemporaryResourcePropertyForKey_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLSetTemporaryResourcePropertyForKey", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFURLSetTemporaryResourcePropertyForKey(final com.apple.jobjc.corefoundation.CFURLRefCFType url, final com.apple.jobjc.corefoundation.CFStringRefCFType key, final com.apple.jobjc.corefoundation.CFTypeRefCFType propertyValue){
			final com.apple.jobjc.Invoke.FunCall CFURLSetTemporaryResourcePropertyForKey_FxnInst = get_CFURLSetTemporaryResourcePropertyForKey_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLSetTemporaryResourcePropertyForKey_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, key);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, propertyValue);
		CFURLSetTemporaryResourcePropertyForKey_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLStartAccessingSecurityScopedResource_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLStartAccessingSecurityScopedResource_FxnInst(){
		return ((CFURLStartAccessingSecurityScopedResource_FxnInst != null)
	? (CFURLStartAccessingSecurityScopedResource_FxnInst)
	: (CFURLStartAccessingSecurityScopedResource_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLStartAccessingSecurityScopedResource", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFURLStartAccessingSecurityScopedResource(final com.apple.jobjc.corefoundation.CFURLRefCFType url){
			final com.apple.jobjc.Invoke.FunCall CFURLStartAccessingSecurityScopedResource_FxnInst = get_CFURLStartAccessingSecurityScopedResource_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLStartAccessingSecurityScopedResource_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		CFURLStartAccessingSecurityScopedResource_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLStopAccessingSecurityScopedResource_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLStopAccessingSecurityScopedResource_FxnInst(){
		return ((CFURLStopAccessingSecurityScopedResource_FxnInst != null)
	? (CFURLStopAccessingSecurityScopedResource_FxnInst)
	: (CFURLStopAccessingSecurityScopedResource_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLStopAccessingSecurityScopedResource", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFURLStopAccessingSecurityScopedResource(final com.apple.jobjc.corefoundation.CFURLRefCFType url){
			final com.apple.jobjc.Invoke.FunCall CFURLStopAccessingSecurityScopedResource_FxnInst = get_CFURLStopAccessingSecurityScopedResource_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLStopAccessingSecurityScopedResource_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		CFURLStopAccessingSecurityScopedResource_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLWriteBookmarkDataToFile_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLWriteBookmarkDataToFile_FxnInst(){
		return ((CFURLWriteBookmarkDataToFile_FxnInst != null)
	? (CFURLWriteBookmarkDataToFile_FxnInst)
	: (CFURLWriteBookmarkDataToFile_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLWriteBookmarkDataToFile", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFURLWriteBookmarkDataToFile(final com.apple.jobjc.corefoundation.CFDataRefCFType bookmarkRef, final com.apple.jobjc.corefoundation.CFURLRefCFType fileURL, final long options, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFErrorRefCFType> errorRef){
			final com.apple.jobjc.Invoke.FunCall CFURLWriteBookmarkDataToFile_FxnInst = get_CFURLWriteBookmarkDataToFile_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLWriteBookmarkDataToFile_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bookmarkRef);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, fileURL);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, options);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, errorRef);
		CFURLWriteBookmarkDataToFile_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFURLWriteDataAndPropertiesToResource_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFURLWriteDataAndPropertiesToResource_FxnInst(){
		return ((CFURLWriteDataAndPropertiesToResource_FxnInst != null)
	? (CFURLWriteDataAndPropertiesToResource_FxnInst)
	: (CFURLWriteDataAndPropertiesToResource_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFURLWriteDataAndPropertiesToResource", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFURLWriteDataAndPropertiesToResource(final com.apple.jobjc.corefoundation.CFURLRefCFType url, final com.apple.jobjc.corefoundation.CFDataRefCFType dataToWrite, final com.apple.jobjc.corefoundation.CFDictionaryRefCFType propertiesToWrite, final com.apple.jobjc.Pointer<java.lang.Integer> errorCode){
			final com.apple.jobjc.Invoke.FunCall CFURLWriteDataAndPropertiesToResource_FxnInst = get_CFURLWriteDataAndPropertiesToResource_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFURLWriteDataAndPropertiesToResource_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, url);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, dataToWrite);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, propertiesToWrite);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, errorCode);
		CFURLWriteDataAndPropertiesToResource_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFUUIDCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFUUIDCreate_FxnInst(){
		return ((CFUUIDCreate_FxnInst != null)
	? (CFUUIDCreate_FxnInst)
	: (CFUUIDCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFUUIDCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFUUIDRefCFType CFUUIDCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc){
			final com.apple.jobjc.Invoke.FunCall CFUUIDCreate_FxnInst = get_CFUUIDCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFUUIDCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		CFUUIDCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFUUIDRefCFType returnValue = (com.apple.jobjc.corefoundation.CFUUIDRefCFType) new com.apple.jobjc.corefoundation.CFUUIDRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFUUIDCreateFromString_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFUUIDCreateFromString_FxnInst(){
		return ((CFUUIDCreateFromString_FxnInst != null)
	? (CFUUIDCreateFromString_FxnInst)
	: (CFUUIDCreateFromString_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFUUIDCreateFromString", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFUUIDRefCFType CFUUIDCreateFromString(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFStringRefCFType uuidStr){
			final com.apple.jobjc.Invoke.FunCall CFUUIDCreateFromString_FxnInst = get_CFUUIDCreateFromString_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFUUIDCreateFromString_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, uuidStr);
		CFUUIDCreateFromString_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFUUIDRefCFType returnValue = (com.apple.jobjc.corefoundation.CFUUIDRefCFType) new com.apple.jobjc.corefoundation.CFUUIDRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFUUIDCreateFromUUIDBytes_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFUUIDCreateFromUUIDBytes_FxnInst(){
		return ((CFUUIDCreateFromUUIDBytes_FxnInst != null)
	? (CFUUIDCreateFromUUIDBytes_FxnInst)
	: (CFUUIDCreateFromUUIDBytes_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFUUIDCreateFromUUIDBytes", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.corefoundation.CFUUIDBytes.getStructCoder())));
	}

	 public com.apple.jobjc.corefoundation.CFUUIDRefCFType CFUUIDCreateFromUUIDBytes(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFUUIDBytes bytes){
			final com.apple.jobjc.Invoke.FunCall CFUUIDCreateFromUUIDBytes_FxnInst = get_CFUUIDCreateFromUUIDBytes_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFUUIDCreateFromUUIDBytes_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.corefoundation.CFUUIDBytes.getStructCoder().push(nativeBuffer, bytes);
		CFUUIDCreateFromUUIDBytes_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFUUIDRefCFType returnValue = (com.apple.jobjc.corefoundation.CFUUIDRefCFType) new com.apple.jobjc.corefoundation.CFUUIDRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFUUIDCreateString_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFUUIDCreateString_FxnInst(){
		return ((CFUUIDCreateString_FxnInst != null)
	? (CFUUIDCreateString_FxnInst)
	: (CFUUIDCreateString_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFUUIDCreateString", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFUUIDCreateString(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFUUIDRefCFType uuid){
			final com.apple.jobjc.Invoke.FunCall CFUUIDCreateString_FxnInst = get_CFUUIDCreateString_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFUUIDCreateString_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, uuid);
		CFUUIDCreateString_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFUUIDCreateWithBytes_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFUUIDCreateWithBytes_FxnInst(){
		return ((CFUUIDCreateWithBytes_FxnInst != null)
	? (CFUUIDCreateWithBytes_FxnInst)
	: (CFUUIDCreateWithBytes_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFUUIDCreateWithBytes", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFUUIDRefCFType CFUUIDCreateWithBytes(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final byte byte0, final byte byte1, final byte byte2, final byte byte3, final byte byte4, final byte byte5, final byte byte6, final byte byte7, final byte byte8, final byte byte9, final byte byte10, final byte byte11, final byte byte12, final byte byte13, final byte byte14, final byte byte15){
			final com.apple.jobjc.Invoke.FunCall CFUUIDCreateWithBytes_FxnInst = get_CFUUIDCreateWithBytes_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFUUIDCreateWithBytes_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte0);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte1);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte2);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte3);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte4);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte5);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte6);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte7);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte8);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte9);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte10);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte11);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte12);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte13);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte14);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte15);
		CFUUIDCreateWithBytes_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFUUIDRefCFType returnValue = (com.apple.jobjc.corefoundation.CFUUIDRefCFType) new com.apple.jobjc.corefoundation.CFUUIDRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFUUIDGetConstantUUIDWithBytes_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFUUIDGetConstantUUIDWithBytes_FxnInst(){
		return ((CFUUIDGetConstantUUIDWithBytes_FxnInst != null)
	? (CFUUIDGetConstantUUIDWithBytes_FxnInst)
	: (CFUUIDGetConstantUUIDWithBytes_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFUUIDGetConstantUUIDWithBytes", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST, com.apple.jobjc.PrimitiveCoder.UCharCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFUUIDRefCFType CFUUIDGetConstantUUIDWithBytes(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final byte byte0, final byte byte1, final byte byte2, final byte byte3, final byte byte4, final byte byte5, final byte byte6, final byte byte7, final byte byte8, final byte byte9, final byte byte10, final byte byte11, final byte byte12, final byte byte13, final byte byte14, final byte byte15){
			final com.apple.jobjc.Invoke.FunCall CFUUIDGetConstantUUIDWithBytes_FxnInst = get_CFUUIDGetConstantUUIDWithBytes_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFUUIDGetConstantUUIDWithBytes_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte0);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte1);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte2);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte3);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte4);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte5);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte6);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte7);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte8);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte9);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte10);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte11);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte12);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte13);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte14);
		com.apple.jobjc.PrimitiveCoder.UCharCoder.INST.push(nativeBuffer, byte15);
		CFUUIDGetConstantUUIDWithBytes_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFUUIDRefCFType returnValue = (com.apple.jobjc.corefoundation.CFUUIDRefCFType) new com.apple.jobjc.corefoundation.CFUUIDRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFUUIDGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFUUIDGetTypeID_FxnInst(){
		return ((CFUUIDGetTypeID_FxnInst != null)
	? (CFUUIDGetTypeID_FxnInst)
	: (CFUUIDGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFUUIDGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFUUIDGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFUUIDGetTypeID_FxnInst = get_CFUUIDGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFUUIDGetTypeID_FxnInst.init(nativeBuffer);
		CFUUIDGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFUUIDGetUUIDBytes_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFUUIDGetUUIDBytes_FxnInst(){
		return ((CFUUIDGetUUIDBytes_FxnInst != null)
	? (CFUUIDGetUUIDBytes_FxnInst)
	: (CFUUIDGetUUIDBytes_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFUUIDGetUUIDBytes", com.apple.jobjc.corefoundation.CFUUIDBytes.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFUUIDBytes CFUUIDGetUUIDBytes(final com.apple.jobjc.corefoundation.CFUUIDRefCFType uuid){
			final com.apple.jobjc.Invoke.FunCall CFUUIDGetUUIDBytes_FxnInst = get_CFUUIDGetUUIDBytes_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFUUIDGetUUIDBytes_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, uuid);
				com.apple.jobjc.corefoundation.CFUUIDBytes returnValue = com.apple.jobjc.JObjC.getInstance(getRuntime()).CoreFoundation().makeCFUUIDBytes();
		CFUUIDGetUUIDBytes_FxnInst.invoke(nativeBuffer, returnValue);
		
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFUserNotificationCancel_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFUserNotificationCancel_FxnInst(){
		return ((CFUserNotificationCancel_FxnInst != null)
	? (CFUserNotificationCancel_FxnInst)
	: (CFUserNotificationCancel_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFUserNotificationCancel", com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public int CFUserNotificationCancel(final com.apple.jobjc.corefoundation.CFUserNotificationRefCFType userNotification){
			final com.apple.jobjc.Invoke.FunCall CFUserNotificationCancel_FxnInst = get_CFUserNotificationCancel_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFUserNotificationCancel_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, userNotification);
		CFUserNotificationCancel_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFUserNotificationCheckBoxChecked_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFUserNotificationCheckBoxChecked_FxnInst(){
		return ((CFUserNotificationCheckBoxChecked_FxnInst != null)
	? (CFUserNotificationCheckBoxChecked_FxnInst)
	: (CFUserNotificationCheckBoxChecked_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFUserNotificationCheckBoxChecked", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public long CFUserNotificationCheckBoxChecked(final long i){
			final com.apple.jobjc.Invoke.FunCall CFUserNotificationCheckBoxChecked_FxnInst = get_CFUserNotificationCheckBoxChecked_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFUserNotificationCheckBoxChecked_FxnInst.init(nativeBuffer);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, i);
		CFUserNotificationCheckBoxChecked_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFUserNotificationCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFUserNotificationCreate_FxnInst(){
		return ((CFUserNotificationCreate_FxnInst != null)
	? (CFUserNotificationCreate_FxnInst)
	: (CFUserNotificationCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFUserNotificationCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFUserNotificationRefCFType CFUserNotificationCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final double timeout, final long flags, final com.apple.jobjc.Pointer<java.lang.Integer> error, final com.apple.jobjc.corefoundation.CFDictionaryRefCFType dictionary){
			final com.apple.jobjc.Invoke.FunCall CFUserNotificationCreate_FxnInst = get_CFUserNotificationCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFUserNotificationCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, timeout);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, flags);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, error);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, dictionary);
		CFUserNotificationCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFUserNotificationRefCFType returnValue = (com.apple.jobjc.corefoundation.CFUserNotificationRefCFType) new com.apple.jobjc.corefoundation.CFUserNotificationRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFUserNotificationCreateRunLoopSource_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFUserNotificationCreateRunLoopSource_FxnInst(){
		return ((CFUserNotificationCreateRunLoopSource_FxnInst != null)
	? (CFUserNotificationCreateRunLoopSource_FxnInst)
	: (CFUserNotificationCreateRunLoopSource_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFUserNotificationCreateRunLoopSource", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType CFUserNotificationCreateRunLoopSource(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFUserNotificationRefCFType userNotification, final Object /* CFUserNotificationCallBack (^?, ^?) */ callout, final long order){
			final com.apple.jobjc.Invoke.FunCall CFUserNotificationCreateRunLoopSource_FxnInst = get_CFUserNotificationCreateRunLoopSource_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFUserNotificationCreateRunLoopSource_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, userNotification);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, callout);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, order);
		CFUserNotificationCreateRunLoopSource_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType returnValue = (com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType) new com.apple.jobjc.corefoundation.CFRunLoopSourceRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFUserNotificationDisplayAlert_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFUserNotificationDisplayAlert_FxnInst(){
		return ((CFUserNotificationDisplayAlert_FxnInst != null)
	? (CFUserNotificationDisplayAlert_FxnInst)
	: (CFUserNotificationDisplayAlert_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFUserNotificationDisplayAlert", com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public int CFUserNotificationDisplayAlert(final double timeout, final long flags, final com.apple.jobjc.corefoundation.CFURLRefCFType iconURL, final com.apple.jobjc.corefoundation.CFURLRefCFType soundURL, final com.apple.jobjc.corefoundation.CFURLRefCFType localizationURL, final com.apple.jobjc.corefoundation.CFStringRefCFType alertHeader, final com.apple.jobjc.corefoundation.CFStringRefCFType alertMessage, final com.apple.jobjc.corefoundation.CFStringRefCFType defaultButtonTitle, final com.apple.jobjc.corefoundation.CFStringRefCFType alternateButtonTitle, final com.apple.jobjc.corefoundation.CFStringRefCFType otherButtonTitle, final com.apple.jobjc.Pointer<java.lang.Long> responseFlags){
			final com.apple.jobjc.Invoke.FunCall CFUserNotificationDisplayAlert_FxnInst = get_CFUserNotificationDisplayAlert_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFUserNotificationDisplayAlert_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, timeout);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, flags);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, iconURL);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, soundURL);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, localizationURL);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alertHeader);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alertMessage);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, defaultButtonTitle);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alternateButtonTitle);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, otherButtonTitle);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, responseFlags);
		CFUserNotificationDisplayAlert_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFUserNotificationDisplayNotice_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFUserNotificationDisplayNotice_FxnInst(){
		return ((CFUserNotificationDisplayNotice_FxnInst != null)
	? (CFUserNotificationDisplayNotice_FxnInst)
	: (CFUserNotificationDisplayNotice_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFUserNotificationDisplayNotice", com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public int CFUserNotificationDisplayNotice(final double timeout, final long flags, final com.apple.jobjc.corefoundation.CFURLRefCFType iconURL, final com.apple.jobjc.corefoundation.CFURLRefCFType soundURL, final com.apple.jobjc.corefoundation.CFURLRefCFType localizationURL, final com.apple.jobjc.corefoundation.CFStringRefCFType alertHeader, final com.apple.jobjc.corefoundation.CFStringRefCFType alertMessage, final com.apple.jobjc.corefoundation.CFStringRefCFType defaultButtonTitle){
			final com.apple.jobjc.Invoke.FunCall CFUserNotificationDisplayNotice_FxnInst = get_CFUserNotificationDisplayNotice_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFUserNotificationDisplayNotice_FxnInst.init(nativeBuffer);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, timeout);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, flags);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, iconURL);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, soundURL);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, localizationURL);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alertHeader);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alertMessage);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, defaultButtonTitle);
		CFUserNotificationDisplayNotice_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFUserNotificationGetResponseDictionary_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFUserNotificationGetResponseDictionary_FxnInst(){
		return ((CFUserNotificationGetResponseDictionary_FxnInst != null)
	? (CFUserNotificationGetResponseDictionary_FxnInst)
	: (CFUserNotificationGetResponseDictionary_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFUserNotificationGetResponseDictionary", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDictionaryRefCFType CFUserNotificationGetResponseDictionary(final com.apple.jobjc.corefoundation.CFUserNotificationRefCFType userNotification){
			final com.apple.jobjc.Invoke.FunCall CFUserNotificationGetResponseDictionary_FxnInst = get_CFUserNotificationGetResponseDictionary_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFUserNotificationGetResponseDictionary_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, userNotification);
		CFUserNotificationGetResponseDictionary_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDictionaryRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDictionaryRefCFType) new com.apple.jobjc.corefoundation.CFDictionaryRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFUserNotificationGetResponseValue_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFUserNotificationGetResponseValue_FxnInst(){
		return ((CFUserNotificationGetResponseValue_FxnInst != null)
	? (CFUserNotificationGetResponseValue_FxnInst)
	: (CFUserNotificationGetResponseValue_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFUserNotificationGetResponseValue", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFUserNotificationGetResponseValue(final com.apple.jobjc.corefoundation.CFUserNotificationRefCFType userNotification, final com.apple.jobjc.corefoundation.CFStringRefCFType key, final long idx){
			final com.apple.jobjc.Invoke.FunCall CFUserNotificationGetResponseValue_FxnInst = get_CFUserNotificationGetResponseValue_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFUserNotificationGetResponseValue_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, userNotification);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, key);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, idx);
		CFUserNotificationGetResponseValue_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFUserNotificationGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFUserNotificationGetTypeID_FxnInst(){
		return ((CFUserNotificationGetTypeID_FxnInst != null)
	? (CFUserNotificationGetTypeID_FxnInst)
	: (CFUserNotificationGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFUserNotificationGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFUserNotificationGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFUserNotificationGetTypeID_FxnInst = get_CFUserNotificationGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFUserNotificationGetTypeID_FxnInst.init(nativeBuffer);
		CFUserNotificationGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFUserNotificationPopUpSelection_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFUserNotificationPopUpSelection_FxnInst(){
		return ((CFUserNotificationPopUpSelection_FxnInst != null)
	? (CFUserNotificationPopUpSelection_FxnInst)
	: (CFUserNotificationPopUpSelection_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFUserNotificationPopUpSelection", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public long CFUserNotificationPopUpSelection(final long n){
			final com.apple.jobjc.Invoke.FunCall CFUserNotificationPopUpSelection_FxnInst = get_CFUserNotificationPopUpSelection_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFUserNotificationPopUpSelection_FxnInst.init(nativeBuffer);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, n);
		CFUserNotificationPopUpSelection_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFUserNotificationReceiveResponse_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFUserNotificationReceiveResponse_FxnInst(){
		return ((CFUserNotificationReceiveResponse_FxnInst != null)
	? (CFUserNotificationReceiveResponse_FxnInst)
	: (CFUserNotificationReceiveResponse_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFUserNotificationReceiveResponse", com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public int CFUserNotificationReceiveResponse(final com.apple.jobjc.corefoundation.CFUserNotificationRefCFType userNotification, final double timeout, final com.apple.jobjc.Pointer<java.lang.Long> responseFlags){
			final com.apple.jobjc.Invoke.FunCall CFUserNotificationReceiveResponse_FxnInst = get_CFUserNotificationReceiveResponse_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFUserNotificationReceiveResponse_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, userNotification);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, timeout);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, responseFlags);
		CFUserNotificationReceiveResponse_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFUserNotificationSecureTextField_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFUserNotificationSecureTextField_FxnInst(){
		return ((CFUserNotificationSecureTextField_FxnInst != null)
	? (CFUserNotificationSecureTextField_FxnInst)
	: (CFUserNotificationSecureTextField_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFUserNotificationSecureTextField", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public long CFUserNotificationSecureTextField(final long i){
			final com.apple.jobjc.Invoke.FunCall CFUserNotificationSecureTextField_FxnInst = get_CFUserNotificationSecureTextField_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFUserNotificationSecureTextField_FxnInst.init(nativeBuffer);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, i);
		CFUserNotificationSecureTextField_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFUserNotificationUpdate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFUserNotificationUpdate_FxnInst(){
		return ((CFUserNotificationUpdate_FxnInst != null)
	? (CFUserNotificationUpdate_FxnInst)
	: (CFUserNotificationUpdate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFUserNotificationUpdate", com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public int CFUserNotificationUpdate(final com.apple.jobjc.corefoundation.CFUserNotificationRefCFType userNotification, final double timeout, final long flags, final com.apple.jobjc.corefoundation.CFDictionaryRefCFType dictionary){
			final com.apple.jobjc.Invoke.FunCall CFUserNotificationUpdate_FxnInst = get_CFUserNotificationUpdate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFUserNotificationUpdate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, userNotification);
		com.apple.jobjc.PrimitiveCoder.DoubleCoder.INST.push(nativeBuffer, timeout);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, flags);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, dictionary);
		CFUserNotificationUpdate_FxnInst.invoke(nativeBuffer);
		final int returnValue = (int) (com.apple.jobjc.MixedPrimitiveCoder.SLongSIntCoder.popInt(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFWriteStreamCanAcceptBytes_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFWriteStreamCanAcceptBytes_FxnInst(){
		return ((CFWriteStreamCanAcceptBytes_FxnInst != null)
	? (CFWriteStreamCanAcceptBytes_FxnInst)
	: (CFWriteStreamCanAcceptBytes_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFWriteStreamCanAcceptBytes", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFWriteStreamCanAcceptBytes(final com.apple.jobjc.corefoundation.CFWriteStreamRefCFType stream){
			final com.apple.jobjc.Invoke.FunCall CFWriteStreamCanAcceptBytes_FxnInst = get_CFWriteStreamCanAcceptBytes_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFWriteStreamCanAcceptBytes_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
		CFWriteStreamCanAcceptBytes_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFWriteStreamClose_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFWriteStreamClose_FxnInst(){
		return ((CFWriteStreamClose_FxnInst != null)
	? (CFWriteStreamClose_FxnInst)
	: (CFWriteStreamClose_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFWriteStreamClose", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFWriteStreamClose(final com.apple.jobjc.corefoundation.CFWriteStreamRefCFType stream){
			final com.apple.jobjc.Invoke.FunCall CFWriteStreamClose_FxnInst = get_CFWriteStreamClose_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFWriteStreamClose_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
		CFWriteStreamClose_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFWriteStreamCopyError_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFWriteStreamCopyError_FxnInst(){
		return ((CFWriteStreamCopyError_FxnInst != null)
	? (CFWriteStreamCopyError_FxnInst)
	: (CFWriteStreamCopyError_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFWriteStreamCopyError", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFErrorRefCFType CFWriteStreamCopyError(final com.apple.jobjc.corefoundation.CFWriteStreamRefCFType stream){
			final com.apple.jobjc.Invoke.FunCall CFWriteStreamCopyError_FxnInst = get_CFWriteStreamCopyError_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFWriteStreamCopyError_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
		CFWriteStreamCopyError_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFErrorRefCFType returnValue = (com.apple.jobjc.corefoundation.CFErrorRefCFType) new com.apple.jobjc.corefoundation.CFErrorRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFWriteStreamCopyProperty_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFWriteStreamCopyProperty_FxnInst(){
		return ((CFWriteStreamCopyProperty_FxnInst != null)
	? (CFWriteStreamCopyProperty_FxnInst)
	: (CFWriteStreamCopyProperty_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFWriteStreamCopyProperty", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFTypeRefCFType CFWriteStreamCopyProperty(final com.apple.jobjc.corefoundation.CFWriteStreamRefCFType stream, final com.apple.jobjc.corefoundation.CFStringRefCFType propertyName){
			final com.apple.jobjc.Invoke.FunCall CFWriteStreamCopyProperty_FxnInst = get_CFWriteStreamCopyProperty_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFWriteStreamCopyProperty_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, propertyName);
		CFWriteStreamCopyProperty_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFTypeRefCFType returnValue = (com.apple.jobjc.corefoundation.CFTypeRefCFType) new com.apple.jobjc.corefoundation.CFTypeRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFWriteStreamCreateWithAllocatedBuffers_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFWriteStreamCreateWithAllocatedBuffers_FxnInst(){
		return ((CFWriteStreamCreateWithAllocatedBuffers_FxnInst != null)
	? (CFWriteStreamCreateWithAllocatedBuffers_FxnInst)
	: (CFWriteStreamCreateWithAllocatedBuffers_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFWriteStreamCreateWithAllocatedBuffers", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFWriteStreamRefCFType CFWriteStreamCreateWithAllocatedBuffers(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFAllocatorRefCFType bufferAllocator){
			final com.apple.jobjc.Invoke.FunCall CFWriteStreamCreateWithAllocatedBuffers_FxnInst = get_CFWriteStreamCreateWithAllocatedBuffers_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFWriteStreamCreateWithAllocatedBuffers_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, bufferAllocator);
		CFWriteStreamCreateWithAllocatedBuffers_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFWriteStreamRefCFType returnValue = (com.apple.jobjc.corefoundation.CFWriteStreamRefCFType) new com.apple.jobjc.corefoundation.CFWriteStreamRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFWriteStreamCreateWithBuffer_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFWriteStreamCreateWithBuffer_FxnInst(){
		return ((CFWriteStreamCreateWithBuffer_FxnInst != null)
	? (CFWriteStreamCreateWithBuffer_FxnInst)
	: (CFWriteStreamCreateWithBuffer_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFWriteStreamCreateWithBuffer", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFWriteStreamRefCFType CFWriteStreamCreateWithBuffer(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.Pointer<java.lang.Byte> buffer, final long bufferCapacity){
			final com.apple.jobjc.Invoke.FunCall CFWriteStreamCreateWithBuffer_FxnInst = get_CFWriteStreamCreateWithBuffer_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFWriteStreamCreateWithBuffer_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, buffer);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, bufferCapacity);
		CFWriteStreamCreateWithBuffer_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFWriteStreamRefCFType returnValue = (com.apple.jobjc.corefoundation.CFWriteStreamRefCFType) new com.apple.jobjc.corefoundation.CFWriteStreamRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFWriteStreamCreateWithFile_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFWriteStreamCreateWithFile_FxnInst(){
		return ((CFWriteStreamCreateWithFile_FxnInst != null)
	? (CFWriteStreamCreateWithFile_FxnInst)
	: (CFWriteStreamCreateWithFile_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFWriteStreamCreateWithFile", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFWriteStreamRefCFType CFWriteStreamCreateWithFile(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFURLRefCFType fileURL){
			final com.apple.jobjc.Invoke.FunCall CFWriteStreamCreateWithFile_FxnInst = get_CFWriteStreamCreateWithFile_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFWriteStreamCreateWithFile_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, fileURL);
		CFWriteStreamCreateWithFile_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFWriteStreamRefCFType returnValue = (com.apple.jobjc.corefoundation.CFWriteStreamRefCFType) new com.apple.jobjc.corefoundation.CFWriteStreamRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFWriteStreamGetError_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFWriteStreamGetError_FxnInst(){
		return ((CFWriteStreamGetError_FxnInst != null)
	? (CFWriteStreamGetError_FxnInst)
	: (CFWriteStreamGetError_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFWriteStreamGetError", com.apple.jobjc.corefoundation.CFStreamError.getStructCoder(), com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStreamError CFWriteStreamGetError(final com.apple.jobjc.corefoundation.CFWriteStreamRefCFType stream){
			final com.apple.jobjc.Invoke.FunCall CFWriteStreamGetError_FxnInst = get_CFWriteStreamGetError_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFWriteStreamGetError_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
				com.apple.jobjc.corefoundation.CFStreamError returnValue = com.apple.jobjc.JObjC.getInstance(getRuntime()).CoreFoundation().makeCFStreamError();
		CFWriteStreamGetError_FxnInst.invoke(nativeBuffer, returnValue);
		
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFWriteStreamGetStatus_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFWriteStreamGetStatus_FxnInst(){
		return ((CFWriteStreamGetStatus_FxnInst != null)
	? (CFWriteStreamGetStatus_FxnInst)
	: (CFWriteStreamGetStatus_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFWriteStreamGetStatus", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFWriteStreamGetStatus(final com.apple.jobjc.corefoundation.CFWriteStreamRefCFType stream){
			final com.apple.jobjc.Invoke.FunCall CFWriteStreamGetStatus_FxnInst = get_CFWriteStreamGetStatus_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFWriteStreamGetStatus_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
		CFWriteStreamGetStatus_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFWriteStreamGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFWriteStreamGetTypeID_FxnInst(){
		return ((CFWriteStreamGetTypeID_FxnInst != null)
	? (CFWriteStreamGetTypeID_FxnInst)
	: (CFWriteStreamGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFWriteStreamGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFWriteStreamGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFWriteStreamGetTypeID_FxnInst = get_CFWriteStreamGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFWriteStreamGetTypeID_FxnInst.init(nativeBuffer);
		CFWriteStreamGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFWriteStreamOpen_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFWriteStreamOpen_FxnInst(){
		return ((CFWriteStreamOpen_FxnInst != null)
	? (CFWriteStreamOpen_FxnInst)
	: (CFWriteStreamOpen_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFWriteStreamOpen", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFWriteStreamOpen(final com.apple.jobjc.corefoundation.CFWriteStreamRefCFType stream){
			final com.apple.jobjc.Invoke.FunCall CFWriteStreamOpen_FxnInst = get_CFWriteStreamOpen_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFWriteStreamOpen_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
		CFWriteStreamOpen_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFWriteStreamScheduleWithRunLoop_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFWriteStreamScheduleWithRunLoop_FxnInst(){
		return ((CFWriteStreamScheduleWithRunLoop_FxnInst != null)
	? (CFWriteStreamScheduleWithRunLoop_FxnInst)
	: (CFWriteStreamScheduleWithRunLoop_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFWriteStreamScheduleWithRunLoop", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFWriteStreamScheduleWithRunLoop(final com.apple.jobjc.corefoundation.CFWriteStreamRefCFType stream, final com.apple.jobjc.corefoundation.CFRunLoopRefCFType runLoop, final com.apple.jobjc.corefoundation.CFStringRefCFType runLoopMode){
			final com.apple.jobjc.Invoke.FunCall CFWriteStreamScheduleWithRunLoop_FxnInst = get_CFWriteStreamScheduleWithRunLoop_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFWriteStreamScheduleWithRunLoop_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, runLoop);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, runLoopMode);
		CFWriteStreamScheduleWithRunLoop_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFWriteStreamSetClient_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFWriteStreamSetClient_FxnInst(){
		return ((CFWriteStreamSetClient_FxnInst != null)
	? (CFWriteStreamSetClient_FxnInst)
	: (CFWriteStreamSetClient_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFWriteStreamSetClient", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFWriteStreamSetClient(final com.apple.jobjc.corefoundation.CFWriteStreamRefCFType stream, final long streamEvents, final Object /* CFWriteStreamClientCallBack (^?, ^?) */ clientCB, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFStreamClientContext> clientContext){
			final com.apple.jobjc.Invoke.FunCall CFWriteStreamSetClient_FxnInst = get_CFWriteStreamSetClient_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFWriteStreamSetClient_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, streamEvents);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, clientCB);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, clientContext);
		CFWriteStreamSetClient_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFWriteStreamSetProperty_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFWriteStreamSetProperty_FxnInst(){
		return ((CFWriteStreamSetProperty_FxnInst != null)
	? (CFWriteStreamSetProperty_FxnInst)
	: (CFWriteStreamSetProperty_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFWriteStreamSetProperty", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFWriteStreamSetProperty(final com.apple.jobjc.corefoundation.CFWriteStreamRefCFType stream, final com.apple.jobjc.corefoundation.CFStringRefCFType propertyName, final com.apple.jobjc.corefoundation.CFTypeRefCFType propertyValue){
			final com.apple.jobjc.Invoke.FunCall CFWriteStreamSetProperty_FxnInst = get_CFWriteStreamSetProperty_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFWriteStreamSetProperty_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, propertyName);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, propertyValue);
		CFWriteStreamSetProperty_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFWriteStreamUnscheduleFromRunLoop_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFWriteStreamUnscheduleFromRunLoop_FxnInst(){
		return ((CFWriteStreamUnscheduleFromRunLoop_FxnInst != null)
	? (CFWriteStreamUnscheduleFromRunLoop_FxnInst)
	: (CFWriteStreamUnscheduleFromRunLoop_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFWriteStreamUnscheduleFromRunLoop", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFWriteStreamUnscheduleFromRunLoop(final com.apple.jobjc.corefoundation.CFWriteStreamRefCFType stream, final com.apple.jobjc.corefoundation.CFRunLoopRefCFType runLoop, final com.apple.jobjc.corefoundation.CFStringRefCFType runLoopMode){
			final com.apple.jobjc.Invoke.FunCall CFWriteStreamUnscheduleFromRunLoop_FxnInst = get_CFWriteStreamUnscheduleFromRunLoop_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFWriteStreamUnscheduleFromRunLoop_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, runLoop);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, runLoopMode);
		CFWriteStreamUnscheduleFromRunLoop_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFWriteStreamWrite_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFWriteStreamWrite_FxnInst(){
		return ((CFWriteStreamWrite_FxnInst != null)
	? (CFWriteStreamWrite_FxnInst)
	: (CFWriteStreamWrite_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFWriteStreamWrite", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public long CFWriteStreamWrite(final com.apple.jobjc.corefoundation.CFWriteStreamRefCFType stream, final com.apple.jobjc.Pointer<java.lang.Byte> buffer, final long bufferLength){
			final com.apple.jobjc.Invoke.FunCall CFWriteStreamWrite_FxnInst = get_CFWriteStreamWrite_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFWriteStreamWrite_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, stream);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, buffer);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, bufferLength);
		CFWriteStreamWrite_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFXMLCreateStringByEscapingEntities_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFXMLCreateStringByEscapingEntities_FxnInst(){
		return ((CFXMLCreateStringByEscapingEntities_FxnInst != null)
	? (CFXMLCreateStringByEscapingEntities_FxnInst)
	: (CFXMLCreateStringByEscapingEntities_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFXMLCreateStringByEscapingEntities", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFXMLCreateStringByEscapingEntities(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFStringRefCFType string, final com.apple.jobjc.corefoundation.CFDictionaryRefCFType entitiesDictionary){
			final com.apple.jobjc.Invoke.FunCall CFXMLCreateStringByEscapingEntities_FxnInst = get_CFXMLCreateStringByEscapingEntities_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFXMLCreateStringByEscapingEntities_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, string);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, entitiesDictionary);
		CFXMLCreateStringByEscapingEntities_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFXMLCreateStringByUnescapingEntities_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFXMLCreateStringByUnescapingEntities_FxnInst(){
		return ((CFXMLCreateStringByUnescapingEntities_FxnInst != null)
	? (CFXMLCreateStringByUnescapingEntities_FxnInst)
	: (CFXMLCreateStringByUnescapingEntities_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFXMLCreateStringByUnescapingEntities", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFXMLCreateStringByUnescapingEntities(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFStringRefCFType string, final com.apple.jobjc.corefoundation.CFDictionaryRefCFType entitiesDictionary){
			final com.apple.jobjc.Invoke.FunCall CFXMLCreateStringByUnescapingEntities_FxnInst = get_CFXMLCreateStringByUnescapingEntities_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFXMLCreateStringByUnescapingEntities_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, string);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, entitiesDictionary);
		CFXMLCreateStringByUnescapingEntities_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFXMLNodeCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFXMLNodeCreate_FxnInst(){
		return ((CFXMLNodeCreate_FxnInst != null)
	? (CFXMLNodeCreate_FxnInst)
	: (CFXMLNodeCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFXMLNodeCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public com.apple.jobjc.corefoundation.CFXMLNodeRefCFType CFXMLNodeCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final long xmlType, final com.apple.jobjc.corefoundation.CFStringRefCFType dataString, final com.apple.jobjc.Pointer<Void> additionalInfoPtr, final long version){
			final com.apple.jobjc.Invoke.FunCall CFXMLNodeCreate_FxnInst = get_CFXMLNodeCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFXMLNodeCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, xmlType);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, dataString);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, additionalInfoPtr);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, version);
		CFXMLNodeCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFXMLNodeRefCFType returnValue = (com.apple.jobjc.corefoundation.CFXMLNodeRefCFType) new com.apple.jobjc.corefoundation.CFXMLNodeRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFXMLNodeCreateCopy_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFXMLNodeCreateCopy_FxnInst(){
		return ((CFXMLNodeCreateCopy_FxnInst != null)
	? (CFXMLNodeCreateCopy_FxnInst)
	: (CFXMLNodeCreateCopy_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFXMLNodeCreateCopy", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFXMLNodeRefCFType CFXMLNodeCreateCopy(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType alloc, final com.apple.jobjc.corefoundation.CFXMLNodeRefCFType origNode){
			final com.apple.jobjc.Invoke.FunCall CFXMLNodeCreateCopy_FxnInst = get_CFXMLNodeCreateCopy_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFXMLNodeCreateCopy_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, alloc);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, origNode);
		CFXMLNodeCreateCopy_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFXMLNodeRefCFType returnValue = (com.apple.jobjc.corefoundation.CFXMLNodeRefCFType) new com.apple.jobjc.corefoundation.CFXMLNodeRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFXMLNodeGetInfoPtr_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFXMLNodeGetInfoPtr_FxnInst(){
		return ((CFXMLNodeGetInfoPtr_FxnInst != null)
	? (CFXMLNodeGetInfoPtr_FxnInst)
	: (CFXMLNodeGetInfoPtr_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFXMLNodeGetInfoPtr", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.Pointer<Void> CFXMLNodeGetInfoPtr(final com.apple.jobjc.corefoundation.CFXMLNodeRefCFType node){
			final com.apple.jobjc.Invoke.FunCall CFXMLNodeGetInfoPtr_FxnInst = get_CFXMLNodeGetInfoPtr_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFXMLNodeGetInfoPtr_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, node);
		CFXMLNodeGetInfoPtr_FxnInst.invoke(nativeBuffer);
		final com.apple.jobjc.Pointer<Void> returnValue = (com.apple.jobjc.Pointer<Void>) (com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFXMLNodeGetString_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFXMLNodeGetString_FxnInst(){
		return ((CFXMLNodeGetString_FxnInst != null)
	? (CFXMLNodeGetString_FxnInst)
	: (CFXMLNodeGetString_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFXMLNodeGetString", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFXMLNodeGetString(final com.apple.jobjc.corefoundation.CFXMLNodeRefCFType node){
			final com.apple.jobjc.Invoke.FunCall CFXMLNodeGetString_FxnInst = get_CFXMLNodeGetString_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFXMLNodeGetString_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, node);
		CFXMLNodeGetString_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFXMLNodeGetTypeCode_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFXMLNodeGetTypeCode_FxnInst(){
		return ((CFXMLNodeGetTypeCode_FxnInst != null)
	? (CFXMLNodeGetTypeCode_FxnInst)
	: (CFXMLNodeGetTypeCode_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFXMLNodeGetTypeCode", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFXMLNodeGetTypeCode(final com.apple.jobjc.corefoundation.CFXMLNodeRefCFType node){
			final com.apple.jobjc.Invoke.FunCall CFXMLNodeGetTypeCode_FxnInst = get_CFXMLNodeGetTypeCode_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFXMLNodeGetTypeCode_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, node);
		CFXMLNodeGetTypeCode_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFXMLNodeGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFXMLNodeGetTypeID_FxnInst(){
		return ((CFXMLNodeGetTypeID_FxnInst != null)
	? (CFXMLNodeGetTypeID_FxnInst)
	: (CFXMLNodeGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFXMLNodeGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFXMLNodeGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFXMLNodeGetTypeID_FxnInst = get_CFXMLNodeGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFXMLNodeGetTypeID_FxnInst.init(nativeBuffer);
		CFXMLNodeGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFXMLNodeGetVersion_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFXMLNodeGetVersion_FxnInst(){
		return ((CFXMLNodeGetVersion_FxnInst != null)
	? (CFXMLNodeGetVersion_FxnInst)
	: (CFXMLNodeGetVersion_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFXMLNodeGetVersion", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFXMLNodeGetVersion(final com.apple.jobjc.corefoundation.CFXMLNodeRefCFType node){
			final com.apple.jobjc.Invoke.FunCall CFXMLNodeGetVersion_FxnInst = get_CFXMLNodeGetVersion_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFXMLNodeGetVersion_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, node);
		CFXMLNodeGetVersion_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFXMLParserAbort_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFXMLParserAbort_FxnInst(){
		return ((CFXMLParserAbort_FxnInst != null)
	? (CFXMLParserAbort_FxnInst)
	: (CFXMLParserAbort_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFXMLParserAbort", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFXMLParserAbort(final com.apple.jobjc.corefoundation.CFXMLParserRefCFType parser, final long errorCode, final com.apple.jobjc.corefoundation.CFStringRefCFType errorDescription){
			final com.apple.jobjc.Invoke.FunCall CFXMLParserAbort_FxnInst = get_CFXMLParserAbort_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFXMLParserAbort_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, parser);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, errorCode);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, errorDescription);
		CFXMLParserAbort_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFXMLParserCopyErrorDescription_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFXMLParserCopyErrorDescription_FxnInst(){
		return ((CFXMLParserCopyErrorDescription_FxnInst != null)
	? (CFXMLParserCopyErrorDescription_FxnInst)
	: (CFXMLParserCopyErrorDescription_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFXMLParserCopyErrorDescription", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFStringRefCFType CFXMLParserCopyErrorDescription(final com.apple.jobjc.corefoundation.CFXMLParserRefCFType parser){
			final com.apple.jobjc.Invoke.FunCall CFXMLParserCopyErrorDescription_FxnInst = get_CFXMLParserCopyErrorDescription_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFXMLParserCopyErrorDescription_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, parser);
		CFXMLParserCopyErrorDescription_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFStringRefCFType returnValue = (com.apple.jobjc.corefoundation.CFStringRefCFType) new com.apple.jobjc.corefoundation.CFStringRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFXMLParserCreate_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFXMLParserCreate_FxnInst(){
		return ((CFXMLParserCreate_FxnInst != null)
	? (CFXMLParserCreate_FxnInst)
	: (CFXMLParserCreate_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFXMLParserCreate", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFXMLParserRefCFType CFXMLParserCreate(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFDataRefCFType xmlData, final com.apple.jobjc.corefoundation.CFURLRefCFType dataSource, final long parseOptions, final long versionOfNodes, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFXMLParserCallBacks> callBacks, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFXMLParserContext> context){
			final com.apple.jobjc.Invoke.FunCall CFXMLParserCreate_FxnInst = get_CFXMLParserCreate_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFXMLParserCreate_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, xmlData);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, dataSource);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, parseOptions);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, versionOfNodes);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, callBacks);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFXMLParserCreate_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFXMLParserRefCFType returnValue = (com.apple.jobjc.corefoundation.CFXMLParserRefCFType) new com.apple.jobjc.corefoundation.CFXMLParserRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFXMLParserCreateWithDataFromURL_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFXMLParserCreateWithDataFromURL_FxnInst(){
		return ((CFXMLParserCreateWithDataFromURL_FxnInst != null)
	? (CFXMLParserCreateWithDataFromURL_FxnInst)
	: (CFXMLParserCreateWithDataFromURL_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFXMLParserCreateWithDataFromURL", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFXMLParserRefCFType CFXMLParserCreateWithDataFromURL(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFURLRefCFType dataSource, final long parseOptions, final long versionOfNodes, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFXMLParserCallBacks> callBacks, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFXMLParserContext> context){
			final com.apple.jobjc.Invoke.FunCall CFXMLParserCreateWithDataFromURL_FxnInst = get_CFXMLParserCreateWithDataFromURL_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFXMLParserCreateWithDataFromURL_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, dataSource);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, parseOptions);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, versionOfNodes);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, callBacks);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFXMLParserCreateWithDataFromURL_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFXMLParserRefCFType returnValue = (com.apple.jobjc.corefoundation.CFXMLParserRefCFType) new com.apple.jobjc.corefoundation.CFXMLParserRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFXMLParserGetCallBacks_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFXMLParserGetCallBacks_FxnInst(){
		return ((CFXMLParserGetCallBacks_FxnInst != null)
	? (CFXMLParserGetCallBacks_FxnInst)
	: (CFXMLParserGetCallBacks_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFXMLParserGetCallBacks", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFXMLParserGetCallBacks(final com.apple.jobjc.corefoundation.CFXMLParserRefCFType parser, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFXMLParserCallBacks> callBacks){
			final com.apple.jobjc.Invoke.FunCall CFXMLParserGetCallBacks_FxnInst = get_CFXMLParserGetCallBacks_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFXMLParserGetCallBacks_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, parser);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, callBacks);
		CFXMLParserGetCallBacks_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFXMLParserGetContext_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFXMLParserGetContext_FxnInst(){
		return ((CFXMLParserGetContext_FxnInst != null)
	? (CFXMLParserGetContext_FxnInst)
	: (CFXMLParserGetContext_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFXMLParserGetContext", com.apple.jobjc.Coder.VoidCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public void CFXMLParserGetContext(final com.apple.jobjc.corefoundation.CFXMLParserRefCFType parser, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFXMLParserContext> context){
			final com.apple.jobjc.Invoke.FunCall CFXMLParserGetContext_FxnInst = get_CFXMLParserGetContext_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFXMLParserGetContext_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, parser);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, context);
		CFXMLParserGetContext_FxnInst.invoke(nativeBuffer);
		
		
	}

	private static com.apple.jobjc.Invoke.FunCall CFXMLParserGetDocument_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFXMLParserGetDocument_FxnInst(){
		return ((CFXMLParserGetDocument_FxnInst != null)
	? (CFXMLParserGetDocument_FxnInst)
	: (CFXMLParserGetDocument_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFXMLParserGetDocument", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.Pointer<Void> CFXMLParserGetDocument(final com.apple.jobjc.corefoundation.CFXMLParserRefCFType parser){
			final com.apple.jobjc.Invoke.FunCall CFXMLParserGetDocument_FxnInst = get_CFXMLParserGetDocument_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFXMLParserGetDocument_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, parser);
		CFXMLParserGetDocument_FxnInst.invoke(nativeBuffer);
		final com.apple.jobjc.Pointer<Void> returnValue = (com.apple.jobjc.Pointer<Void>) (com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFXMLParserGetLineNumber_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFXMLParserGetLineNumber_FxnInst(){
		return ((CFXMLParserGetLineNumber_FxnInst != null)
	? (CFXMLParserGetLineNumber_FxnInst)
	: (CFXMLParserGetLineNumber_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFXMLParserGetLineNumber", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFXMLParserGetLineNumber(final com.apple.jobjc.corefoundation.CFXMLParserRefCFType parser){
			final com.apple.jobjc.Invoke.FunCall CFXMLParserGetLineNumber_FxnInst = get_CFXMLParserGetLineNumber_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFXMLParserGetLineNumber_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, parser);
		CFXMLParserGetLineNumber_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFXMLParserGetLocation_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFXMLParserGetLocation_FxnInst(){
		return ((CFXMLParserGetLocation_FxnInst != null)
	? (CFXMLParserGetLocation_FxnInst)
	: (CFXMLParserGetLocation_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFXMLParserGetLocation", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFXMLParserGetLocation(final com.apple.jobjc.corefoundation.CFXMLParserRefCFType parser){
			final com.apple.jobjc.Invoke.FunCall CFXMLParserGetLocation_FxnInst = get_CFXMLParserGetLocation_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFXMLParserGetLocation_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, parser);
		CFXMLParserGetLocation_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFXMLParserGetSourceURL_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFXMLParserGetSourceURL_FxnInst(){
		return ((CFXMLParserGetSourceURL_FxnInst != null)
	? (CFXMLParserGetSourceURL_FxnInst)
	: (CFXMLParserGetSourceURL_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFXMLParserGetSourceURL", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFURLRefCFType CFXMLParserGetSourceURL(final com.apple.jobjc.corefoundation.CFXMLParserRefCFType parser){
			final com.apple.jobjc.Invoke.FunCall CFXMLParserGetSourceURL_FxnInst = get_CFXMLParserGetSourceURL_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFXMLParserGetSourceURL_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, parser);
		CFXMLParserGetSourceURL_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFURLRefCFType returnValue = (com.apple.jobjc.corefoundation.CFURLRefCFType) new com.apple.jobjc.corefoundation.CFURLRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFXMLParserGetStatusCode_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFXMLParserGetStatusCode_FxnInst(){
		return ((CFXMLParserGetStatusCode_FxnInst != null)
	? (CFXMLParserGetStatusCode_FxnInst)
	: (CFXMLParserGetStatusCode_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFXMLParserGetStatusCode", com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public long CFXMLParserGetStatusCode(final com.apple.jobjc.corefoundation.CFXMLParserRefCFType parser){
			final com.apple.jobjc.Invoke.FunCall CFXMLParserGetStatusCode_FxnInst = get_CFXMLParserGetStatusCode_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFXMLParserGetStatusCode_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, parser);
		CFXMLParserGetStatusCode_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFXMLParserGetTypeID_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFXMLParserGetTypeID_FxnInst(){
		return ((CFXMLParserGetTypeID_FxnInst != null)
	? (CFXMLParserGetTypeID_FxnInst)
	: (CFXMLParserGetTypeID_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFXMLParserGetTypeID", com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder)));
	}

	 public long CFXMLParserGetTypeID(){
			final com.apple.jobjc.Invoke.FunCall CFXMLParserGetTypeID_FxnInst = get_CFXMLParserGetTypeID_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFXMLParserGetTypeID_FxnInst.init(nativeBuffer);
		CFXMLParserGetTypeID_FxnInst.invoke(nativeBuffer);
		final long returnValue = (long) (com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.popLong(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFXMLParserParse_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFXMLParserParse_FxnInst(){
		return ((CFXMLParserParse_FxnInst != null)
	? (CFXMLParserParse_FxnInst)
	: (CFXMLParserParse_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFXMLParserParse", com.apple.jobjc.PrimitiveCoder.BoolCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public boolean CFXMLParserParse(final com.apple.jobjc.corefoundation.CFXMLParserRefCFType parser){
			final com.apple.jobjc.Invoke.FunCall CFXMLParserParse_FxnInst = get_CFXMLParserParse_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFXMLParserParse_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, parser);
		CFXMLParserParse_FxnInst.invoke(nativeBuffer);
		final boolean returnValue = (boolean) (com.apple.jobjc.PrimitiveCoder.BoolCoder.INST.popBoolean(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFXMLTreeCreateFromData_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFXMLTreeCreateFromData_FxnInst(){
		return ((CFXMLTreeCreateFromData_FxnInst != null)
	? (CFXMLTreeCreateFromData_FxnInst)
	: (CFXMLTreeCreateFromData_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFXMLTreeCreateFromData", com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public Object /* CFXMLTreeRef (^{__CFTree}, ^{__CFTree}) */ CFXMLTreeCreateFromData(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFDataRefCFType xmlData, final com.apple.jobjc.corefoundation.CFURLRefCFType dataSource, final long parseOptions, final long versionOfNodes){
			final com.apple.jobjc.Invoke.FunCall CFXMLTreeCreateFromData_FxnInst = get_CFXMLTreeCreateFromData_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFXMLTreeCreateFromData_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, xmlData);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, dataSource);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, parseOptions);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, versionOfNodes);
		CFXMLTreeCreateFromData_FxnInst.invoke(nativeBuffer);
		final Object /* CFXMLTreeRef (^{__CFTree}, ^{__CFTree}) */ returnValue = (Object /* CFXMLTreeRef (^{__CFTree}, ^{__CFTree}) */) (com.apple.jobjc.Coder.UnknownCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFXMLTreeCreateFromDataWithError_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFXMLTreeCreateFromDataWithError_FxnInst(){
		return ((CFXMLTreeCreateFromDataWithError_FxnInst != null)
	? (CFXMLTreeCreateFromDataWithError_FxnInst)
	: (CFXMLTreeCreateFromDataWithError_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFXMLTreeCreateFromDataWithError", com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public Object /* CFXMLTreeRef (^{__CFTree}, ^{__CFTree}) */ CFXMLTreeCreateFromDataWithError(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFDataRefCFType xmlData, final com.apple.jobjc.corefoundation.CFURLRefCFType dataSource, final long parseOptions, final long versionOfNodes, final com.apple.jobjc.Pointer<com.apple.jobjc.corefoundation.CFDictionaryRefCFType> errorDict){
			final com.apple.jobjc.Invoke.FunCall CFXMLTreeCreateFromDataWithError_FxnInst = get_CFXMLTreeCreateFromDataWithError_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFXMLTreeCreateFromDataWithError_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, xmlData);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, dataSource);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, parseOptions);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, versionOfNodes);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, errorDict);
		CFXMLTreeCreateFromDataWithError_FxnInst.invoke(nativeBuffer);
		final Object /* CFXMLTreeRef (^{__CFTree}, ^{__CFTree}) */ returnValue = (Object /* CFXMLTreeRef (^{__CFTree}, ^{__CFTree}) */) (com.apple.jobjc.Coder.UnknownCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFXMLTreeCreateWithDataFromURL_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFXMLTreeCreateWithDataFromURL_FxnInst(){
		return ((CFXMLTreeCreateWithDataFromURL_FxnInst != null)
	? (CFXMLTreeCreateWithDataFromURL_FxnInst)
	: (CFXMLTreeCreateWithDataFromURL_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFXMLTreeCreateWithDataFromURL", com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder, com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder)));
	}

	 public Object /* CFXMLTreeRef (^{__CFTree}, ^{__CFTree}) */ CFXMLTreeCreateWithDataFromURL(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFURLRefCFType dataSource, final long parseOptions, final long versionOfNodes){
			final com.apple.jobjc.Invoke.FunCall CFXMLTreeCreateWithDataFromURL_FxnInst = get_CFXMLTreeCreateWithDataFromURL_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFXMLTreeCreateWithDataFromURL_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, dataSource);
		com.apple.jobjc.MixedPrimitiveCoder.ULongULongLongCoder.push(nativeBuffer, parseOptions);
		com.apple.jobjc.MixedPrimitiveCoder.SLongSLongLongCoder.push(nativeBuffer, versionOfNodes);
		CFXMLTreeCreateWithDataFromURL_FxnInst.invoke(nativeBuffer);
		final Object /* CFXMLTreeRef (^{__CFTree}, ^{__CFTree}) */ returnValue = (Object /* CFXMLTreeRef (^{__CFTree}, ^{__CFTree}) */) (com.apple.jobjc.Coder.UnknownCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFXMLTreeCreateWithNode_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFXMLTreeCreateWithNode_FxnInst(){
		return ((CFXMLTreeCreateWithNode_FxnInst != null)
	? (CFXMLTreeCreateWithNode_FxnInst)
	: (CFXMLTreeCreateWithNode_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFXMLTreeCreateWithNode", com.apple.jobjc.Coder.UnknownCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST)));
	}

	 public Object /* CFXMLTreeRef (^{__CFTree}, ^{__CFTree}) */ CFXMLTreeCreateWithNode(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final com.apple.jobjc.corefoundation.CFXMLNodeRefCFType node){
			final com.apple.jobjc.Invoke.FunCall CFXMLTreeCreateWithNode_FxnInst = get_CFXMLTreeCreateWithNode_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFXMLTreeCreateWithNode_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, node);
		CFXMLTreeCreateWithNode_FxnInst.invoke(nativeBuffer);
		final Object /* CFXMLTreeRef (^{__CFTree}, ^{__CFTree}) */ returnValue = (Object /* CFXMLTreeRef (^{__CFTree}, ^{__CFTree}) */) (com.apple.jobjc.Coder.UnknownCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFXMLTreeCreateXMLData_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFXMLTreeCreateXMLData_FxnInst(){
		return ((CFXMLTreeCreateXMLData_FxnInst != null)
	? (CFXMLTreeCreateXMLData_FxnInst)
	: (CFXMLTreeCreateXMLData_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFXMLTreeCreateXMLData", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFDataRefCFType CFXMLTreeCreateXMLData(final com.apple.jobjc.corefoundation.CFAllocatorRefCFType allocator, final Object /* CFXMLTreeRef (^{__CFTree}, ^{__CFTree}) */ xmlTree){
			final com.apple.jobjc.Invoke.FunCall CFXMLTreeCreateXMLData_FxnInst = get_CFXMLTreeCreateXMLData_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFXMLTreeCreateXMLData_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.PointerCoder.INST.push(nativeBuffer, allocator);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, xmlTree);
		CFXMLTreeCreateXMLData_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFDataRefCFType returnValue = (com.apple.jobjc.corefoundation.CFDataRefCFType) new com.apple.jobjc.corefoundation.CFDataRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

	private static com.apple.jobjc.Invoke.FunCall CFXMLTreeGetNode_FxnInst;
	 final private com.apple.jobjc.Invoke.FunCall get_CFXMLTreeGetNode_FxnInst(){
		return ((CFXMLTreeGetNode_FxnInst != null)
	? (CFXMLTreeGetNode_FxnInst)
	: (CFXMLTreeGetNode_FxnInst = new com.apple.jobjc.Invoke.FunCall(this, "CFXMLTreeGetNode", com.apple.jobjc.Coder.PointerCoder.INST, com.apple.jobjc.Coder.UnknownCoder.INST)));
	}

	 public com.apple.jobjc.corefoundation.CFXMLNodeRefCFType CFXMLTreeGetNode(final Object /* CFXMLTreeRef (^{__CFTree}, ^{__CFTree}) */ xmlTree){
			final com.apple.jobjc.Invoke.FunCall CFXMLTreeGetNode_FxnInst = get_CFXMLTreeGetNode_FxnInst();

		final com.apple.jobjc.NativeArgumentBuffer nativeBuffer = getRuntime().getThreadLocalState();
		CFXMLTreeGetNode_FxnInst.init(nativeBuffer);
		com.apple.jobjc.Coder.UnknownCoder.INST.push(nativeBuffer, xmlTree);
		CFXMLTreeGetNode_FxnInst.invoke(nativeBuffer);
				final com.apple.jobjc.corefoundation.CFXMLNodeRefCFType returnValue = (com.apple.jobjc.corefoundation.CFXMLNodeRefCFType) new com.apple.jobjc.corefoundation.CFXMLNodeRefCFType(com.apple.jobjc.Coder.PointerCoder.INST.pop(nativeBuffer));
		return returnValue;
	}

}
