<?xml version='1.0'?>
<signatures version='1.0'>
<struct type='{_CFAllocatorContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;allocate&quot;^?&quot;reallocate&quot;^?&quot;deallocate&quot;^?&quot;preferredSize&quot;^?}' type64='{_CFAllocatorContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;allocate&quot;^?&quot;reallocate&quot;^?&quot;deallocate&quot;^?&quot;preferredSize&quot;^?}' name='CFAllocatorContext'>
<field type='l' type64='q' declared_type='CFIndex' name='version'/>
<field type='^v' declared_type='void*' name='info'/>
<field function_pointer='true' type='^?' declared_type='CFAllocatorRetainCallBack' name='retain'>
<arg const='true' type='^v' declared_type='void*'/>
<retval const='true' type='^v' declared_type='void*'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFAllocatorReleaseCallBack' name='release'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFAllocatorCopyDescriptionCallBack' name='copyDescription'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFAllocatorAllocateCallBack' name='allocate'>
<arg type='l' type64='q' declared_type='CFIndex'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags'/>
<arg type='^v' declared_type='void*'/>
<retval type='^v' declared_type='void*'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFAllocatorReallocateCallBack' name='reallocate'>
<arg type='^v' declared_type='void*'/>
<arg type='l' type64='q' declared_type='CFIndex'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags'/>
<arg type='^v' declared_type='void*'/>
<retval type='^v' declared_type='void*'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFAllocatorDeallocateCallBack' name='deallocate'>
<arg type='^v' declared_type='void*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFAllocatorPreferredSizeCallBack' name='preferredSize'>
<arg type='l' type64='q' declared_type='CFIndex'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags'/>
<arg type='^v' declared_type='void*'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</field>
</struct>
<struct type='{_CFArrayCallBacks=&quot;version&quot;i&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?}' type64='{_CFArrayCallBacks=&quot;version&quot;q&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?}' name='CFArrayCallBacks'>
<field type='l' type64='q' declared_type='CFIndex' name='version'/>
<field function_pointer='true' type='^?' declared_type='CFArrayRetainCallBack' name='retain'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg const='true' type='^v' declared_type='void*'/>
<retval const='true' type='^v' declared_type='void*'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFArrayReleaseCallBack' name='release'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFArrayCopyDescriptionCallBack' name='copyDescription'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFArrayEqualCallBack' name='equal'>
<arg const='true' type='^v' declared_type='void*'/>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='B' declared_type='Boolean'/>
</field>
</struct>
<struct type='{_CFBagCallBacks=&quot;version&quot;i&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?}' type64='{_CFBagCallBacks=&quot;version&quot;q&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?}' name='CFBagCallBacks'>
<field type='l' type64='q' declared_type='CFIndex' name='version'/>
<field function_pointer='true' type='^?' declared_type='CFBagRetainCallBack' name='retain'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg const='true' type='^v' declared_type='void*'/>
<retval const='true' type='^v' declared_type='void*'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFBagReleaseCallBack' name='release'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFBagCopyDescriptionCallBack' name='copyDescription'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFBagEqualCallBack' name='equal'>
<arg const='true' type='^v' declared_type='void*'/>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='B' declared_type='Boolean'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFBagHashCallBack' name='hash'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='L' type64='Q' declared_type='CFHashCode'/>
</field>
</struct>
<struct type='{_CFBinaryHeapCallBacks=&quot;version&quot;i&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;compare&quot;^?}' type64='{_CFBinaryHeapCallBacks=&quot;version&quot;q&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;compare&quot;^?}' name='CFBinaryHeapCallBacks'>
<field type='l' type64='q' declared_type='CFIndex' name='version'/>
<field const='true' function_pointer='true' type='^?' declared_type='void *(*)(CFAllocatorRef, void *)' name='retain'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg const='true' type='^v' declared_type='void*'/>
<retval const='true' type='^v' declared_type='void*'/>
</field>
<field function_pointer='true' type='^?' declared_type='void (*)(CFAllocatorRef, void *)' name='release'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFStringRef (*)(void *)' name='copyDescription'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFComparisonResult (*)(void *, void *, void *)' name='compare'>
<arg const='true' type='^v' declared_type='void*'/>
<arg const='true' type='^v' declared_type='void*'/>
<arg type='^v' declared_type='void*'/>
<retval type='l' type64='q' declared_type='CFComparisonResult'/>
</field>
</struct>
<struct type='{_CFBinaryHeapCompareContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' type64='{_CFBinaryHeapCompareContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFBinaryHeapCompareContext'>
<field type='l' type64='q' declared_type='CFIndex' name='version'/>
<field type='^v' declared_type='void*' name='info'/>
<field const='true' function_pointer='true' type='^?' declared_type='void *(*)(void *)' name='retain'>
<arg const='true' type='^v' declared_type='void*'/>
<retval const='true' type='^v' declared_type='void*'/>
</field>
<field function_pointer='true' type='^?' declared_type='void (*)(void *)' name='release'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFStringRef (*)(void *)' name='copyDescription'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFDictionaryKeyCallBacks=&quot;version&quot;i&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?}' type64='{_CFDictionaryKeyCallBacks=&quot;version&quot;q&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?}' name='CFDictionaryKeyCallBacks'>
<field type='l' type64='q' declared_type='CFIndex' name='version'/>
<field function_pointer='true' type='^?' declared_type='CFDictionaryRetainCallBack' name='retain'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg const='true' type='^v' declared_type='void*'/>
<retval const='true' type='^v' declared_type='void*'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFDictionaryReleaseCallBack' name='release'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFDictionaryCopyDescriptionCallBack' name='copyDescription'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFDictionaryEqualCallBack' name='equal'>
<arg const='true' type='^v' declared_type='void*'/>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='B' declared_type='Boolean'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFDictionaryHashCallBack' name='hash'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='L' type64='Q' declared_type='CFHashCode'/>
</field>
</struct>
<struct type='{_CFDictionaryValueCallBacks=&quot;version&quot;i&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?}' type64='{_CFDictionaryValueCallBacks=&quot;version&quot;q&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?}' name='CFDictionaryValueCallBacks'>
<field type='l' type64='q' declared_type='CFIndex' name='version'/>
<field function_pointer='true' type='^?' declared_type='CFDictionaryRetainCallBack' name='retain'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg const='true' type='^v' declared_type='void*'/>
<retval const='true' type='^v' declared_type='void*'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFDictionaryReleaseCallBack' name='release'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFDictionaryCopyDescriptionCallBack' name='copyDescription'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFDictionaryEqualCallBack' name='equal'>
<arg const='true' type='^v' declared_type='void*'/>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='B' declared_type='Boolean'/>
</field>
</struct>
<struct type='{_CFFileDescriptorContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' type64='{_CFFileDescriptorContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFFileDescriptorContext'>
<field type='l' type64='q' declared_type='CFIndex' name='version'/>
<field type='^v' declared_type='void*' name='info'/>
<field function_pointer='true' type='^?' declared_type='void *(*)(void *)' name='retain'>
<arg type='^v' declared_type='void*'/>
<retval type='^v' declared_type='void*'/>
</field>
<field function_pointer='true' type='^?' declared_type='void (*)(void *)' name='release'>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFStringRef (*)(void *)' name='copyDescription'>
<arg type='^v' declared_type='void*'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFGregorianDate=&quot;year&quot;i&quot;month&quot;c&quot;day&quot;c&quot;hour&quot;c&quot;minute&quot;c&quot;second&quot;d}' name='CFGregorianDate'>
<field type='l' type64='i' declared_type='SInt32' name='year'/>
<field type='c' declared_type='SInt8' name='month'/>
<field type='c' declared_type='SInt8' name='day'/>
<field type='c' declared_type='SInt8' name='hour'/>
<field type='c' declared_type='SInt8' name='minute'/>
<field type='d' declared_type='double' name='second'/>
</struct>
<struct type='{_CFGregorianUnits=&quot;years&quot;i&quot;months&quot;i&quot;days&quot;i&quot;hours&quot;i&quot;minutes&quot;i&quot;seconds&quot;d}' name='CFGregorianUnits'>
<field type='l' type64='i' declared_type='SInt32' name='years'/>
<field type='l' type64='i' declared_type='SInt32' name='months'/>
<field type='l' type64='i' declared_type='SInt32' name='days'/>
<field type='l' type64='i' declared_type='SInt32' name='hours'/>
<field type='l' type64='i' declared_type='SInt32' name='minutes'/>
<field type='d' declared_type='double' name='seconds'/>
</struct>
<struct type='{_CFMachPortContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' type64='{_CFMachPortContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFMachPortContext'>
<field type='l' type64='q' declared_type='CFIndex' name='version'/>
<field type='^v' declared_type='void*' name='info'/>
<field const='true' function_pointer='true' type='^?' declared_type='void *(*)(void *)' name='retain'>
<arg const='true' type='^v' declared_type='void*'/>
<retval const='true' type='^v' declared_type='void*'/>
</field>
<field function_pointer='true' type='^?' declared_type='void (*)(void *)' name='release'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFStringRef (*)(void *)' name='copyDescription'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFMessagePortContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' type64='{_CFMessagePortContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFMessagePortContext'>
<field type='l' type64='q' declared_type='CFIndex' name='version'/>
<field type='^v' declared_type='void*' name='info'/>
<field const='true' function_pointer='true' type='^?' declared_type='void *(*)(void *)' name='retain'>
<arg const='true' type='^v' declared_type='void*'/>
<retval const='true' type='^v' declared_type='void*'/>
</field>
<field function_pointer='true' type='^?' declared_type='void (*)(void *)' name='release'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFStringRef (*)(void *)' name='copyDescription'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFRange=&quot;location&quot;i&quot;length&quot;i}' type64='{_CFRange=&quot;location&quot;q&quot;length&quot;q}' name='CFRange'>
<field type='l' type64='q' declared_type='CFIndex' name='location'/>
<field type='l' type64='q' declared_type='CFIndex' name='length'/>
</struct>
<struct type='{_CFRunLoopObserverContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' type64='{_CFRunLoopObserverContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFRunLoopObserverContext'>
<field type='l' type64='q' declared_type='CFIndex' name='version'/>
<field type='^v' declared_type='void*' name='info'/>
<field const='true' function_pointer='true' type='^?' declared_type='void *(*)(void *)' name='retain'>
<arg const='true' type='^v' declared_type='void*'/>
<retval const='true' type='^v' declared_type='void*'/>
</field>
<field function_pointer='true' type='^?' declared_type='void (*)(void *)' name='release'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFStringRef (*)(void *)' name='copyDescription'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFRunLoopSourceContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?&quot;schedule&quot;^?&quot;cancel&quot;^?&quot;perform&quot;^?}' type64='{_CFRunLoopSourceContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?&quot;schedule&quot;^?&quot;cancel&quot;^?&quot;perform&quot;^?}' name='CFRunLoopSourceContext'>
<field type='l' type64='q' declared_type='CFIndex' name='version'/>
<field type='^v' declared_type='void*' name='info'/>
<field const='true' function_pointer='true' type='^?' declared_type='void *(*)(void *)' name='retain'>
<arg const='true' type='^v' declared_type='void*'/>
<retval const='true' type='^v' declared_type='void*'/>
</field>
<field function_pointer='true' type='^?' declared_type='void (*)(void *)' name='release'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFStringRef (*)(void *)' name='copyDescription'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
<field function_pointer='true' type='^?' declared_type='Boolean (*)(void *, void *)' name='equal'>
<arg const='true' type='^v' declared_type='void*'/>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='B' declared_type='Boolean'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFHashCode (*)(void *)' name='hash'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='L' type64='Q' declared_type='CFHashCode'/>
</field>
<field function_pointer='true' type='^?' declared_type='void (*)(void *, CFRunLoopRef, CFStringRef)' name='schedule'>
<arg type='^v' declared_type='void*'/>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef'/>
<arg type='^{__CFString=}' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' declared_type='void (*)(void *, CFRunLoopRef, CFStringRef)' name='cancel'>
<arg type='^v' declared_type='void*'/>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef'/>
<arg type='^{__CFString=}' declared_type='CFStringRef'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' declared_type='void (*)(void *)' name='perform'>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
</struct>
<struct type='{_CFRunLoopSourceContext1=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?&quot;getPort&quot;^?&quot;perform&quot;^?}' type64='{_CFRunLoopSourceContext1=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?&quot;getPort&quot;^?&quot;perform&quot;^?}' name='CFRunLoopSourceContext1'>
<field type='l' type64='q' declared_type='CFIndex' name='version'/>
<field type='^v' declared_type='void*' name='info'/>
<field const='true' function_pointer='true' type='^?' declared_type='void *(*)(void *)' name='retain'>
<arg const='true' type='^v' declared_type='void*'/>
<retval const='true' type='^v' declared_type='void*'/>
</field>
<field function_pointer='true' type='^?' declared_type='void (*)(void *)' name='release'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFStringRef (*)(void *)' name='copyDescription'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
<field function_pointer='true' type='^?' declared_type='Boolean (*)(void *, void *)' name='equal'>
<arg const='true' type='^v' declared_type='void*'/>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='B' declared_type='Boolean'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFHashCode (*)(void *)' name='hash'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='L' type64='Q' declared_type='CFHashCode'/>
</field>
<field function_pointer='true' type='^?' declared_type='mach_port_t (*)(void *)' name='getPort'>
<arg type='^v' declared_type='void*'/>
<retval type='I' declared_type='mach_port_t'/>
</field>
<field function_pointer='true' type='^?' declared_type='void *(*)(void *, CFIndex, CFAllocatorRef, void *)' name='perform'>
<arg type='^v' declared_type='void*'/>
<arg type='l' type64='q' declared_type='CFIndex'/>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^v' declared_type='void*'/>
<retval type='^v' declared_type='void*'/>
</field>
</struct>
<struct type='{_CFRunLoopTimerContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' type64='{_CFRunLoopTimerContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFRunLoopTimerContext'>
<field type='l' type64='q' declared_type='CFIndex' name='version'/>
<field type='^v' declared_type='void*' name='info'/>
<field const='true' function_pointer='true' type='^?' declared_type='void *(*)(void *)' name='retain'>
<arg const='true' type='^v' declared_type='void*'/>
<retval const='true' type='^v' declared_type='void*'/>
</field>
<field function_pointer='true' type='^?' declared_type='void (*)(void *)' name='release'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFStringRef (*)(void *)' name='copyDescription'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFSetCallBacks=&quot;version&quot;i&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?}' type64='{_CFSetCallBacks=&quot;version&quot;q&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?}' name='CFSetCallBacks'>
<field type='l' type64='q' declared_type='CFIndex' name='version'/>
<field function_pointer='true' type='^?' declared_type='CFSetRetainCallBack' name='retain'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg const='true' type='^v' declared_type='void*'/>
<retval const='true' type='^v' declared_type='void*'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFSetReleaseCallBack' name='release'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFSetCopyDescriptionCallBack' name='copyDescription'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFSetEqualCallBack' name='equal'>
<arg const='true' type='^v' declared_type='void*'/>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='B' declared_type='Boolean'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFSetHashCallBack' name='hash'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='L' type64='Q' declared_type='CFHashCode'/>
</field>
</struct>
<struct type='{_CFSocketContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' type64='{_CFSocketContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFSocketContext'>
<field type='l' type64='q' declared_type='CFIndex' name='version'/>
<field type='^v' declared_type='void*' name='info'/>
<field const='true' function_pointer='true' type='^?' declared_type='void *(*)(void *)' name='retain'>
<arg const='true' type='^v' declared_type='void*'/>
<retval const='true' type='^v' declared_type='void*'/>
</field>
<field function_pointer='true' type='^?' declared_type='void (*)(void *)' name='release'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFStringRef (*)(void *)' name='copyDescription'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFSocketSignature=&quot;protocolFamily&quot;i&quot;socketType&quot;i&quot;protocol&quot;i&quot;address&quot;^{__CFData}}' name='CFSocketSignature'>
<field type='l' type64='i' declared_type='SInt32' name='protocolFamily'/>
<field type='l' type64='i' declared_type='SInt32' name='socketType'/>
<field type='l' type64='i' declared_type='SInt32' name='protocol'/>
<field type='^{__CFData=}' declared_type='CFDataRef' name='address'/>
</struct>
<struct type='{_CFStreamClientContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' type64='{_CFStreamClientContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFStreamClientContext'>
<field type='l' type64='q' declared_type='CFIndex' name='version'/>
<field type='^v' declared_type='void*' name='info'/>
<field function_pointer='true' type='^?' declared_type='void *(*)(void *)' name='retain'>
<arg type='^v' declared_type='void*'/>
<retval type='^v' declared_type='void*'/>
</field>
<field function_pointer='true' type='^?' declared_type='void (*)(void *)' name='release'>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFStringRef (*)(void *)' name='copyDescription'>
<arg type='^v' declared_type='void*'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFStreamError=&quot;domain&quot;i&quot;error&quot;i}' type64='{_CFStreamError=&quot;domain&quot;q&quot;error&quot;i}' name='CFStreamError'>
<field type='l' type64='q' declared_type='CFIndex' name='domain'/>
<field type='l' type64='i' declared_type='SInt32' name='error'/>
</struct>
<struct type='{_CFStringInlineBuffer=&quot;buffer&quot;[64S]&quot;theString&quot;^{__CFString}&quot;directBuffer&quot;^S&quot;rangeToBuffer&quot;{_CFRange=&quot;location&quot;i&quot;length&quot;i}&quot;bufferedRangeStart&quot;i&quot;bufferedRangeEnd&quot;i}' type64='{_CFStringInlineBuffer=&quot;buffer&quot;[64S]&quot;theString&quot;^{__CFString}&quot;directBuffer&quot;^S&quot;rangeToBuffer&quot;{_CFRange=&quot;location&quot;q&quot;length&quot;q}&quot;bufferedRangeStart&quot;q&quot;bufferedRangeEnd&quot;q}' name='CFStringInlineBuffer'>
<field type='[64S]' declared_type='UniChar*' name='buffer'/>
<field type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<field const='true' type='^S' declared_type='UniChar*' name='directBuffer'/>
<field type='{_CFRange=&quot;location&quot;i&quot;length&quot;i}' type64='{_CFRange=&quot;location&quot;q&quot;length&quot;q}' declared_type='CFRange' name='rangeToBuffer'/>
<field type='l' type64='q' declared_type='CFIndex' name='bufferedRangeStart'/>
<field type='l' type64='q' declared_type='CFIndex' name='bufferedRangeEnd'/>
</struct>
<struct type='{_CFSwappedFloat32=&quot;v&quot;I}' name='CFSwappedFloat32'>
<field type='I' declared_type='uint32_t' name='v'/>
</struct>
<struct type='{_CFSwappedFloat64=&quot;v&quot;Q}' name='CFSwappedFloat64'>
<field type='Q' declared_type='uint64_t' name='v'/>
</struct>
<struct type='{_CFTreeContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' type64='{_CFTreeContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFTreeContext'>
<field type='l' type64='q' declared_type='CFIndex' name='version'/>
<field type='^v' declared_type='void*' name='info'/>
<field function_pointer='true' type='^?' declared_type='CFTreeRetainCallBack' name='retain'>
<arg const='true' type='^v' declared_type='void*'/>
<retval const='true' type='^v' declared_type='void*'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFTreeReleaseCallBack' name='release'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFTreeCopyDescriptionCallBack' name='copyDescription'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFUUIDBytes=&quot;byte0&quot;C&quot;byte1&quot;C&quot;byte2&quot;C&quot;byte3&quot;C&quot;byte4&quot;C&quot;byte5&quot;C&quot;byte6&quot;C&quot;byte7&quot;C&quot;byte8&quot;C&quot;byte9&quot;C&quot;byte10&quot;C&quot;byte11&quot;C&quot;byte12&quot;C&quot;byte13&quot;C&quot;byte14&quot;C&quot;byte15&quot;C}' name='CFUUIDBytes'>
<field type='C' declared_type='UInt8' name='byte0'/>
<field type='C' declared_type='UInt8' name='byte1'/>
<field type='C' declared_type='UInt8' name='byte2'/>
<field type='C' declared_type='UInt8' name='byte3'/>
<field type='C' declared_type='UInt8' name='byte4'/>
<field type='C' declared_type='UInt8' name='byte5'/>
<field type='C' declared_type='UInt8' name='byte6'/>
<field type='C' declared_type='UInt8' name='byte7'/>
<field type='C' declared_type='UInt8' name='byte8'/>
<field type='C' declared_type='UInt8' name='byte9'/>
<field type='C' declared_type='UInt8' name='byte10'/>
<field type='C' declared_type='UInt8' name='byte11'/>
<field type='C' declared_type='UInt8' name='byte12'/>
<field type='C' declared_type='UInt8' name='byte13'/>
<field type='C' declared_type='UInt8' name='byte14'/>
<field type='C' declared_type='UInt8' name='byte15'/>
</struct>
<struct type='{_CFXMLAttributeDeclarationInfo=&quot;attributeName&quot;^{__CFString}&quot;typeString&quot;^{__CFString}&quot;defaultString&quot;^{__CFString}}' name='CFXMLAttributeDeclarationInfo'>
<field type='^{__CFString=}' declared_type='CFStringRef' name='attributeName'/>
<field type='^{__CFString=}' declared_type='CFStringRef' name='typeString'/>
<field type='^{__CFString=}' declared_type='CFStringRef' name='defaultString'/>
</struct>
<struct type='{_CFXMLAttributeListDeclarationInfo=&quot;numberOfAttributes&quot;i&quot;attributes&quot;^{_CFXMLAttributeDeclarationInfo=&quot;attributeName&quot;^{__CFString}&quot;typeString&quot;^{__CFString}&quot;defaultString&quot;^{__CFString}}}' type64='{_CFXMLAttributeListDeclarationInfo=&quot;numberOfAttributes&quot;q&quot;attributes&quot;^{_CFXMLAttributeDeclarationInfo=&quot;attributeName&quot;^{__CFString}&quot;typeString&quot;^{__CFString}&quot;defaultString&quot;^{__CFString}}}' name='CFXMLAttributeListDeclarationInfo'>
<field type='l' type64='q' declared_type='CFIndex' name='numberOfAttributes'/>
<field type='^{_CFXMLAttributeDeclarationInfo=&quot;attributeName&quot;^{__CFString}&quot;typeString&quot;^{__CFString}&quot;defaultString&quot;^{__CFString}}' declared_type='CFXMLAttributeDeclarationInfo*' name='attributes'/>
</struct>
<struct type='{_CFXMLDocumentInfo=&quot;sourceURL&quot;^{__CFURL}&quot;encoding&quot;I}' name='CFXMLDocumentInfo'>
<field type='^{__CFURL=}' declared_type='CFURLRef' name='sourceURL'/>
<field type='L' type64='I' declared_type='CFStringEncoding' name='encoding'/>
</struct>
<struct type='{_CFXMLDocumentTypeInfo=&quot;externalID&quot;{_CFXMLExternalID=&quot;systemID&quot;^{__CFURL}&quot;publicID&quot;^{__CFString}}}' name='CFXMLDocumentTypeInfo'>
<field type='{_CFXMLExternalID=&quot;systemID&quot;^{__CFURL}&quot;publicID&quot;^{__CFString}}' declared_type='CFXMLExternalID' name='externalID'/>
</struct>
<struct type='{_CFXMLElementInfo=&quot;attributes&quot;^{__CFDictionary}&quot;attributeOrder&quot;^{__CFArray}&quot;isEmpty&quot;B&quot;_reserved&quot;[3c]}' name='CFXMLElementInfo'>
<field type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='attributes'/>
<field type='^{__CFArray=}' declared_type='CFArrayRef' name='attributeOrder'/>
<field type='B' declared_type='Boolean' name='isEmpty'/>
<field type='[3c]' declared_type='char*' name='_reserved'/>
</struct>
<struct type='{_CFXMLElementTypeDeclarationInfo=&quot;contentDescription&quot;^{__CFString}}' name='CFXMLElementTypeDeclarationInfo'>
<field type='^{__CFString=}' declared_type='CFStringRef' name='contentDescription'/>
</struct>
<struct type='{_CFXMLEntityInfo=&quot;entityType&quot;i&quot;replacementText&quot;^{__CFString}&quot;entityID&quot;{_CFXMLExternalID=&quot;systemID&quot;^{__CFURL}&quot;publicID&quot;^{__CFString}}&quot;notationName&quot;^{__CFString}}' type64='{_CFXMLEntityInfo=&quot;entityType&quot;q&quot;replacementText&quot;^{__CFString}&quot;entityID&quot;{_CFXMLExternalID=&quot;systemID&quot;^{__CFURL}&quot;publicID&quot;^{__CFString}}&quot;notationName&quot;^{__CFString}}' name='CFXMLEntityInfo'>
<field type='l' type64='q' declared_type='CFXMLEntityTypeCode' name='entityType'/>
<field type='^{__CFString=}' declared_type='CFStringRef' name='replacementText'/>
<field type='{_CFXMLExternalID=&quot;systemID&quot;^{__CFURL}&quot;publicID&quot;^{__CFString}}' declared_type='CFXMLExternalID' name='entityID'/>
<field type='^{__CFString=}' declared_type='CFStringRef' name='notationName'/>
</struct>
<struct type='{_CFXMLEntityReferenceInfo=&quot;entityType&quot;i}' type64='{_CFXMLEntityReferenceInfo=&quot;entityType&quot;q}' name='CFXMLEntityReferenceInfo'>
<field type='l' type64='q' declared_type='CFXMLEntityTypeCode' name='entityType'/>
</struct>
<struct type='{_CFXMLExternalID=&quot;systemID&quot;^{__CFURL}&quot;publicID&quot;^{__CFString}}' name='CFXMLExternalID'>
<field type='^{__CFURL=}' declared_type='CFURLRef' name='systemID'/>
<field type='^{__CFString=}' declared_type='CFStringRef' name='publicID'/>
</struct>
<struct type='{_CFXMLNotationInfo=&quot;externalID&quot;{_CFXMLExternalID=&quot;systemID&quot;^{__CFURL}&quot;publicID&quot;^{__CFString}}}' name='CFXMLNotationInfo'>
<field type='{_CFXMLExternalID=&quot;systemID&quot;^{__CFURL}&quot;publicID&quot;^{__CFString}}' declared_type='CFXMLExternalID' name='externalID'/>
</struct>
<struct type='{_CFXMLParserCallBacks=&quot;version&quot;i&quot;createXMLStructure&quot;^?&quot;addChild&quot;^?&quot;endXMLStructure&quot;^?&quot;resolveExternalEntity&quot;^?&quot;handleError&quot;^?}' type64='{_CFXMLParserCallBacks=&quot;version&quot;q&quot;createXMLStructure&quot;^?&quot;addChild&quot;^?&quot;endXMLStructure&quot;^?&quot;resolveExternalEntity&quot;^?&quot;handleError&quot;^?}' name='CFXMLParserCallBacks'>
<field type='l' type64='q' declared_type='CFIndex' name='version'/>
<field function_pointer='true' type='^?' declared_type='CFXMLParserCreateXMLStructureCallBack' name='createXMLStructure'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef'/>
<arg type='^{__CFXMLNode=}' declared_type='CFXMLNodeRef'/>
<arg type='^v' declared_type='void*'/>
<retval type='^v' declared_type='void*'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFXMLParserAddChildCallBack' name='addChild'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef'/>
<arg type='^v' declared_type='void*'/>
<arg type='^v' declared_type='void*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFXMLParserEndXMLStructureCallBack' name='endXMLStructure'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef'/>
<arg type='^v' declared_type='void*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFXMLParserResolveExternalEntityCallBack' name='resolveExternalEntity'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef'/>
<arg type='^{_CFXMLExternalID=^{__CFURL}^{__CFString}}' declared_type='CFXMLExternalID*'/>
<arg type='^v' declared_type='void*'/>
<retval type='^{__CFData=}' declared_type='CFDataRef'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFXMLParserHandleErrorCallBack' name='handleError'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef'/>
<arg type='l' type64='q' declared_type='CFXMLParserStatusCode'/>
<arg type='^v' declared_type='void*'/>
<retval type='B' declared_type='Boolean'/>
</field>
</struct>
<struct type='{_CFXMLParserContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' type64='{_CFXMLParserContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' name='CFXMLParserContext'>
<field type='l' type64='q' declared_type='CFIndex' name='version'/>
<field type='^v' declared_type='void*' name='info'/>
<field function_pointer='true' type='^?' declared_type='CFXMLParserRetainCallBack' name='retain'>
<arg const='true' type='^v' declared_type='void*'/>
<retval const='true' type='^v' declared_type='void*'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFXMLParserReleaseCallBack' name='release'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' declared_type='CFXMLParserCopyDescriptionCallBack' name='copyDescription'>
<arg const='true' type='^v' declared_type='void*'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</field>
</struct>
<struct type='{_CFXMLProcessingInstructionInfo=&quot;dataString&quot;^{__CFString}}' name='CFXMLProcessingInstructionInfo'>
<field type='^{__CFString=}' declared_type='CFStringRef' name='dataString'/>
</struct>
<struct type='{IUnknownVTbl=&quot;_reserved&quot;^v&quot;QueryInterface&quot;^?&quot;AddRef&quot;^?&quot;Release&quot;^?}' name='IUnknownVTbl'>
<field type='^v' declared_type='void*' name='_reserved'/>
<field function_pointer='true' type='^?' declared_type='HRESULT (*)(void *, REFIID, LPVOID *)' name='QueryInterface'>
<arg type='^v' declared_type='void*'/>
<arg type='{_REFIID=CCCCCCCCCCCCCCCC}' declared_type='REFIID'/>
<arg type='^^v' declared_type='LPVOID*'/>
<retval type='l' type64='i' declared_type='HRESULT'/>
</field>
<field function_pointer='true' type='^?' declared_type='ULONG (*)(void *)' name='AddRef'>
<arg type='^v' declared_type='void*'/>
<retval type='L' type64='I' declared_type='ULONG'/>
</field>
<field function_pointer='true' type='^?' declared_type='ULONG (*)(void *)' name='Release'>
<arg type='^v' declared_type='void*'/>
<retval type='L' type64='I' declared_type='ULONG'/>
</field>
</struct>
<struct type='{_REFIID=&quot;byte0&quot;C&quot;byte1&quot;C&quot;byte2&quot;C&quot;byte3&quot;C&quot;byte4&quot;C&quot;byte5&quot;C&quot;byte6&quot;C&quot;byte7&quot;C&quot;byte8&quot;C&quot;byte9&quot;C&quot;byte10&quot;C&quot;byte11&quot;C&quot;byte12&quot;C&quot;byte13&quot;C&quot;byte14&quot;C&quot;byte15&quot;C}' name='REFIID'>
<field type='C' declared_type='UInt8' name='byte0'/>
<field type='C' declared_type='UInt8' name='byte1'/>
<field type='C' declared_type='UInt8' name='byte2'/>
<field type='C' declared_type='UInt8' name='byte3'/>
<field type='C' declared_type='UInt8' name='byte4'/>
<field type='C' declared_type='UInt8' name='byte5'/>
<field type='C' declared_type='UInt8' name='byte6'/>
<field type='C' declared_type='UInt8' name='byte7'/>
<field type='C' declared_type='UInt8' name='byte8'/>
<field type='C' declared_type='UInt8' name='byte9'/>
<field type='C' declared_type='UInt8' name='byte10'/>
<field type='C' declared_type='UInt8' name='byte11'/>
<field type='C' declared_type='UInt8' name='byte12'/>
<field type='C' declared_type='UInt8' name='byte13'/>
<field type='C' declared_type='UInt8' name='byte14'/>
<field type='C' declared_type='UInt8' name='byte15'/>
</struct>
<cftype tollfree='__NSCFType' type='^{__CFAllocator=}' gettypeid_func='CFAllocatorGetTypeID' name='CFAllocatorRef'/>
<cftype tollfree='__NSCFArray' type='^{__CFArray=}' gettypeid_func='CFArrayGetTypeID' name='CFArrayRef'/>
<cftype tollfree='__NSCFAttributedString' type='^{__CFAttributedString=}' gettypeid_func='CFAttributedStringGetTypeID' name='CFAttributedStringRef'/>
<cftype tollfree='__NSCFType' type='^{__CFBag=}' gettypeid_func='CFBagGetTypeID' name='CFBagRef'/>
<cftype tollfree='__NSCFType' type='^{__CFBinaryHeap=}' gettypeid_func='CFBinaryHeapGetTypeID' name='CFBinaryHeapRef'/>
<cftype tollfree='__NSCFType' type='^{__CFBitVector=}' gettypeid_func='CFBitVectorGetTypeID' name='CFBitVectorRef'/>
<cftype tollfree='__NSCFBoolean' type='^{__CFBoolean=}' gettypeid_func='CFBooleanGetTypeID' name='CFBooleanRef'/>
<cftype tollfree='__NSCFType' type='^{__CFBundle=}' gettypeid_func='CFBundleGetTypeID' name='CFBundleRef'/>
<cftype tollfree='__NSCFCalendar' type='^{__CFCalendar=}' gettypeid_func='CFCalendarGetTypeID' name='CFCalendarRef'/>
<cftype tollfree='__NSCFCharacterSet' type='^{__CFCharacterSet=}' gettypeid_func='CFCharacterSetGetTypeID' name='CFCharacterSetRef'/>
<cftype tollfree='__NSCFData' type='^{__CFData=}' gettypeid_func='CFDataGetTypeID' name='CFDataRef'/>
<cftype tollfree='__NSCFType' type='^{__CFDateFormatter=}' gettypeid_func='CFDateFormatterGetTypeID' name='CFDateFormatterRef'/>
<cftype tollfree='__NSCFType' type='^{__CFDate=}' gettypeid_func='CFDateGetTypeID' name='CFDateRef'/>
<cftype tollfree='__NSCFDictionary' type='^{__CFDictionary=}' gettypeid_func='CFDictionaryGetTypeID' name='CFDictionaryRef'/>
<cftype tollfree='__NSCFError' type='^{__CFError=}' gettypeid_func='CFErrorGetTypeID' name='CFErrorRef'/>
<cftype tollfree='__NSCFType' type='^{__CFFileDescriptor=}' gettypeid_func='CFFileDescriptorGetTypeID' name='CFFileDescriptorRef'/>
<cftype tollfree='__NSCFType' type='^{__CFFileSecurity=}' gettypeid_func='CFFileSecurityGetTypeID' name='CFFileSecurityRef'/>
<cftype tollfree='__NSCFLocale' type='^{__CFLocale=}' gettypeid_func='CFLocaleGetTypeID' name='CFLocaleRef'/>
<cftype tollfree='NSMachPort' type='^{__CFMachPort=}' gettypeid_func='CFMachPortGetTypeID' name='CFMachPortRef'/>
<cftype tollfree='__NSCFType' type='^{__CFMessagePort=}' gettypeid_func='CFMessagePortGetTypeID' name='CFMessagePortRef'/>
<cftype tollfree='__NSCFArray' type='^{__CFArray=}' gettypeid_func='CFArrayGetTypeID' name='CFMutableArrayRef'/>
<cftype tollfree='__NSCFAttributedString' type='^{__CFAttributedString=}' gettypeid_func='CFAttributedStringGetTypeID' name='CFMutableAttributedStringRef'/>
<cftype tollfree='__NSCFType' type='^{__CFBag=}' gettypeid_func='CFBagGetTypeID' name='CFMutableBagRef'/>
<cftype tollfree='__NSCFType' type='^{__CFBitVector=}' gettypeid_func='CFBitVectorGetTypeID' name='CFMutableBitVectorRef'/>
<cftype tollfree='__NSCFCharacterSet' type='^{__CFCharacterSet=}' gettypeid_func='CFCharacterSetGetTypeID' name='CFMutableCharacterSetRef'/>
<cftype tollfree='__NSCFData' type='^{__CFData=}' gettypeid_func='CFDataGetTypeID' name='CFMutableDataRef'/>
<cftype tollfree='__NSCFDictionary' type='^{__CFDictionary=}' gettypeid_func='CFDictionaryGetTypeID' name='CFMutableDictionaryRef'/>
<cftype tollfree='__NSCFSet' type='^{__CFSet=}' gettypeid_func='CFSetGetTypeID' name='CFMutableSetRef'/>
<cftype tollfree='__NSCFString' type='^{__CFString=}' gettypeid_func='CFStringGetTypeID' name='CFMutableStringRef'/>
<cftype tollfree='__NSCFType' type='^{__CFNotificationCenter=}' gettypeid_func='CFNotificationCenterGetTypeID' name='CFNotificationCenterRef'/>
<cftype tollfree='NSNull' type='^{__CFNull=}' gettypeid_func='CFNullGetTypeID' name='CFNullRef'/>
<cftype tollfree='__NSCFType' type='^{__CFNumberFormatter=}' gettypeid_func='CFNumberFormatterGetTypeID' name='CFNumberFormatterRef'/>
<cftype tollfree='__NSCFNumber' type='^{__CFNumber=}' gettypeid_func='CFNumberGetTypeID' name='CFNumberRef'/>
<cftype tollfree='__NSCFType' type='^{__CFPlugInInstance=}' gettypeid_func='CFPlugInInstanceGetTypeID' name='CFPlugInInstanceRef'/>
<cftype tollfree='__NSCFType' type='^{__CFBundle=}' gettypeid_func='CFPlugInGetTypeID' name='CFPlugInRef'/>
<cftype tollfree='__NSCFInputStream' type='^{__CFReadStream=}' gettypeid_func='CFReadStreamGetTypeID' name='CFReadStreamRef'/>
<cftype tollfree='__NSCFType' type='^{__CFRunLoopObserver=}' gettypeid_func='CFRunLoopObserverGetTypeID' name='CFRunLoopObserverRef'/>
<cftype tollfree='__NSCFType' type='^{__CFRunLoop=}' gettypeid_func='CFRunLoopGetTypeID' name='CFRunLoopRef'/>
<cftype tollfree='__NSCFType' type='^{__CFRunLoopSource=}' gettypeid_func='CFRunLoopSourceGetTypeID' name='CFRunLoopSourceRef'/>
<cftype tollfree='__NSCFTimer' type='^{__CFRunLoopTimer=}' gettypeid_func='CFRunLoopTimerGetTypeID' name='CFRunLoopTimerRef'/>
<cftype tollfree='__NSCFSet' type='^{__CFSet=}' gettypeid_func='CFSetGetTypeID' name='CFSetRef'/>
<cftype tollfree='__NSCFType' type='^{__CFSocket=}' gettypeid_func='CFSocketGetTypeID' name='CFSocketRef'/>
<cftype tollfree='__NSCFString' type='^{__CFString=}' gettypeid_func='CFStringGetTypeID' name='CFStringRef'/>
<cftype tollfree='__NSCFType' type='^{__CFStringTokenizer=}' gettypeid_func='CFStringTokenizerGetTypeID' name='CFStringTokenizerRef'/>
<cftype tollfree='__NSCFType' type='^{__CFTimeZone=}' gettypeid_func='CFTimeZoneGetTypeID' name='CFTimeZoneRef'/>
<cftype tollfree='__NSCFType' type='^{__CFTree=}' gettypeid_func='CFTreeGetTypeID' name='CFTreeRef'/>
<cftype type='^v' name='CFTypeRef'/>
<cftype tollfree='__NSCFType' type='^{__CFURLEnumerator=}' gettypeid_func='CFURLEnumeratorGetTypeID' name='CFURLEnumeratorRef'/>
<cftype tollfree='NSURL' type='^{__CFURL=}' gettypeid_func='CFURLGetTypeID' name='CFURLRef'/>
<cftype tollfree='__NSCFType' type='^{__CFUUID=}' gettypeid_func='CFUUIDGetTypeID' name='CFUUIDRef'/>
<cftype tollfree='__NSCFType' type='^{__CFUserNotification=}' gettypeid_func='CFUserNotificationGetTypeID' name='CFUserNotificationRef'/>
<cftype tollfree='__NSCFOutputStream' type='^{__CFWriteStream=}' gettypeid_func='CFWriteStreamGetTypeID' name='CFWriteStreamRef'/>
<cftype tollfree='__NSCFType' type='^{__CFXMLNode=}' gettypeid_func='CFXMLNodeGetTypeID' name='CFXMLNodeRef'/>
<cftype tollfree='__NSCFType' type='^{__CFXMLParser=}' gettypeid_func='CFXMLParserGetTypeID' name='CFXMLParserRef'/>
<constant const='true' type='d' declared_type='CFTimeInterval' name='kCFAbsoluteTimeIntervalSince1904'/>
<constant const='true' type='d' declared_type='CFTimeInterval' name='kCFAbsoluteTimeIntervalSince1970'/>
<constant const='true' type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='kCFAllocatorDefault'/>
<constant const='true' type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='kCFAllocatorMalloc'/>
<constant const='true' type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='kCFAllocatorMallocZone'/>
<constant const='true' type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='kCFAllocatorNull'/>
<constant const='true' type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='kCFAllocatorSystemDefault'/>
<constant const='true' type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='kCFAllocatorUseContext'/>
<constant const='true' type='^{__CFBoolean=}' declared_type='CFBooleanRef' name='kCFBooleanFalse'/>
<constant const='true' type='^{__CFBoolean=}' declared_type='CFBooleanRef' name='kCFBooleanTrue'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFBuddhistCalendar'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFBundleDevelopmentRegionKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFBundleExecutableKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFBundleIdentifierKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFBundleInfoDictionaryVersionKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFBundleLocalizationsKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFBundleNameKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFBundleVersionKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFChineseCalendar'/>
<constant const='true' type='{_CFBagCallBacks=i^?^?^?^?^?}' type64='{_CFBagCallBacks=q^?^?^?^?^?}' declared_type='CFBagCallBacks' name='kCFCopyStringBagCallBacks'/>
<constant const='true' type='{_CFDictionaryKeyCallBacks=i^?^?^?^?^?}' type64='{_CFDictionaryKeyCallBacks=q^?^?^?^?^?}' declared_type='CFDictionaryKeyCallBacks' name='kCFCopyStringDictionaryKeyCallBacks'/>
<constant const='true' type='{_CFSetCallBacks=i^?^?^?^?^?}' type64='{_CFSetCallBacks=q^?^?^?^?^?}' declared_type='CFSetCallBacks' name='kCFCopyStringSetCallBacks'/>
<constant type='d' declared_type='double' name='kCFCoreFoundationVersionNumber'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterAMSymbol'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterCalendar'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterCalendarName'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterDefaultDate'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterDefaultFormat'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterDoesRelativeDateFormattingKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterEraSymbols'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterGregorianStartDate'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterIsLenient'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterLongEraSymbols'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterMonthSymbols'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterPMSymbol'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterQuarterSymbols'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterShortMonthSymbols'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterShortQuarterSymbols'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterShortStandaloneMonthSymbols'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterShortStandaloneQuarterSymbols'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterShortStandaloneWeekdaySymbols'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterShortWeekdaySymbols'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterStandaloneMonthSymbols'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterStandaloneQuarterSymbols'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterStandaloneWeekdaySymbols'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterTimeZone'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterTwoDigitStartDate'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterVeryShortMonthSymbols'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterVeryShortStandaloneMonthSymbols'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterVeryShortStandaloneWeekdaySymbols'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterVeryShortWeekdaySymbols'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFDateFormatterWeekdaySymbols'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFErrorDescriptionKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFErrorDomainCocoa'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFErrorDomainMach'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFErrorDomainOSStatus'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFErrorDomainPOSIX'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFErrorFilePathKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFErrorLocalizedDescriptionKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFErrorLocalizedFailureReasonKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFErrorLocalizedRecoverySuggestionKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFErrorURLKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFErrorUnderlyingErrorKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFGregorianCalendar'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFHebrewCalendar'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFISO8601Calendar'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFIndianCalendar'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFIslamicCalendar'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFIslamicCivilCalendar'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFJapaneseCalendar'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleAlternateQuotationBeginDelimiterKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleAlternateQuotationEndDelimiterKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleCalendar'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleCalendarIdentifier'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleCollationIdentifier'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleCollatorIdentifier'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleCountryCode'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleCurrencyCode'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleCurrencySymbol'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleCurrentLocaleDidChangeNotification'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleDecimalSeparator'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleExemplarCharacterSet'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleGroupingSeparator'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleIdentifier'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleLanguageCode'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleMeasurementSystem'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleQuotationBeginDelimiterKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleQuotationEndDelimiterKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleScriptCode'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleUsesMetricSystem'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFLocaleVariantCode'/>
<constant const='true' type='^{__CFNull=}' declared_type='CFNullRef' name='kCFNull'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterAlwaysShowDecimalSeparator'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterCurrencyCode'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterCurrencyDecimalSeparator'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterCurrencyGroupingSeparator'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterCurrencySymbol'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterDecimalSeparator'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterDefaultFormat'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterExponentSymbol'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterFormatWidth'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterGroupingSeparator'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterGroupingSize'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterInfinitySymbol'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterInternationalCurrencySymbol'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterIsLenient'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterMaxFractionDigits'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterMaxIntegerDigits'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterMaxSignificantDigits'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterMinFractionDigits'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterMinIntegerDigits'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterMinSignificantDigits'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterMinusSign'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterMultiplier'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterNaNSymbol'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterNegativePrefix'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterNegativeSuffix'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterPaddingCharacter'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterPaddingPosition'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterPerMillSymbol'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterPercentSymbol'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterPlusSign'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterPositivePrefix'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterPositiveSuffix'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterRoundingIncrement'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterRoundingMode'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterSecondaryGroupingSize'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterUseGroupingSeparator'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterUseSignificantDigits'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFNumberFormatterZeroSymbol'/>
<constant const='true' type='^{__CFNumber=}' declared_type='CFNumberRef' name='kCFNumberNaN'/>
<constant const='true' type='^{__CFNumber=}' declared_type='CFNumberRef' name='kCFNumberNegativeInfinity'/>
<constant const='true' type='^{__CFNumber=}' declared_type='CFNumberRef' name='kCFNumberPositiveInfinity'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFPersianCalendar'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFPlugInDynamicRegisterFunctionKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFPlugInDynamicRegistrationKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFPlugInFactoriesKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFPlugInTypesKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFPlugInUnloadFunctionKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFPreferencesAnyApplication'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFPreferencesAnyHost'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFPreferencesAnyUser'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFPreferencesCurrentApplication'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFPreferencesCurrentHost'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFPreferencesCurrentUser'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFRepublicOfChinaCalendar'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFRunLoopCommonModes'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFRunLoopDefaultMode'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFSocketCommandKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFSocketErrorKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFSocketNameKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFSocketRegisterCommand'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFSocketResultKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFSocketRetrieveCommand'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFSocketValueKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFStreamPropertyAppendToFile'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFStreamPropertyDataWritten'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFStreamPropertyFileCurrentOffset'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFStreamPropertySocketNativeHandle'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFStreamPropertySocketRemoteHostName'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFStreamPropertySocketRemotePortNumber'/>
<constant const='true' type='{_CFBinaryHeapCallBacks=i^?^?^?^?}' type64='{_CFBinaryHeapCallBacks=q^?^?^?^?}' declared_type='CFBinaryHeapCallBacks' name='kCFStringBinaryHeapCallBacks'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformFullwidthHalfwidth'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformHiraganaKatakana'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformLatinArabic'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformLatinCyrillic'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformLatinGreek'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformLatinHangul'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformLatinHebrew'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformLatinHiragana'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformLatinKatakana'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformLatinThai'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformMandarinLatin'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformStripCombiningMarks'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformStripDiacritics'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformToLatin'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformToUnicodeName'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFStringTransformToXMLHex'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFTimeZoneSystemTimeZoneDidChangeNotification'/>
<constant const='true' type='{_CFArrayCallBacks=i^?^?^?^?}' type64='{_CFArrayCallBacks=q^?^?^?^?}' declared_type='CFArrayCallBacks' name='kCFTypeArrayCallBacks'/>
<constant const='true' type='{_CFBagCallBacks=i^?^?^?^?^?}' type64='{_CFBagCallBacks=q^?^?^?^?^?}' declared_type='CFBagCallBacks' name='kCFTypeBagCallBacks'/>
<constant const='true' type='{_CFDictionaryKeyCallBacks=i^?^?^?^?^?}' type64='{_CFDictionaryKeyCallBacks=q^?^?^?^?^?}' declared_type='CFDictionaryKeyCallBacks' name='kCFTypeDictionaryKeyCallBacks'/>
<constant const='true' type='{_CFDictionaryValueCallBacks=i^?^?^?^?}' type64='{_CFDictionaryValueCallBacks=q^?^?^?^?}' declared_type='CFDictionaryValueCallBacks' name='kCFTypeDictionaryValueCallBacks'/>
<constant const='true' type='{_CFSetCallBacks=i^?^?^?^?^?}' type64='{_CFSetCallBacks=q^?^?^?^?^?}' declared_type='CFSetCallBacks' name='kCFTypeSetCallBacks'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLAttributeModificationDateKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLContentAccessDateKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLContentModificationDateKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLCreationDateKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLCustomIconKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLEffectiveIconKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileAllocatedSizeKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileDirectoryContents'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileExists'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileLastModificationTime'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileLength'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileOwnerID'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFilePOSIXMode'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileResourceIdentifierKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileResourceTypeBlockSpecial'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileResourceTypeCharacterSpecial'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileResourceTypeDirectory'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileResourceTypeKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileResourceTypeNamedPipe'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileResourceTypeRegular'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileResourceTypeSocket'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileResourceTypeSymbolicLink'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileResourceTypeUnknown'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileSecurityKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLFileSizeKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLHTTPStatusCode'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLHTTPStatusLine'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLHasHiddenExtensionKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsAliasFileKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsDirectoryKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsExcludedFromBackupKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsExecutableKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsHiddenKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsMountTriggerKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsPackageKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsReadableKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsRegularFileKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsSymbolicLinkKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsSystemImmutableKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsUbiquitousItemKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsUserImmutableKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsVolumeKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLIsWritableKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLKeysOfUnsetValuesKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLLabelColorKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLLabelNumberKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLLinkCountKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLLocalizedLabelKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLLocalizedNameKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLLocalizedTypeDescriptionKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLNameKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLParentDirectoryURLKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLPathKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLPreferredIOBlockSizeKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLTotalFileAllocatedSizeKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLTotalFileSizeKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLTypeIdentifierKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLUbiquitousItemHasUnresolvedConflictsKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLUbiquitousItemIsDownloadedKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLUbiquitousItemIsDownloadingKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLUbiquitousItemIsUploadedKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLUbiquitousItemIsUploadingKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLUbiquitousItemPercentDownloadedKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLUbiquitousItemPercentUploadedKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeAvailableCapacityKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeCreationDateKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeIdentifierKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeIsAutomountedKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeIsBrowsableKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeIsEjectableKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeIsInternalKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeIsJournalingKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeIsLocalKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeIsReadOnlyKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeIsRemovableKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeLocalizedFormatDescriptionKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeLocalizedNameKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeMaximumFileSizeKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeNameKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeResourceCountKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeSupportsAdvisoryFileLockingKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeSupportsCasePreservedNamesKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeSupportsCaseSensitiveNamesKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeSupportsExtendedSecurityKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeSupportsHardLinksKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeSupportsJournalingKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeSupportsPersistentIDsKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeSupportsRenamingKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeSupportsRootDirectoryDatesKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeSupportsSparseFilesKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeSupportsSymbolicLinksKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeSupportsVolumeSizesKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeSupportsZeroRunsKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeTotalCapacityKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeURLForRemountingKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeURLKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFURLVolumeUUIDStringKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFUserNotificationAlertHeaderKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFUserNotificationAlertMessageKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFUserNotificationAlternateButtonTitleKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFUserNotificationCheckBoxTitlesKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFUserNotificationDefaultButtonTitleKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFUserNotificationIconURLKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFUserNotificationLocalizationURLKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFUserNotificationOtherButtonTitleKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFUserNotificationPopUpSelectionKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFUserNotificationPopUpTitlesKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFUserNotificationProgressIndicatorValueKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFUserNotificationSoundURLKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFUserNotificationTextFieldTitlesKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFUserNotificationTextFieldValuesKey'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFXMLTreeErrorDescription'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFXMLTreeErrorLineNumber'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFXMLTreeErrorLocation'/>
<constant const='true' type='^{__CFString=}' declared_type='CFStringRef' name='kCFXMLTreeErrorStatusCode'/>
<enum value='2' name='CFByteOrderBigEndian'/>
<enum value='1' name='CFByteOrderLittleEndian'/>
<enum value='0' name='CFByteOrderUnknown'/>
<enum value='2' name='CFNotificationSuspensionBehaviorCoalesce'/>
<enum value='4' name='CFNotificationSuspensionBehaviorDeliverImmediately'/>
<enum value='1' name='CFNotificationSuspensionBehaviorDrop'/>
<enum value='3' name='CFNotificationSuspensionBehaviorHold'/>
<enum value='1' name='CF_USE_OSBYTEORDER_H'/>
<enum value='1' name='COREFOUNDATION_CFPLUGINCOM_SEPARATE'/>
<enum value='-2147483641' name='E_ABORT'/>
<enum value='-2147483639' name='E_ACCESSDENIED'/>
<enum value='-2147483640' name='E_FAIL'/>
<enum value='-2147483642' name='E_HANDLE'/>
<enum value='-2147483645' name='E_INVALIDARG'/>
<enum value='-2147483644' name='E_NOINTERFACE'/>
<enum value='-2147483647' name='E_NOTIMPL'/>
<enum value='-2147483646' name='E_OUTOFMEMORY'/>
<enum value='-2147483643' name='E_POINTER'/>
<enum value='-2147418113' name='E_UNEXPECTED'/>
<enum value='0' name='FALSE'/>
<enum value='1' name='SEVERITY_ERROR'/>
<enum value='0' name='SEVERITY_SUCCESS'/>
<enum value='1' name='S_FALSE'/>
<enum value='0' name='S_OK'/>
<enum value='1' name='TRUE'/>
<enum value='512' name='kCFBookmarkResolutionWithoutMountingMask'/>
<enum value='256' name='kCFBookmarkResolutionWithoutUIMask'/>
<enum value='7' name='kCFBundleExecutableArchitectureI386'/>
<enum value='18' name='kCFBundleExecutableArchitecturePPC'/>
<enum value='16777234' name='kCFBundleExecutableArchitecturePPC64'/>
<enum value='16777223' name='kCFBundleExecutableArchitectureX86_64'/>
<enum value='1' name='kCFCalendarComponentsWrap'/>
<enum value='16' name='kCFCalendarUnitDay'/>
<enum value='2' name='kCFCalendarUnitEra'/>
<enum value='32' name='kCFCalendarUnitHour'/>
<enum value='64' name='kCFCalendarUnitMinute'/>
<enum value='8' name='kCFCalendarUnitMonth'/>
<enum value='2048' name='kCFCalendarUnitQuarter'/>
<enum value='128' name='kCFCalendarUnitSecond'/>
<enum value='256' name='kCFCalendarUnitWeek'/>
<enum value='4096' name='kCFCalendarUnitWeekOfMonth'/>
<enum value='8192' name='kCFCalendarUnitWeekOfYear'/>
<enum value='512' name='kCFCalendarUnitWeekday'/>
<enum value='1024' name='kCFCalendarUnitWeekdayOrdinal'/>
<enum value='4' name='kCFCalendarUnitYear'/>
<enum value='16384' name='kCFCalendarUnitYearForWeekOfYear'/>
<enum value='10' name='kCFCharacterSetAlphaNumeric'/>
<enum value='13' name='kCFCharacterSetCapitalizedLetter'/>
<enum value='1' name='kCFCharacterSetControl'/>
<enum value='4' name='kCFCharacterSetDecimalDigit'/>
<enum value='9' name='kCFCharacterSetDecomposable'/>
<enum value='12' name='kCFCharacterSetIllegal'/>
<enum value='5' name='kCFCharacterSetLetter'/>
<enum value='6' name='kCFCharacterSetLowercaseLetter'/>
<enum value='15' name='kCFCharacterSetNewline'/>
<enum value='8' name='kCFCharacterSetNonBase'/>
<enum value='11' name='kCFCharacterSetPunctuation'/>
<enum value='14' name='kCFCharacterSetSymbol'/>
<enum value='7' name='kCFCharacterSetUppercaseLetter'/>
<enum value='2' name='kCFCharacterSetWhitespace'/>
<enum value='3' name='kCFCharacterSetWhitespaceAndNewline'/>
<enum value='8' name='kCFCompareAnchored'/>
<enum value='4' name='kCFCompareBackwards'/>
<enum value='1' name='kCFCompareCaseInsensitive'/>
<enum value='128' name='kCFCompareDiacriticInsensitive'/>
<enum value='0' name='kCFCompareEqualTo'/>
<enum value='512' name='kCFCompareForcedOrdering'/>
<enum value='1' name='kCFCompareGreaterThan'/>
<enum value='-1' name='kCFCompareLessThan'/>
<enum value='32' name='kCFCompareLocalized'/>
<enum value='16' name='kCFCompareNonliteral'/>
<enum value='64' name='kCFCompareNumerically'/>
<enum value='256' name='kCFCompareWidthInsensitive'/>
<enum value='196.40' name='kCFCoreFoundationVersionNumber10_0'/>
<enum value='196.50' name='kCFCoreFoundationVersionNumber10_0_3'/>
<enum value='226.00' name='kCFCoreFoundationVersionNumber10_1'/>
<enum value='226.00' name='kCFCoreFoundationVersionNumber10_1_1'/>
<enum value='227.20' name='kCFCoreFoundationVersionNumber10_1_2'/>
<enum value='227.20' name='kCFCoreFoundationVersionNumber10_1_3'/>
<enum value='227.30' name='kCFCoreFoundationVersionNumber10_1_4'/>
<enum value='263.00' name='kCFCoreFoundationVersionNumber10_2'/>
<enum value='263.10' name='kCFCoreFoundationVersionNumber10_2_1'/>
<enum value='263.10' name='kCFCoreFoundationVersionNumber10_2_2'/>
<enum value='263.30' name='kCFCoreFoundationVersionNumber10_2_3'/>
<enum value='263.30' name='kCFCoreFoundationVersionNumber10_2_4'/>
<enum value='263.50' name='kCFCoreFoundationVersionNumber10_2_5'/>
<enum value='263.50' name='kCFCoreFoundationVersionNumber10_2_6'/>
<enum value='263.50' name='kCFCoreFoundationVersionNumber10_2_7'/>
<enum value='263.50' name='kCFCoreFoundationVersionNumber10_2_8'/>
<enum value='299.00' name='kCFCoreFoundationVersionNumber10_3'/>
<enum value='299.00' name='kCFCoreFoundationVersionNumber10_3_1'/>
<enum value='299.00' name='kCFCoreFoundationVersionNumber10_3_2'/>
<enum value='299.30' name='kCFCoreFoundationVersionNumber10_3_3'/>
<enum value='299.31' name='kCFCoreFoundationVersionNumber10_3_4'/>
<enum value='299.31' name='kCFCoreFoundationVersionNumber10_3_5'/>
<enum value='299.32' name='kCFCoreFoundationVersionNumber10_3_6'/>
<enum value='299.33' name='kCFCoreFoundationVersionNumber10_3_7'/>
<enum value='299.33' name='kCFCoreFoundationVersionNumber10_3_8'/>
<enum value='299.35' name='kCFCoreFoundationVersionNumber10_3_9'/>
<enum value='368.00' name='kCFCoreFoundationVersionNumber10_4'/>
<enum value='368.10' name='kCFCoreFoundationVersionNumber10_4_1'/>
<enum value='368.28' name='kCFCoreFoundationVersionNumber10_4_10'/>
<enum value='368.31' name='kCFCoreFoundationVersionNumber10_4_11'/>
<enum value='368.11' name='kCFCoreFoundationVersionNumber10_4_2'/>
<enum value='368.18' name='kCFCoreFoundationVersionNumber10_4_3'/>
<enum value='368.26' name='kCFCoreFoundationVersionNumber10_4_4_Intel'/>
<enum value='368.25' name='kCFCoreFoundationVersionNumber10_4_4_PowerPC'/>
<enum value='368.26' name='kCFCoreFoundationVersionNumber10_4_5_Intel'/>
<enum value='368.25' name='kCFCoreFoundationVersionNumber10_4_5_PowerPC'/>
<enum value='368.26' name='kCFCoreFoundationVersionNumber10_4_6_Intel'/>
<enum value='368.25' name='kCFCoreFoundationVersionNumber10_4_6_PowerPC'/>
<enum value='368.27' name='kCFCoreFoundationVersionNumber10_4_7'/>
<enum value='368.27' name='kCFCoreFoundationVersionNumber10_4_8'/>
<enum value='368.28' name='kCFCoreFoundationVersionNumber10_4_9'/>
<enum value='476.00' name='kCFCoreFoundationVersionNumber10_5'/>
<enum value='476.00' name='kCFCoreFoundationVersionNumber10_5_1'/>
<enum value='476.10' name='kCFCoreFoundationVersionNumber10_5_2'/>
<enum value='476.13' name='kCFCoreFoundationVersionNumber10_5_3'/>
<enum value='476.14' name='kCFCoreFoundationVersionNumber10_5_4'/>
<enum value='476.15' name='kCFCoreFoundationVersionNumber10_5_5'/>
<enum value='476.17' name='kCFCoreFoundationVersionNumber10_5_6'/>
<enum value='476.18' name='kCFCoreFoundationVersionNumber10_5_7'/>
<enum value='476.19' name='kCFCoreFoundationVersionNumber10_5_8'/>
<enum value='550.00' name='kCFCoreFoundationVersionNumber10_6'/>
<enum value='550.00' name='kCFCoreFoundationVersionNumber10_6_1'/>
<enum value='550.13' name='kCFCoreFoundationVersionNumber10_6_2'/>
<enum value='550.19' name='kCFCoreFoundationVersionNumber10_6_3'/>
<enum value='550.29' name='kCFCoreFoundationVersionNumber10_6_4'/>
<enum value='550.42' name='kCFCoreFoundationVersionNumber10_6_5'/>
<enum value='550.42' name='kCFCoreFoundationVersionNumber10_6_6'/>
<enum value='550.42' name='kCFCoreFoundationVersionNumber10_6_7'/>
<enum value='550.43' name='kCFCoreFoundationVersionNumber10_6_8'/>
<enum value='635.00' name='kCFCoreFoundationVersionNumber10_7'/>
<enum value='635.00' name='kCFCoreFoundationVersionNumber10_7_1'/>
<enum value='635.15' name='kCFCoreFoundationVersionNumber10_7_2'/>
<enum value='635.19' name='kCFCoreFoundationVersionNumber10_7_3'/>
<enum value='635.21' name='kCFCoreFoundationVersionNumber10_7_4'/>
<enum value='2' name='kCFDataSearchAnchored'/>
<enum value='1' name='kCFDataSearchBackwards'/>
<enum value='4' name='kCFDateFormatterFullStyle'/>
<enum value='3' name='kCFDateFormatterLongStyle'/>
<enum value='2' name='kCFDateFormatterMediumStyle'/>
<enum value='0' name='kCFDateFormatterNoStyle'/>
<enum value='1' name='kCFDateFormatterShortStyle'/>
<enum value='1' name='kCFFileDescriptorReadCallBack'/>
<enum value='2' name='kCFFileDescriptorWriteCallBack'/>
<enum value='32' name='kCFFileSecurityClearAccessControlList'/>
<enum value='2' name='kCFFileSecurityClearGroup'/>
<enum value='16' name='kCFFileSecurityClearGroupUUID'/>
<enum value='4' name='kCFFileSecurityClearMode'/>
<enum value='1' name='kCFFileSecurityClearOwner'/>
<enum value='8' name='kCFFileSecurityClearOwnerUUID'/>
<enum value='16777215' name='kCFGregorianAllUnits'/>
<enum value='4' name='kCFGregorianUnitsDays'/>
<enum value='8' name='kCFGregorianUnitsHours'/>
<enum value='16' name='kCFGregorianUnitsMinutes'/>
<enum value='2' name='kCFGregorianUnitsMonths'/>
<enum value='32' name='kCFGregorianUnitsSeconds'/>
<enum value='1' name='kCFGregorianUnitsYears'/>
<enum value='4' name='kCFLocaleLanguageDirectionBottomToTop'/>
<enum value='1' name='kCFLocaleLanguageDirectionLeftToRight'/>
<enum value='2' name='kCFLocaleLanguageDirectionRightToLeft'/>
<enum value='3' name='kCFLocaleLanguageDirectionTopToBottom'/>
<enum value='0' name='kCFLocaleLanguageDirectionUnknown'/>
<enum value='-5' name='kCFMessagePortBecameInvalidError'/>
<enum value='-3' name='kCFMessagePortIsInvalid'/>
<enum value='-2' name='kCFMessagePortReceiveTimeout'/>
<enum value='-1' name='kCFMessagePortSendTimeout'/>
<enum value='0' name='kCFMessagePortSuccess'/>
<enum value='-4' name='kCFMessagePortTransportError'/>
<enum value='-1' name='kCFNotFound'/>
<enum value='1' name='kCFNotificationDeliverImmediately'/>
<enum value='2' name='kCFNotificationPostToAllSessions'/>
<enum value='14' name='kCFNumberCFIndexType'/>
<enum value='16' name='kCFNumberCGFloatType'/>
<enum value='7' name='kCFNumberCharType'/>
<enum value='13' name='kCFNumberDoubleType'/>
<enum value='5' name='kCFNumberFloat32Type'/>
<enum value='6' name='kCFNumberFloat64Type'/>
<enum value='12' name='kCFNumberFloatType'/>
<enum value='2' name='kCFNumberFormatterCurrencyStyle'/>
<enum value='1' name='kCFNumberFormatterDecimalStyle'/>
<enum value='0' name='kCFNumberFormatterNoStyle'/>
<enum value='1' name='kCFNumberFormatterPadAfterPrefix'/>
<enum value='3' name='kCFNumberFormatterPadAfterSuffix'/>
<enum value='0' name='kCFNumberFormatterPadBeforePrefix'/>
<enum value='2' name='kCFNumberFormatterPadBeforeSuffix'/>
<enum value='1' name='kCFNumberFormatterParseIntegersOnly'/>
<enum value='3' name='kCFNumberFormatterPercentStyle'/>
<enum value='0' name='kCFNumberFormatterRoundCeiling'/>
<enum value='2' name='kCFNumberFormatterRoundDown'/>
<enum value='1' name='kCFNumberFormatterRoundFloor'/>
<enum value='5' name='kCFNumberFormatterRoundHalfDown'/>
<enum value='4' name='kCFNumberFormatterRoundHalfEven'/>
<enum value='6' name='kCFNumberFormatterRoundHalfUp'/>
<enum value='3' name='kCFNumberFormatterRoundUp'/>
<enum value='4' name='kCFNumberFormatterScientificStyle'/>
<enum value='5' name='kCFNumberFormatterSpellOutStyle'/>
<enum value='9' name='kCFNumberIntType'/>
<enum value='11' name='kCFNumberLongLongType'/>
<enum value='10' name='kCFNumberLongType'/>
<enum value='16' name='kCFNumberMaxType'/>
<enum value='15' name='kCFNumberNSIntegerType'/>
<enum value='2' name='kCFNumberSInt16Type'/>
<enum value='3' name='kCFNumberSInt32Type'/>
<enum value='4' name='kCFNumberSInt64Type'/>
<enum value='1' name='kCFNumberSInt8Type'/>
<enum value='8' name='kCFNumberShortType'/>
<enum value='200' name='kCFPropertyListBinaryFormat_v1_0'/>
<enum value='0' name='kCFPropertyListImmutable'/>
<enum value='1' name='kCFPropertyListMutableContainers'/>
<enum value='2' name='kCFPropertyListMutableContainersAndLeaves'/>
<enum value='1' name='kCFPropertyListOpenStepFormat'/>
<enum value='3840' name='kCFPropertyListReadCorruptError'/>
<enum value='3842' name='kCFPropertyListReadStreamError'/>
<enum value='3841' name='kCFPropertyListReadUnknownVersionError'/>
<enum value='3851' name='kCFPropertyListWriteStreamError'/>
<enum value='100' name='kCFPropertyListXMLFormat_v1_0'/>
<enum value='64' name='kCFRunLoopAfterWaiting'/>
<enum value='268435455' name='kCFRunLoopAllActivities'/>
<enum value='4' name='kCFRunLoopBeforeSources'/>
<enum value='2' name='kCFRunLoopBeforeTimers'/>
<enum value='32' name='kCFRunLoopBeforeWaiting'/>
<enum value='1' name='kCFRunLoopEntry'/>
<enum value='128' name='kCFRunLoopExit'/>
<enum value='1' name='kCFRunLoopRunFinished'/>
<enum value='4' name='kCFRunLoopRunHandledSource'/>
<enum value='2' name='kCFRunLoopRunStopped'/>
<enum value='3' name='kCFRunLoopRunTimedOut'/>
<enum value='2' name='kCFSocketAcceptCallBack'/>
<enum value='2' name='kCFSocketAutomaticallyReenableAcceptCallBack'/>
<enum value='3' name='kCFSocketAutomaticallyReenableDataCallBack'/>
<enum value='1' name='kCFSocketAutomaticallyReenableReadCallBack'/>
<enum value='8' name='kCFSocketAutomaticallyReenableWriteCallBack'/>
<enum value='128' name='kCFSocketCloseOnInvalidate'/>
<enum value='4' name='kCFSocketConnectCallBack'/>
<enum value='3' name='kCFSocketDataCallBack'/>
<enum value='-1' name='kCFSocketError'/>
<enum value='64' name='kCFSocketLeaveErrors'/>
<enum value='0' name='kCFSocketNoCallBack'/>
<enum value='1' name='kCFSocketReadCallBack'/>
<enum value='0' name='kCFSocketSuccess'/>
<enum value='-2' name='kCFSocketTimeout'/>
<enum value='8' name='kCFSocketWriteCallBack'/>
<enum value='-1' name='kCFStreamErrorDomainCustom'/>
<enum value='2' name='kCFStreamErrorDomainMacOSStatus'/>
<enum value='1' name='kCFStreamErrorDomainPOSIX'/>
<enum value='4' name='kCFStreamEventCanAcceptBytes'/>
<enum value='16' name='kCFStreamEventEndEncountered'/>
<enum value='8' name='kCFStreamEventErrorOccurred'/>
<enum value='2' name='kCFStreamEventHasBytesAvailable'/>
<enum value='0' name='kCFStreamEventNone'/>
<enum value='1' name='kCFStreamEventOpenCompleted'/>
<enum value='5' name='kCFStreamStatusAtEnd'/>
<enum value='6' name='kCFStreamStatusClosed'/>
<enum value='7' name='kCFStreamStatusError'/>
<enum value='0' name='kCFStreamStatusNotOpen'/>
<enum value='2' name='kCFStreamStatusOpen'/>
<enum value='1' name='kCFStreamStatusOpening'/>
<enum value='3' name='kCFStreamStatusReading'/>
<enum value='4' name='kCFStreamStatusWriting'/>
<enum value='1537' name='kCFStringEncodingANSEL'/>
<enum value='1536' name='kCFStringEncodingASCII'/>
<enum value='2563' name='kCFStringEncodingBig5'/>
<enum value='2569' name='kCFStringEncodingBig5_E'/>
<enum value='2566' name='kCFStringEncodingBig5_HKSCS_1999'/>
<enum value='1617' name='kCFStringEncodingCNS_11643_92_P1'/>
<enum value='1618' name='kCFStringEncodingCNS_11643_92_P2'/>
<enum value='1619' name='kCFStringEncodingCNS_11643_92_P3'/>
<enum value='1049' name='kCFStringEncodingDOSArabic'/>
<enum value='1030' name='kCFStringEncodingDOSBalticRim'/>
<enum value='1048' name='kCFStringEncodingDOSCanadianFrench'/>
<enum value='1057' name='kCFStringEncodingDOSChineseSimplif'/>
<enum value='1059' name='kCFStringEncodingDOSChineseTrad'/>
<enum value='1043' name='kCFStringEncodingDOSCyrillic'/>
<enum value='1029' name='kCFStringEncodingDOSGreek'/>
<enum value='1041' name='kCFStringEncodingDOSGreek1'/>
<enum value='1052' name='kCFStringEncodingDOSGreek2'/>
<enum value='1047' name='kCFStringEncodingDOSHebrew'/>
<enum value='1046' name='kCFStringEncodingDOSIcelandic'/>
<enum value='1056' name='kCFStringEncodingDOSJapanese'/>
<enum value='1058' name='kCFStringEncodingDOSKorean'/>
<enum value='1040' name='kCFStringEncodingDOSLatin1'/>
<enum value='1042' name='kCFStringEncodingDOSLatin2'/>
<enum value='1024' name='kCFStringEncodingDOSLatinUS'/>
<enum value='1050' name='kCFStringEncodingDOSNordic'/>
<enum value='1045' name='kCFStringEncodingDOSPortuguese'/>
<enum value='1051' name='kCFStringEncodingDOSRussian'/>
<enum value='1053' name='kCFStringEncodingDOSThai'/>
<enum value='1044' name='kCFStringEncodingDOSTurkish'/>
<enum value='3074' name='kCFStringEncodingEBCDIC_CP037'/>
<enum value='3073' name='kCFStringEncodingEBCDIC_US'/>
<enum value='2352' name='kCFStringEncodingEUC_CN'/>
<enum value='2336' name='kCFStringEncodingEUC_JP'/>
<enum value='2368' name='kCFStringEncodingEUC_KR'/>
<enum value='2353' name='kCFStringEncodingEUC_TW'/>
<enum value='1585' name='kCFStringEncodingGBK_95'/>
<enum value='1586' name='kCFStringEncodingGB_18030_2000'/>
<enum value='1584' name='kCFStringEncodingGB_2312_80'/>
<enum value='2565' name='kCFStringEncodingHZ_GB_2312'/>
<enum value='513' name='kCFStringEncodingISOLatin1'/>
<enum value='528' name='kCFStringEncodingISOLatin10'/>
<enum value='514' name='kCFStringEncodingISOLatin2'/>
<enum value='515' name='kCFStringEncodingISOLatin3'/>
<enum value='516' name='kCFStringEncodingISOLatin4'/>
<enum value='521' name='kCFStringEncodingISOLatin5'/>
<enum value='522' name='kCFStringEncodingISOLatin6'/>
<enum value='525' name='kCFStringEncodingISOLatin7'/>
<enum value='526' name='kCFStringEncodingISOLatin8'/>
<enum value='527' name='kCFStringEncodingISOLatin9'/>
<enum value='518' name='kCFStringEncodingISOLatinArabic'/>
<enum value='517' name='kCFStringEncodingISOLatinCyrillic'/>
<enum value='519' name='kCFStringEncodingISOLatinGreek'/>
<enum value='520' name='kCFStringEncodingISOLatinHebrew'/>
<enum value='523' name='kCFStringEncodingISOLatinThai'/>
<enum value='2096' name='kCFStringEncodingISO_2022_CN'/>
<enum value='2097' name='kCFStringEncodingISO_2022_CN_EXT'/>
<enum value='2080' name='kCFStringEncodingISO_2022_JP'/>
<enum value='2082' name='kCFStringEncodingISO_2022_JP_1'/>
<enum value='2081' name='kCFStringEncodingISO_2022_JP_2'/>
<enum value='2083' name='kCFStringEncodingISO_2022_JP_3'/>
<enum value='2112' name='kCFStringEncodingISO_2022_KR'/>
<enum value='4294967295' name='kCFStringEncodingInvalidId'/>
<enum value='1572' name='kCFStringEncodingJIS_C6226_78'/>
<enum value='1568' name='kCFStringEncodingJIS_X0201_76'/>
<enum value='1569' name='kCFStringEncodingJIS_X0208_83'/>
<enum value='1570' name='kCFStringEncodingJIS_X0208_90'/>
<enum value='1571' name='kCFStringEncodingJIS_X0212_90'/>
<enum value='2562' name='kCFStringEncodingKOI8_R'/>
<enum value='2568' name='kCFStringEncodingKOI8_U'/>
<enum value='1600' name='kCFStringEncodingKSC_5601_87'/>
<enum value='1601' name='kCFStringEncodingKSC_5601_92_Johab'/>
<enum value='4' name='kCFStringEncodingMacArabic'/>
<enum value='24' name='kCFStringEncodingMacArmenian'/>
<enum value='13' name='kCFStringEncodingMacBengali'/>
<enum value='19' name='kCFStringEncodingMacBurmese'/>
<enum value='39' name='kCFStringEncodingMacCeltic'/>
<enum value='29' name='kCFStringEncodingMacCentralEurRoman'/>
<enum value='25' name='kCFStringEncodingMacChineseSimp'/>
<enum value='2' name='kCFStringEncodingMacChineseTrad'/>
<enum value='36' name='kCFStringEncodingMacCroatian'/>
<enum value='7' name='kCFStringEncodingMacCyrillic'/>
<enum value='9' name='kCFStringEncodingMacDevanagari'/>
<enum value='34' name='kCFStringEncodingMacDingbats'/>
<enum value='28' name='kCFStringEncodingMacEthiopic'/>
<enum value='31' name='kCFStringEncodingMacExtArabic'/>
<enum value='140' name='kCFStringEncodingMacFarsi'/>
<enum value='40' name='kCFStringEncodingMacGaelic'/>
<enum value='23' name='kCFStringEncodingMacGeorgian'/>
<enum value='6' name='kCFStringEncodingMacGreek'/>
<enum value='11' name='kCFStringEncodingMacGujarati'/>
<enum value='10' name='kCFStringEncodingMacGurmukhi'/>
<enum value='255' name='kCFStringEncodingMacHFS'/>
<enum value='5' name='kCFStringEncodingMacHebrew'/>
<enum value='37' name='kCFStringEncodingMacIcelandic'/>
<enum value='236' name='kCFStringEncodingMacInuit'/>
<enum value='1' name='kCFStringEncodingMacJapanese'/>
<enum value='16' name='kCFStringEncodingMacKannada'/>
<enum value='20' name='kCFStringEncodingMacKhmer'/>
<enum value='3' name='kCFStringEncodingMacKorean'/>
<enum value='22' name='kCFStringEncodingMacLaotian'/>
<enum value='17' name='kCFStringEncodingMacMalayalam'/>
<enum value='27' name='kCFStringEncodingMacMongolian'/>
<enum value='12' name='kCFStringEncodingMacOriya'/>
<enum value='0' name='kCFStringEncodingMacRoman'/>
<enum value='2564' name='kCFStringEncodingMacRomanLatin1'/>
<enum value='38' name='kCFStringEncodingMacRomanian'/>
<enum value='18' name='kCFStringEncodingMacSinhalese'/>
<enum value='33' name='kCFStringEncodingMacSymbol'/>
<enum value='14' name='kCFStringEncodingMacTamil'/>
<enum value='15' name='kCFStringEncodingMacTelugu'/>
<enum value='21' name='kCFStringEncodingMacThai'/>
<enum value='26' name='kCFStringEncodingMacTibetan'/>
<enum value='35' name='kCFStringEncodingMacTurkish'/>
<enum value='152' name='kCFStringEncodingMacUkrainian'/>
<enum value='252' name='kCFStringEncodingMacVT100'/>
<enum value='30' name='kCFStringEncodingMacVietnamese'/>
<enum value='2818' name='kCFStringEncodingNextStepJapanese'/>
<enum value='2817' name='kCFStringEncodingNextStepLatin'/>
<enum value='3071' name='kCFStringEncodingNonLossyASCII'/>
<enum value='2561' name='kCFStringEncodingShiftJIS'/>
<enum value='1576' name='kCFStringEncodingShiftJIS_X0213'/>
<enum value='1576' name='kCFStringEncodingShiftJIS_X0213_00'/>
<enum value='1577' name='kCFStringEncodingShiftJIS_X0213_MenKuTen'/>
<enum value='256' name='kCFStringEncodingUTF16'/>
<enum value='268435712' name='kCFStringEncodingUTF16BE'/>
<enum value='335544576' name='kCFStringEncodingUTF16LE'/>
<enum value='201326848' name='kCFStringEncodingUTF32'/>
<enum value='402653440' name='kCFStringEncodingUTF32BE'/>
<enum value='469762304' name='kCFStringEncodingUTF32LE'/>
<enum value='67109120' name='kCFStringEncodingUTF7'/>
<enum value='2576' name='kCFStringEncodingUTF7_IMAP'/>
<enum value='134217984' name='kCFStringEncodingUTF8'/>
<enum value='256' name='kCFStringEncodingUnicode'/>
<enum value='2567' name='kCFStringEncodingVISCII'/>
<enum value='1286' name='kCFStringEncodingWindowsArabic'/>
<enum value='1287' name='kCFStringEncodingWindowsBalticRim'/>
<enum value='1282' name='kCFStringEncodingWindowsCyrillic'/>
<enum value='1283' name='kCFStringEncodingWindowsGreek'/>
<enum value='1285' name='kCFStringEncodingWindowsHebrew'/>
<enum value='1296' name='kCFStringEncodingWindowsKoreanJohab'/>
<enum value='1280' name='kCFStringEncodingWindowsLatin1'/>
<enum value='1281' name='kCFStringEncodingWindowsLatin2'/>
<enum value='1284' name='kCFStringEncodingWindowsLatin5'/>
<enum value='1288' name='kCFStringEncodingWindowsVietnamese'/>
<enum value='2' name='kCFStringNormalizationFormC'/>
<enum value='0' name='kCFStringNormalizationFormD'/>
<enum value='3' name='kCFStringNormalizationFormKC'/>
<enum value='1' name='kCFStringNormalizationFormKD'/>
<enum value='131072' name='kCFStringTokenizerAttributeLanguage'/>
<enum value='65536' name='kCFStringTokenizerAttributeLatinTranscription'/>
<enum value='4' name='kCFStringTokenizerTokenHasDerivedSubTokensMask'/>
<enum value='8' name='kCFStringTokenizerTokenHasHasNumbersMask'/>
<enum value='16' name='kCFStringTokenizerTokenHasNonLettersMask'/>
<enum value='2' name='kCFStringTokenizerTokenHasSubTokensMask'/>
<enum value='32' name='kCFStringTokenizerTokenIsCJWordMask'/>
<enum value='0' name='kCFStringTokenizerTokenNone'/>
<enum value='1' name='kCFStringTokenizerTokenNormal'/>
<enum value='3' name='kCFStringTokenizerUnitLineBreak'/>
<enum value='2' name='kCFStringTokenizerUnitParagraph'/>
<enum value='1' name='kCFStringTokenizerUnitSentence'/>
<enum value='0' name='kCFStringTokenizerUnitWord'/>
<enum value='4' name='kCFStringTokenizerUnitWordBoundary'/>
<enum value='2' name='kCFTimeZoneNameStyleDaylightSaving'/>
<enum value='4' name='kCFTimeZoneNameStyleGeneric'/>
<enum value='3' name='kCFTimeZoneNameStyleShortDaylightSaving'/>
<enum value='5' name='kCFTimeZoneNameStyleShortGeneric'/>
<enum value='1' name='kCFTimeZoneNameStyleShortStandard'/>
<enum value='0' name='kCFTimeZoneNameStyleStandard'/>
<enum value='512' name='kCFURLBookmarkCreationMinimalBookmarkMask'/>
<enum value='256' name='kCFURLBookmarkCreationPreferFileIDResolutionMask'/>
<enum value='4096' name='kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess'/>
<enum value='1024' name='kCFURLBookmarkCreationSuitableForBookmarkFile'/>
<enum value='2048' name='kCFURLBookmarkCreationWithSecurityScope'/>
<enum value='1024' name='kCFURLBookmarkResolutionWithSecurityScope'/>
<enum value='12' name='kCFURLComponentFragment'/>
<enum value='8' name='kCFURLComponentHost'/>
<enum value='2' name='kCFURLComponentNetLocation'/>
<enum value='10' name='kCFURLComponentParameterString'/>
<enum value='6' name='kCFURLComponentPassword'/>
<enum value='3' name='kCFURLComponentPath'/>
<enum value='9' name='kCFURLComponentPort'/>
<enum value='11' name='kCFURLComponentQuery'/>
<enum value='4' name='kCFURLComponentResourceSpecifier'/>
<enum value='1' name='kCFURLComponentScheme'/>
<enum value='5' name='kCFURLComponentUser'/>
<enum value='7' name='kCFURLComponentUserInfo'/>
<enum value='0' name='kCFURLEnumeratorDefaultBehavior'/>
<enum value='1' name='kCFURLEnumeratorDescendRecursively'/>
<enum value='4' name='kCFURLEnumeratorDirectoryPostOrderSuccess'/>
<enum value='2' name='kCFURLEnumeratorEnd'/>
<enum value='3' name='kCFURLEnumeratorError'/>
<enum value='4' name='kCFURLEnumeratorGenerateFileReferenceURLs'/>
<enum value='32' name='kCFURLEnumeratorIncludeDirectoriesPostOrder'/>
<enum value='16' name='kCFURLEnumeratorIncludeDirectoriesPreOrder'/>
<enum value='2' name='kCFURLEnumeratorSkipInvisibles'/>
<enum value='8' name='kCFURLEnumeratorSkipPackageContents'/>
<enum value='1' name='kCFURLEnumeratorSuccess'/>
<enum value='1' name='kCFURLHFSPathStyle'/>
<enum value='-15' name='kCFURLImproperArgumentsError'/>
<enum value='0' name='kCFURLPOSIXPathStyle'/>
<enum value='-17' name='kCFURLPropertyKeyUnavailableError'/>
<enum value='-14' name='kCFURLRemoteHostUnavailableError'/>
<enum value='-13' name='kCFURLResourceAccessViolationError'/>
<enum value='-12' name='kCFURLResourceNotFoundError'/>
<enum value='-18' name='kCFURLTimeoutError'/>
<enum value='-10' name='kCFURLUnknownError'/>
<enum value='-16' name='kCFURLUnknownPropertyKeyError'/>
<enum value='-11' name='kCFURLUnknownSchemeError'/>
<enum value='2' name='kCFURLWindowsPathStyle'/>
<enum value='1' name='kCFUserNotificationAlternateResponse'/>
<enum value='3' name='kCFUserNotificationCancelResponse'/>
<enum value='2' name='kCFUserNotificationCautionAlertLevel'/>
<enum value='0' name='kCFUserNotificationDefaultResponse'/>
<enum value='32' name='kCFUserNotificationNoDefaultButtonFlag'/>
<enum value='1' name='kCFUserNotificationNoteAlertLevel'/>
<enum value='2' name='kCFUserNotificationOtherResponse'/>
<enum value='3' name='kCFUserNotificationPlainAlertLevel'/>
<enum value='0' name='kCFUserNotificationStopAlertLevel'/>
<enum value='64' name='kCFUserNotificationUseRadioButtonsFlag'/>
<enum value='4' name='kCFXMLEntityTypeCharacter'/>
<enum value='0' name='kCFXMLEntityTypeParameter'/>
<enum value='2' name='kCFXMLEntityTypeParsedExternal'/>
<enum value='1' name='kCFXMLEntityTypeParsedInternal'/>
<enum value='3' name='kCFXMLEntityTypeUnparsed'/>
<enum value='11' name='kCFXMLErrorElementlessDocument'/>
<enum value='3' name='kCFXMLErrorEncodingConversionFailure'/>
<enum value='7' name='kCFXMLErrorMalformedCDSect'/>
<enum value='13' name='kCFXMLErrorMalformedCharacterReference'/>
<enum value='8' name='kCFXMLErrorMalformedCloseTag'/>
<enum value='12' name='kCFXMLErrorMalformedComment'/>
<enum value='5' name='kCFXMLErrorMalformedDTD'/>
<enum value='10' name='kCFXMLErrorMalformedDocument'/>
<enum value='6' name='kCFXMLErrorMalformedName'/>
<enum value='14' name='kCFXMLErrorMalformedParsedCharacterData'/>
<enum value='4' name='kCFXMLErrorMalformedProcessingInstruction'/>
<enum value='9' name='kCFXMLErrorMalformedStartTag'/>
<enum value='15' name='kCFXMLErrorNoData'/>
<enum value='1' name='kCFXMLErrorUnexpectedEOF'/>
<enum value='2' name='kCFXMLErrorUnknownEncoding'/>
<enum value='1' name='kCFXMLNodeCurrentVersion'/>
<enum value='3' name='kCFXMLNodeTypeAttribute'/>
<enum value='15' name='kCFXMLNodeTypeAttributeListDeclaration'/>
<enum value='7' name='kCFXMLNodeTypeCDATASection'/>
<enum value='5' name='kCFXMLNodeTypeComment'/>
<enum value='1' name='kCFXMLNodeTypeDocument'/>
<enum value='8' name='kCFXMLNodeTypeDocumentFragment'/>
<enum value='11' name='kCFXMLNodeTypeDocumentType'/>
<enum value='2' name='kCFXMLNodeTypeElement'/>
<enum value='14' name='kCFXMLNodeTypeElementTypeDeclaration'/>
<enum value='9' name='kCFXMLNodeTypeEntity'/>
<enum value='10' name='kCFXMLNodeTypeEntityReference'/>
<enum value='13' name='kCFXMLNodeTypeNotation'/>
<enum value='4' name='kCFXMLNodeTypeProcessingInstruction'/>
<enum value='6' name='kCFXMLNodeTypeText'/>
<enum value='12' name='kCFXMLNodeTypeWhitespace'/>
<enum value='32' name='kCFXMLParserAddImpliedAttributes'/>
<enum value='16777215' name='kCFXMLParserAllOptions'/>
<enum value='0' name='kCFXMLParserNoOptions'/>
<enum value='4' name='kCFXMLParserReplacePhysicalEntities'/>
<enum value='16' name='kCFXMLParserResolveExternalEntities'/>
<enum value='2' name='kCFXMLParserSkipMetaData'/>
<enum value='8' name='kCFXMLParserSkipWhitespace'/>
<enum value='1' name='kCFXMLParserValidateDocument'/>
<enum value='-1' name='kCFXMLStatusParseInProgress'/>
<enum value='-2' name='kCFXMLStatusParseNotBegun'/>
<enum value='0' name='kCFXMLStatusParseSuccessful'/>
<function name='CFAbsoluteTimeAddGregorianUnits'>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<arg type='{_CFGregorianUnits=iiiiid}' declared_type='CFGregorianUnits' name='units'/>
<retval type='d' declared_type='CFAbsoluteTime'/>
</function>
<function name='CFAbsoluteTimeGetCurrent'>
<retval type='d' declared_type='CFAbsoluteTime'/>
</function>
<function name='CFAbsoluteTimeGetDayOfWeek'>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<retval type='l' type64='i' declared_type='SInt32'/>
</function>
<function name='CFAbsoluteTimeGetDayOfYear'>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<retval type='l' type64='i' declared_type='SInt32'/>
</function>
<function name='CFAbsoluteTimeGetDifferenceAsGregorianUnits'>
<arg type='d' declared_type='CFAbsoluteTime' name='at1'/>
<arg type='d' declared_type='CFAbsoluteTime' name='at2'/>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='unitFlags'/>
<retval type='{_CFGregorianUnits=iiiiid}' declared_type='CFGregorianUnits'/>
</function>
<function name='CFAbsoluteTimeGetGregorianDate'>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<retval type='{_CFGregorianDate=iccccd}' declared_type='CFGregorianDate'/>
</function>
<function name='CFAbsoluteTimeGetWeekOfYear'>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<retval type='l' type64='i' declared_type='SInt32'/>
</function>
<function name='CFAllocatorAllocate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' type64='q' declared_type='CFIndex' name='size'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='hint'/>
<retval type='^v' declared_type='void*'/>
</function>
<function name='CFAllocatorCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{_CFAllocatorContext=i^v^?^?^?^?^?^?^?}' type64='^{_CFAllocatorContext=q^v^?^?^?^?^?^?^?}' declared_type='CFAllocatorContext*' name='context'/>
<retval type='^{__CFAllocator=}' already_retained='true' declared_type='CFAllocatorRef'/>
</function>
<function name='CFAllocatorDeallocate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^v' declared_type='void*' name='ptr'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFAllocatorGetContext'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{_CFAllocatorContext=i^v^?^?^?^?^?^?^?}' type64='^{_CFAllocatorContext=q^v^?^?^?^?^?^?^?}' declared_type='CFAllocatorContext*' name='context'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFAllocatorGetDefault'>
<retval type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
</function>
<function name='CFAllocatorGetPreferredSizeForSize'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' type64='q' declared_type='CFIndex' name='size'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='hint'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFAllocatorGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFAllocatorReallocate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^v' declared_type='void*' name='ptr'/>
<arg type='l' type64='q' declared_type='CFIndex' name='newsize'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='hint'/>
<retval type='^v' declared_type='void*'/>
</function>
<function name='CFAllocatorSetDefault'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArrayAppendArray'>
<arg type='^{__CFArray=}' declared_type='CFMutableArrayRef' name='theArray'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='otherArray'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='otherRange'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArrayAppendValue'>
<arg type='^{__CFArray=}' declared_type='CFMutableArrayRef' name='theArray'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArrayApplyFunction'>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='theArray'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<arg function_pointer='true' type='^?' declared_type='CFArrayApplierFunction' name='applier'>
<arg const='true' type='^v' declared_type='void*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^v' declared_type='void*' name='context'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArrayBSearchValues'>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='theArray'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<arg function_pointer='true' type='^?' declared_type='CFComparatorFunction' name='comparator'>
<arg const='true' type='^v' declared_type='void*'/>
<arg const='true' type='^v' declared_type='void*'/>
<arg type='^v' declared_type='void*'/>
<retval type='l' type64='q' declared_type='CFComparisonResult'/>
</arg>
<arg type='^v' declared_type='void*' name='context'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFArrayContainsValue'>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='theArray'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFArrayCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg const='true' type='^^v' declared_type='void**' name='values'/>
<arg type='l' type64='q' declared_type='CFIndex' name='numValues'/>
<arg const='true' type='^{_CFArrayCallBacks=i^?^?^?^?}' type64='^{_CFArrayCallBacks=q^?^?^?^?}' declared_type='CFArrayCallBacks*' name='callBacks'/>
<retval type='^{__CFArray=}' already_retained='true' declared_type='CFArrayRef'/>
</function>
<function name='CFArrayCreateCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='theArray'/>
<retval type='^{__CFArray=}' already_retained='true' declared_type='CFArrayRef'/>
</function>
<function name='CFArrayCreateMutable'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' type64='q' declared_type='CFIndex' name='capacity'/>
<arg const='true' type='^{_CFArrayCallBacks=i^?^?^?^?}' type64='^{_CFArrayCallBacks=q^?^?^?^?}' declared_type='CFArrayCallBacks*' name='callBacks'/>
<retval type='^{__CFArray=}' already_retained='true' declared_type='CFMutableArrayRef'/>
</function>
<function name='CFArrayCreateMutableCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' type64='q' declared_type='CFIndex' name='capacity'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='theArray'/>
<retval type='^{__CFArray=}' already_retained='true' declared_type='CFMutableArrayRef'/>
</function>
<function name='CFArrayExchangeValuesAtIndices'>
<arg type='^{__CFArray=}' declared_type='CFMutableArrayRef' name='theArray'/>
<arg type='l' type64='q' declared_type='CFIndex' name='idx1'/>
<arg type='l' type64='q' declared_type='CFIndex' name='idx2'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArrayGetCount'>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='theArray'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFArrayGetCountOfValue'>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='theArray'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFArrayGetFirstIndexOfValue'>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='theArray'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFArrayGetLastIndexOfValue'>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='theArray'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFArrayGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFArrayGetValueAtIndex'>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='theArray'/>
<arg type='l' type64='q' declared_type='CFIndex' name='idx'/>
<retval const='true' type='^v' declared_type='void*'/>
</function>
<function name='CFArrayGetValues'>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='theArray'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<arg const='true' type='^^v' declared_type='void**' name='values'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArrayInsertValueAtIndex'>
<arg type='^{__CFArray=}' declared_type='CFMutableArrayRef' name='theArray'/>
<arg type='l' type64='q' declared_type='CFIndex' name='idx'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArrayRemoveAllValues'>
<arg type='^{__CFArray=}' declared_type='CFMutableArrayRef' name='theArray'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArrayRemoveValueAtIndex'>
<arg type='^{__CFArray=}' declared_type='CFMutableArrayRef' name='theArray'/>
<arg type='l' type64='q' declared_type='CFIndex' name='idx'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArrayReplaceValues'>
<arg type='^{__CFArray=}' declared_type='CFMutableArrayRef' name='theArray'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<arg const='true' type='^^v' declared_type='void**' name='newValues'/>
<arg type='l' type64='q' declared_type='CFIndex' name='newCount'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArraySetValueAtIndex'>
<arg type='^{__CFArray=}' declared_type='CFMutableArrayRef' name='theArray'/>
<arg type='l' type64='q' declared_type='CFIndex' name='idx'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFArraySortValues'>
<arg type='^{__CFArray=}' declared_type='CFMutableArrayRef' name='theArray'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<arg function_pointer='true' type='^?' declared_type='CFComparatorFunction' name='comparator'>
<arg const='true' type='^v' declared_type='void*'/>
<arg const='true' type='^v' declared_type='void*'/>
<arg type='^v' declared_type='void*'/>
<retval type='l' type64='q' declared_type='CFComparisonResult'/>
</arg>
<arg type='^v' declared_type='void*' name='context'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFAttributedStringBeginEditing'>
<arg type='^{__CFAttributedString=}' declared_type='CFMutableAttributedStringRef' name='aStr'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFAttributedStringCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='str'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='attributes'/>
<retval type='^{__CFAttributedString=}' already_retained='true' declared_type='CFAttributedStringRef'/>
</function>
<function name='CFAttributedStringCreateCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFAttributedString=}' declared_type='CFAttributedStringRef' name='aStr'/>
<retval type='^{__CFAttributedString=}' already_retained='true' declared_type='CFAttributedStringRef'/>
</function>
<function name='CFAttributedStringCreateMutable'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='l' type64='q' declared_type='CFIndex' name='maxLength'/>
<retval type='^{__CFAttributedString=}' already_retained='true' declared_type='CFMutableAttributedStringRef'/>
</function>
<function name='CFAttributedStringCreateMutableCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='l' type64='q' declared_type='CFIndex' name='maxLength'/>
<arg type='^{__CFAttributedString=}' declared_type='CFAttributedStringRef' name='aStr'/>
<retval type='^{__CFAttributedString=}' already_retained='true' declared_type='CFMutableAttributedStringRef'/>
</function>
<function name='CFAttributedStringCreateWithSubstring'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFAttributedString=}' declared_type='CFAttributedStringRef' name='aStr'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<retval type='^{__CFAttributedString=}' already_retained='true' declared_type='CFAttributedStringRef'/>
</function>
<function name='CFAttributedStringEndEditing'>
<arg type='^{__CFAttributedString=}' declared_type='CFMutableAttributedStringRef' name='aStr'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFAttributedStringGetAttribute'>
<arg type='^{__CFAttributedString=}' declared_type='CFAttributedStringRef' name='aStr'/>
<arg type='l' type64='q' declared_type='CFIndex' name='loc'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='attrName'/>
<arg type='^{_CFRange=ii}' type64='^{_CFRange=qq}' declared_type='CFRange*' name='effectiveRange'/>
<retval type='@' declared_type='CFTypeRef'/>
</function>
<function name='CFAttributedStringGetAttributeAndLongestEffectiveRange'>
<arg type='^{__CFAttributedString=}' declared_type='CFAttributedStringRef' name='aStr'/>
<arg type='l' type64='q' declared_type='CFIndex' name='loc'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='attrName'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='inRange'/>
<arg type='^{_CFRange=ii}' type64='^{_CFRange=qq}' declared_type='CFRange*' name='longestEffectiveRange'/>
<retval type='@' declared_type='CFTypeRef'/>
</function>
<function name='CFAttributedStringGetAttributes'>
<arg type='^{__CFAttributedString=}' declared_type='CFAttributedStringRef' name='aStr'/>
<arg type='l' type64='q' declared_type='CFIndex' name='loc'/>
<arg type='^{_CFRange=ii}' type64='^{_CFRange=qq}' declared_type='CFRange*' name='effectiveRange'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef'/>
</function>
<function name='CFAttributedStringGetAttributesAndLongestEffectiveRange'>
<arg type='^{__CFAttributedString=}' declared_type='CFAttributedStringRef' name='aStr'/>
<arg type='l' type64='q' declared_type='CFIndex' name='loc'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='inRange'/>
<arg type='^{_CFRange=ii}' type64='^{_CFRange=qq}' declared_type='CFRange*' name='longestEffectiveRange'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef'/>
</function>
<function name='CFAttributedStringGetLength'>
<arg type='^{__CFAttributedString=}' declared_type='CFAttributedStringRef' name='aStr'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFAttributedStringGetMutableString'>
<arg type='^{__CFAttributedString=}' declared_type='CFMutableAttributedStringRef' name='aStr'/>
<retval type='^{__CFString=}' declared_type='CFMutableStringRef'/>
</function>
<function name='CFAttributedStringGetString'>
<arg type='^{__CFAttributedString=}' declared_type='CFAttributedStringRef' name='aStr'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFAttributedStringGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFAttributedStringRemoveAttribute'>
<arg type='^{__CFAttributedString=}' declared_type='CFMutableAttributedStringRef' name='aStr'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='attrName'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFAttributedStringReplaceAttributedString'>
<arg type='^{__CFAttributedString=}' declared_type='CFMutableAttributedStringRef' name='aStr'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<arg type='^{__CFAttributedString=}' declared_type='CFAttributedStringRef' name='replacement'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFAttributedStringReplaceString'>
<arg type='^{__CFAttributedString=}' declared_type='CFMutableAttributedStringRef' name='aStr'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='replacement'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFAttributedStringSetAttribute'>
<arg type='^{__CFAttributedString=}' declared_type='CFMutableAttributedStringRef' name='aStr'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='attrName'/>
<arg type='@' declared_type='CFTypeRef' name='value'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFAttributedStringSetAttributes'>
<arg type='^{__CFAttributedString=}' declared_type='CFMutableAttributedStringRef' name='aStr'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='replacement'/>
<arg type='B' declared_type='Boolean' name='clearOtherAttributes'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBagAddValue'>
<arg type='^{__CFBag=}' declared_type='CFMutableBagRef' name='theBag'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBagApplyFunction'>
<arg type='^{__CFBag=}' declared_type='CFBagRef' name='theBag'/>
<arg function_pointer='true' type='^?' declared_type='CFBagApplierFunction' name='applier'>
<arg const='true' type='^v' declared_type='void*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^v' declared_type='void*' name='context'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBagContainsValue'>
<arg type='^{__CFBag=}' declared_type='CFBagRef' name='theBag'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBagCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg const='true' type='^^v' declared_type='void**' name='values'/>
<arg type='l' type64='q' declared_type='CFIndex' name='numValues'/>
<arg const='true' type='^{_CFBagCallBacks=i^?^?^?^?^?}' type64='^{_CFBagCallBacks=q^?^?^?^?^?}' declared_type='CFBagCallBacks*' name='callBacks'/>
<retval type='^{__CFBag=}' already_retained='true' declared_type='CFBagRef'/>
</function>
<function name='CFBagCreateCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFBag=}' declared_type='CFBagRef' name='theBag'/>
<retval type='^{__CFBag=}' already_retained='true' declared_type='CFBagRef'/>
</function>
<function name='CFBagCreateMutable'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' type64='q' declared_type='CFIndex' name='capacity'/>
<arg const='true' type='^{_CFBagCallBacks=i^?^?^?^?^?}' type64='^{_CFBagCallBacks=q^?^?^?^?^?}' declared_type='CFBagCallBacks*' name='callBacks'/>
<retval type='^{__CFBag=}' already_retained='true' declared_type='CFMutableBagRef'/>
</function>
<function name='CFBagCreateMutableCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' type64='q' declared_type='CFIndex' name='capacity'/>
<arg type='^{__CFBag=}' declared_type='CFBagRef' name='theBag'/>
<retval type='^{__CFBag=}' already_retained='true' declared_type='CFMutableBagRef'/>
</function>
<function name='CFBagGetCount'>
<arg type='^{__CFBag=}' declared_type='CFBagRef' name='theBag'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFBagGetCountOfValue'>
<arg type='^{__CFBag=}' declared_type='CFBagRef' name='theBag'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFBagGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFBagGetValue'>
<arg type='^{__CFBag=}' declared_type='CFBagRef' name='theBag'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval const='true' type='^v' declared_type='void*'/>
</function>
<function name='CFBagGetValueIfPresent'>
<arg type='^{__CFBag=}' declared_type='CFBagRef' name='theBag'/>
<arg const='true' type='^v' declared_type='void*' name='candidate'/>
<arg const='true' type='^^v' declared_type='void**' name='value'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBagGetValues'>
<arg type='^{__CFBag=}' declared_type='CFBagRef' name='theBag'/>
<arg const='true' type='^^v' declared_type='void**' name='values'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBagRemoveAllValues'>
<arg type='^{__CFBag=}' declared_type='CFMutableBagRef' name='theBag'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBagRemoveValue'>
<arg type='^{__CFBag=}' declared_type='CFMutableBagRef' name='theBag'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBagReplaceValue'>
<arg type='^{__CFBag=}' declared_type='CFMutableBagRef' name='theBag'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBagSetValue'>
<arg type='^{__CFBag=}' declared_type='CFMutableBagRef' name='theBag'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBinaryHeapAddValue'>
<arg type='^{__CFBinaryHeap=}' declared_type='CFBinaryHeapRef' name='heap'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBinaryHeapApplyFunction'>
<arg type='^{__CFBinaryHeap=}' declared_type='CFBinaryHeapRef' name='heap'/>
<arg function_pointer='true' type='^?' declared_type='CFBinaryHeapApplierFunction' name='applier'>
<arg const='true' type='^v' declared_type='void*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^v' declared_type='void*' name='context'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBinaryHeapContainsValue'>
<arg type='^{__CFBinaryHeap=}' declared_type='CFBinaryHeapRef' name='heap'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBinaryHeapCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' type64='q' declared_type='CFIndex' name='capacity'/>
<arg const='true' type='^{_CFBinaryHeapCallBacks=i^?^?^?^?}' type64='^{_CFBinaryHeapCallBacks=q^?^?^?^?}' declared_type='CFBinaryHeapCallBacks*' name='callBacks'/>
<arg const='true' type='^{_CFBinaryHeapCompareContext=i^v^?^?^?}' type64='^{_CFBinaryHeapCompareContext=q^v^?^?^?}' declared_type='CFBinaryHeapCompareContext*' name='compareContext'/>
<retval type='^{__CFBinaryHeap=}' already_retained='true' declared_type='CFBinaryHeapRef'/>
</function>
<function name='CFBinaryHeapCreateCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' type64='q' declared_type='CFIndex' name='capacity'/>
<arg type='^{__CFBinaryHeap=}' declared_type='CFBinaryHeapRef' name='heap'/>
<retval type='^{__CFBinaryHeap=}' already_retained='true' declared_type='CFBinaryHeapRef'/>
</function>
<function name='CFBinaryHeapGetCount'>
<arg type='^{__CFBinaryHeap=}' declared_type='CFBinaryHeapRef' name='heap'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFBinaryHeapGetCountOfValue'>
<arg type='^{__CFBinaryHeap=}' declared_type='CFBinaryHeapRef' name='heap'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFBinaryHeapGetMinimum'>
<arg type='^{__CFBinaryHeap=}' declared_type='CFBinaryHeapRef' name='heap'/>
<retval const='true' type='^v' declared_type='void*'/>
</function>
<function name='CFBinaryHeapGetMinimumIfPresent'>
<arg type='^{__CFBinaryHeap=}' declared_type='CFBinaryHeapRef' name='heap'/>
<arg const='true' type='^^v' declared_type='void**' name='value'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBinaryHeapGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFBinaryHeapGetValues'>
<arg type='^{__CFBinaryHeap=}' declared_type='CFBinaryHeapRef' name='heap'/>
<arg const='true' type='^^v' declared_type='void**' name='values'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBinaryHeapRemoveAllValues'>
<arg type='^{__CFBinaryHeap=}' declared_type='CFBinaryHeapRef' name='heap'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBinaryHeapRemoveMinimumValue'>
<arg type='^{__CFBinaryHeap=}' declared_type='CFBinaryHeapRef' name='heap'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBitVectorContainsBit'>
<arg type='^{__CFBitVector=}' declared_type='CFBitVectorRef' name='bv'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<arg type='L' type64='I' declared_type='CFBit' name='value'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBitVectorCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg const='true' type='*' declared_type='UInt8*' name='bytes'/>
<arg type='l' type64='q' declared_type='CFIndex' name='numBits'/>
<retval type='^{__CFBitVector=}' already_retained='true' declared_type='CFBitVectorRef'/>
</function>
<function name='CFBitVectorCreateCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFBitVector=}' declared_type='CFBitVectorRef' name='bv'/>
<retval type='^{__CFBitVector=}' already_retained='true' declared_type='CFBitVectorRef'/>
</function>
<function name='CFBitVectorCreateMutable'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' type64='q' declared_type='CFIndex' name='capacity'/>
<retval type='^{__CFBitVector=}' already_retained='true' declared_type='CFMutableBitVectorRef'/>
</function>
<function name='CFBitVectorCreateMutableCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' type64='q' declared_type='CFIndex' name='capacity'/>
<arg type='^{__CFBitVector=}' declared_type='CFBitVectorRef' name='bv'/>
<retval type='^{__CFBitVector=}' already_retained='true' declared_type='CFMutableBitVectorRef'/>
</function>
<function name='CFBitVectorFlipBitAtIndex'>
<arg type='^{__CFBitVector=}' declared_type='CFMutableBitVectorRef' name='bv'/>
<arg type='l' type64='q' declared_type='CFIndex' name='idx'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBitVectorFlipBits'>
<arg type='^{__CFBitVector=}' declared_type='CFMutableBitVectorRef' name='bv'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBitVectorGetBitAtIndex'>
<arg type='^{__CFBitVector=}' declared_type='CFBitVectorRef' name='bv'/>
<arg type='l' type64='q' declared_type='CFIndex' name='idx'/>
<retval type='L' type64='I' declared_type='CFBit'/>
</function>
<function name='CFBitVectorGetBits'>
<arg type='^{__CFBitVector=}' declared_type='CFBitVectorRef' name='bv'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<arg type='*' declared_type='UInt8*' name='bytes'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBitVectorGetCount'>
<arg type='^{__CFBitVector=}' declared_type='CFBitVectorRef' name='bv'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFBitVectorGetCountOfBit'>
<arg type='^{__CFBitVector=}' declared_type='CFBitVectorRef' name='bv'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<arg type='L' type64='I' declared_type='CFBit' name='value'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFBitVectorGetFirstIndexOfBit'>
<arg type='^{__CFBitVector=}' declared_type='CFBitVectorRef' name='bv'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<arg type='L' type64='I' declared_type='CFBit' name='value'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFBitVectorGetLastIndexOfBit'>
<arg type='^{__CFBitVector=}' declared_type='CFBitVectorRef' name='bv'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<arg type='L' type64='I' declared_type='CFBit' name='value'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFBitVectorGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFBitVectorSetAllBits'>
<arg type='^{__CFBitVector=}' declared_type='CFMutableBitVectorRef' name='bv'/>
<arg type='L' type64='I' declared_type='CFBit' name='value'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBitVectorSetBitAtIndex'>
<arg type='^{__CFBitVector=}' declared_type='CFMutableBitVectorRef' name='bv'/>
<arg type='l' type64='q' declared_type='CFIndex' name='idx'/>
<arg type='L' type64='I' declared_type='CFBit' name='value'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBitVectorSetBits'>
<arg type='^{__CFBitVector=}' declared_type='CFMutableBitVectorRef' name='bv'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<arg type='L' type64='I' declared_type='CFBit' name='value'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBitVectorSetCount'>
<arg type='^{__CFBitVector=}' declared_type='CFMutableBitVectorRef' name='bv'/>
<arg type='l' type64='q' declared_type='CFIndex' name='count'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBooleanGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFBooleanGetValue'>
<arg type='^{__CFBoolean=}' declared_type='CFBooleanRef' name='boolean'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBundleCloseBundleResourceMap'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='s' type64='i' declared_type='CFBundleRefNum' name='refNum'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBundleCopyAuxiliaryExecutableURL'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='executableName'/>
<retval type='^{__CFURL=}' already_retained='true' declared_type='CFURLRef'/>
</function>
<function name='CFBundleCopyBuiltInPlugInsURL'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFURL=}' already_retained='true' declared_type='CFURLRef'/>
</function>
<function name='CFBundleCopyBundleLocalizations'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFArray=}' already_retained='true' declared_type='CFArrayRef'/>
</function>
<function name='CFBundleCopyBundleURL'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFURL=}' already_retained='true' declared_type='CFURLRef'/>
</function>
<function name='CFBundleCopyExecutableArchitectures'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFArray=}' already_retained='true' declared_type='CFArrayRef'/>
</function>
<function name='CFBundleCopyExecutableArchitecturesForURL'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<retval type='^{__CFArray=}' already_retained='true' declared_type='CFArrayRef'/>
</function>
<function name='CFBundleCopyExecutableURL'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFURL=}' already_retained='true' declared_type='CFURLRef'/>
</function>
<function name='CFBundleCopyInfoDictionaryForURL'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<retval type='^{__CFDictionary=}' already_retained='true' declared_type='CFDictionaryRef'/>
</function>
<function name='CFBundleCopyInfoDictionaryInDirectory'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='bundleURL'/>
<retval type='^{__CFDictionary=}' already_retained='true' declared_type='CFDictionaryRef'/>
</function>
<function name='CFBundleCopyLocalizationsForPreferences'>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='locArray'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='prefArray'/>
<retval type='^{__CFArray=}' already_retained='true' declared_type='CFArrayRef'/>
</function>
<function name='CFBundleCopyLocalizationsForURL'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<retval type='^{__CFArray=}' already_retained='true' declared_type='CFArrayRef'/>
</function>
<function name='CFBundleCopyLocalizedString'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='value'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='tableName'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFBundleCopyPreferredLocalizationsFromArray'>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='locArray'/>
<retval type='^{__CFArray=}' already_retained='true' declared_type='CFArrayRef'/>
</function>
<function name='CFBundleCopyPrivateFrameworksURL'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFURL=}' already_retained='true' declared_type='CFURLRef'/>
</function>
<function name='CFBundleCopyResourceURL'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='resourceName'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='resourceType'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='subDirName'/>
<retval type='^{__CFURL=}' already_retained='true' declared_type='CFURLRef'/>
</function>
<function name='CFBundleCopyResourceURLForLocalization'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='resourceName'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='resourceType'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='subDirName'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='localizationName'/>
<retval type='^{__CFURL=}' already_retained='true' declared_type='CFURLRef'/>
</function>
<function name='CFBundleCopyResourceURLInDirectory'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='bundleURL'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='resourceName'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='resourceType'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='subDirName'/>
<retval type='^{__CFURL=}' already_retained='true' declared_type='CFURLRef'/>
</function>
<function name='CFBundleCopyResourceURLsOfType'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='resourceType'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='subDirName'/>
<retval type='^{__CFArray=}' already_retained='true' declared_type='CFArrayRef'/>
</function>
<function name='CFBundleCopyResourceURLsOfTypeForLocalization'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='resourceType'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='subDirName'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='localizationName'/>
<retval type='^{__CFArray=}' already_retained='true' declared_type='CFArrayRef'/>
</function>
<function name='CFBundleCopyResourceURLsOfTypeInDirectory'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='bundleURL'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='resourceType'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='subDirName'/>
<retval type='^{__CFArray=}' already_retained='true' declared_type='CFArrayRef'/>
</function>
<function name='CFBundleCopyResourcesDirectoryURL'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFURL=}' already_retained='true' declared_type='CFURLRef'/>
</function>
<function name='CFBundleCopySharedFrameworksURL'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFURL=}' already_retained='true' declared_type='CFURLRef'/>
</function>
<function name='CFBundleCopySharedSupportURL'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFURL=}' already_retained='true' declared_type='CFURLRef'/>
</function>
<function name='CFBundleCopySupportFilesDirectoryURL'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFURL=}' already_retained='true' declared_type='CFURLRef'/>
</function>
<function name='CFBundleCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='bundleURL'/>
<retval type='^{__CFBundle=}' already_retained='true' declared_type='CFBundleRef'/>
</function>
<function name='CFBundleCreateBundlesFromDirectory'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='directoryURL'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='bundleType'/>
<retval type='^{__CFArray=}' already_retained='true' declared_type='CFArrayRef'/>
</function>
<function name='CFBundleGetAllBundles'>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFBundleGetBundleWithIdentifier'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='bundleID'/>
<retval type='^{__CFBundle=}' declared_type='CFBundleRef'/>
</function>
<function name='CFBundleGetDataPointerForName'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='symbolName'/>
<retval type='^v' declared_type='void*'/>
</function>
<function name='CFBundleGetDataPointersForNames'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='symbolNames'/>
<arg type='^^v' declared_type='void**' name='stbl'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBundleGetDevelopmentRegion'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFBundleGetFunctionPointerForName'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='functionName'/>
<retval type='^v' declared_type='void*'/>
</function>
<function name='CFBundleGetFunctionPointersForNames'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='functionNames'/>
<arg type='^^v' declared_type='void**' name='ftbl'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBundleGetIdentifier'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFBundleGetInfoDictionary'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef'/>
</function>
<function name='CFBundleGetLocalInfoDictionary'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef'/>
</function>
<function name='CFBundleGetMainBundle'>
<retval type='^{__CFBundle=}' declared_type='CFBundleRef'/>
</function>
<function name='CFBundleGetPackageInfo'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^I' declared_type='UInt32*' name='packageType'/>
<arg type='^I' declared_type='UInt32*' name='packageCreator'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFBundleGetPackageInfoInDirectory'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^I' declared_type='UInt32*' name='packageType'/>
<arg type='^I' declared_type='UInt32*' name='packageCreator'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBundleGetPlugIn'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='^{__CFBundle=}' declared_type='CFPlugInRef'/>
</function>
<function name='CFBundleGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFBundleGetValueForInfoDictionaryKey'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<retval type='@' declared_type='CFTypeRef'/>
</function>
<function name='CFBundleGetVersionNumber'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='L' type64='I' declared_type='UInt32'/>
</function>
<function name='CFBundleIsExecutableLoaded'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBundleLoadExecutable'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBundleLoadExecutableAndReturnError'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBundleOpenBundleResourceFiles'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^s' type64='^i' declared_type='CFBundleRefNum*' name='refNum'/>
<arg type='^s' type64='^i' declared_type='CFBundleRefNum*' name='localizedRefNum'/>
<retval type='l' type64='i' declared_type='SInt32'/>
</function>
<function name='CFBundleOpenBundleResourceMap'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='s' type64='i' declared_type='CFBundleRefNum'/>
</function>
<function name='CFBundlePreflightExecutable'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFBundleUnloadExecutable'>
<arg type='^{__CFBundle=}' declared_type='CFBundleRef' name='bundle'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='CFByteOrderGetCurrent'>
<retval type='l' type64='q' declared_type='CFByteOrder'/>
</function>
<function variadic='true' name='CFCalendarAddComponents'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<arg type='^d' declared_type='CFAbsoluteTime*' name='at'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='options'/>
<arg const='true' type='*' declared_type='char*' name='componentDesc'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function variadic='true' name='CFCalendarComposeAbsoluteTime'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<arg type='^d' declared_type='CFAbsoluteTime*' name='at'/>
<arg const='true' type='*' declared_type='char*' name='componentDesc'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFCalendarCopyCurrent'>
<retval type='^{__CFCalendar=}' already_retained='true' declared_type='CFCalendarRef'/>
</function>
<function name='CFCalendarCopyLocale'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<retval type='^{__CFLocale=}' already_retained='true' declared_type='CFLocaleRef'/>
</function>
<function name='CFCalendarCopyTimeZone'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<retval type='^{__CFTimeZone=}' already_retained='true' declared_type='CFTimeZoneRef'/>
</function>
<function name='CFCalendarCreateWithIdentifier'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='identifier'/>
<retval type='^{__CFCalendar=}' already_retained='true' declared_type='CFCalendarRef'/>
</function>
<function variadic='true' name='CFCalendarDecomposeAbsoluteTime'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<arg const='true' type='*' declared_type='char*' name='componentDesc'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function variadic='true' name='CFCalendarGetComponentDifference'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<arg type='d' declared_type='CFAbsoluteTime' name='startingAT'/>
<arg type='d' declared_type='CFAbsoluteTime' name='resultAT'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='options'/>
<arg const='true' type='*' declared_type='char*' name='componentDesc'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFCalendarGetFirstWeekday'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFCalendarGetIdentifier'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFCalendarGetMaximumRangeOfUnit'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<arg type='L' type64='Q' declared_type='CFCalendarUnit' name='unit'/>
<retval type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange'/>
</function>
<function name='CFCalendarGetMinimumDaysInFirstWeek'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFCalendarGetMinimumRangeOfUnit'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<arg type='L' type64='Q' declared_type='CFCalendarUnit' name='unit'/>
<retval type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange'/>
</function>
<function name='CFCalendarGetOrdinalityOfUnit'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<arg type='L' type64='Q' declared_type='CFCalendarUnit' name='smallerUnit'/>
<arg type='L' type64='Q' declared_type='CFCalendarUnit' name='biggerUnit'/>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFCalendarGetRangeOfUnit'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<arg type='L' type64='Q' declared_type='CFCalendarUnit' name='smallerUnit'/>
<arg type='L' type64='Q' declared_type='CFCalendarUnit' name='biggerUnit'/>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<retval type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange'/>
</function>
<function name='CFCalendarGetTimeRangeOfUnit'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<arg type='L' type64='Q' declared_type='CFCalendarUnit' name='unit'/>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<arg type='^d' declared_type='CFAbsoluteTime*' name='startp'/>
<arg type='^d' declared_type='CFTimeInterval*' name='tip'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFCalendarGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFCalendarSetFirstWeekday'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<arg type='l' type64='q' declared_type='CFIndex' name='wkdy'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCalendarSetLocale'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCalendarSetMinimumDaysInFirstWeek'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<arg type='l' type64='q' declared_type='CFIndex' name='mwd'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCalendarSetTimeZone'>
<arg type='^{__CFCalendar=}' declared_type='CFCalendarRef' name='calendar'/>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCharacterSetAddCharactersInRange'>
<arg type='^{__CFCharacterSet=}' declared_type='CFMutableCharacterSetRef' name='theSet'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='theRange'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCharacterSetAddCharactersInString'>
<arg type='^{__CFCharacterSet=}' declared_type='CFMutableCharacterSetRef' name='theSet'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCharacterSetCreateBitmapRepresentation'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' name='theSet'/>
<retval type='^{__CFData=}' already_retained='true' declared_type='CFDataRef'/>
</function>
<function name='CFCharacterSetCreateCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' name='theSet'/>
<retval type='^{__CFCharacterSet=}' already_retained='true' declared_type='CFCharacterSetRef'/>
</function>
<function name='CFCharacterSetCreateInvertedSet'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' name='theSet'/>
<retval type='^{__CFCharacterSet=}' already_retained='true' declared_type='CFCharacterSetRef'/>
</function>
<function name='CFCharacterSetCreateMutable'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<retval type='^{__CFCharacterSet=}' already_retained='true' declared_type='CFMutableCharacterSetRef'/>
</function>
<function name='CFCharacterSetCreateMutableCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' name='theSet'/>
<retval type='^{__CFCharacterSet=}' already_retained='true' declared_type='CFMutableCharacterSetRef'/>
</function>
<function name='CFCharacterSetCreateWithBitmapRepresentation'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='theData'/>
<retval type='^{__CFCharacterSet=}' already_retained='true' declared_type='CFCharacterSetRef'/>
</function>
<function name='CFCharacterSetCreateWithCharactersInRange'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='theRange'/>
<retval type='^{__CFCharacterSet=}' already_retained='true' declared_type='CFCharacterSetRef'/>
</function>
<function name='CFCharacterSetCreateWithCharactersInString'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<retval type='^{__CFCharacterSet=}' already_retained='true' declared_type='CFCharacterSetRef'/>
</function>
<function name='CFCharacterSetGetPredefined'>
<arg type='l' type64='q' declared_type='CFCharacterSetPredefinedSet' name='theSetIdentifier'/>
<retval type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef'/>
</function>
<function name='CFCharacterSetGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFCharacterSetHasMemberInPlane'>
<arg type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' name='theSet'/>
<arg type='l' type64='q' declared_type='CFIndex' name='thePlane'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFCharacterSetIntersect'>
<arg type='^{__CFCharacterSet=}' declared_type='CFMutableCharacterSetRef' name='theSet'/>
<arg type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' name='theOtherSet'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCharacterSetInvert'>
<arg type='^{__CFCharacterSet=}' declared_type='CFMutableCharacterSetRef' name='theSet'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCharacterSetIsCharacterMember'>
<arg type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' name='theSet'/>
<arg type='S' declared_type='UniChar' name='theChar'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFCharacterSetIsLongCharacterMember'>
<arg type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' name='theSet'/>
<arg type='L' type64='I' declared_type='UTF32Char' name='theChar'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFCharacterSetIsSupersetOfSet'>
<arg type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' name='theSet'/>
<arg type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' name='theOtherset'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFCharacterSetRemoveCharactersInRange'>
<arg type='^{__CFCharacterSet=}' declared_type='CFMutableCharacterSetRef' name='theSet'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='theRange'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCharacterSetRemoveCharactersInString'>
<arg type='^{__CFCharacterSet=}' declared_type='CFMutableCharacterSetRef' name='theSet'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFCharacterSetUnion'>
<arg type='^{__CFCharacterSet=}' declared_type='CFMutableCharacterSetRef' name='theSet'/>
<arg type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' name='theOtherSet'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='CFConvertDoubleHostToSwapped'>
<arg type='d' declared_type='double' name='arg'/>
<retval type='{_CFSwappedFloat64=Q}' declared_type='CFSwappedFloat64'/>
</function>
<function inline='true' name='CFConvertDoubleSwappedToHost'>
<arg type='{_CFSwappedFloat64=Q}' declared_type='CFSwappedFloat64' name='arg'/>
<retval type='d' declared_type='double'/>
</function>
<function inline='true' name='CFConvertFloat32HostToSwapped'>
<arg type='f' declared_type='Float32' name='arg'/>
<retval type='{_CFSwappedFloat32=I}' declared_type='CFSwappedFloat32'/>
</function>
<function inline='true' name='CFConvertFloat32SwappedToHost'>
<arg type='{_CFSwappedFloat32=I}' declared_type='CFSwappedFloat32' name='arg'/>
<retval type='f' declared_type='Float32'/>
</function>
<function inline='true' name='CFConvertFloat64HostToSwapped'>
<arg type='d' declared_type='Float64' name='arg'/>
<retval type='{_CFSwappedFloat64=Q}' declared_type='CFSwappedFloat64'/>
</function>
<function inline='true' name='CFConvertFloat64SwappedToHost'>
<arg type='{_CFSwappedFloat64=Q}' declared_type='CFSwappedFloat64' name='arg'/>
<retval type='d' declared_type='Float64'/>
</function>
<function inline='true' name='CFConvertFloatHostToSwapped'>
<arg type='f' declared_type='float' name='arg'/>
<retval type='{_CFSwappedFloat32=I}' declared_type='CFSwappedFloat32'/>
</function>
<function inline='true' name='CFConvertFloatSwappedToHost'>
<arg type='{_CFSwappedFloat32=I}' declared_type='CFSwappedFloat32' name='arg'/>
<retval type='f' declared_type='float'/>
</function>
<function name='CFCopyDescription'>
<arg type='@' declared_type='CFTypeRef' name='cf'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFCopyTypeIDDescription'>
<arg type='L' type64='Q' declared_type='CFTypeID' name='type_id'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFDataAppendBytes'>
<arg type='^{__CFData=}' declared_type='CFMutableDataRef' name='theData'/>
<arg const='true' type='*' declared_type='UInt8*' name='bytes'/>
<arg type='l' type64='q' declared_type='CFIndex' name='length'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDataCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg const='true' type='*' declared_type='UInt8*' name='bytes'/>
<arg type='l' type64='q' declared_type='CFIndex' name='length'/>
<retval type='^{__CFData=}' already_retained='true' declared_type='CFDataRef'/>
</function>
<function name='CFDataCreateCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='theData'/>
<retval type='^{__CFData=}' already_retained='true' declared_type='CFDataRef'/>
</function>
<function name='CFDataCreateMutable'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' type64='q' declared_type='CFIndex' name='capacity'/>
<retval type='^{__CFData=}' already_retained='true' declared_type='CFMutableDataRef'/>
</function>
<function name='CFDataCreateMutableCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' type64='q' declared_type='CFIndex' name='capacity'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='theData'/>
<retval type='^{__CFData=}' already_retained='true' declared_type='CFMutableDataRef'/>
</function>
<function name='CFDataCreateWithBytesNoCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg const='true' type='*' declared_type='UInt8*' name='bytes'/>
<arg type='l' type64='q' declared_type='CFIndex' name='length'/>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='bytesDeallocator'/>
<retval type='^{__CFData=}' already_retained='true' declared_type='CFDataRef'/>
</function>
<function name='CFDataDeleteBytes'>
<arg type='^{__CFData=}' declared_type='CFMutableDataRef' name='theData'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDataFind'>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='theData'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='dataToFind'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='searchRange'/>
<arg type='L' type64='Q' declared_type='CFDataSearchFlags' name='compareOptions'/>
<retval type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange'/>
</function>
<function name='CFDataGetBytePtr'>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='theData'/>
<retval const='true' type='*' declared_type='UInt8*'/>
</function>
<function name='CFDataGetBytes'>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='theData'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<arg type='*' declared_type='UInt8*' name='buffer'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDataGetLength'>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='theData'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFDataGetMutableBytePtr'>
<arg type='^{__CFData=}' declared_type='CFMutableDataRef' name='theData'/>
<retval type='*' declared_type='UInt8*'/>
</function>
<function name='CFDataGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFDataIncreaseLength'>
<arg type='^{__CFData=}' declared_type='CFMutableDataRef' name='theData'/>
<arg type='l' type64='q' declared_type='CFIndex' name='extraLength'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDataReplaceBytes'>
<arg type='^{__CFData=}' declared_type='CFMutableDataRef' name='theData'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<arg const='true' type='*' declared_type='UInt8*' name='newBytes'/>
<arg type='l' type64='q' declared_type='CFIndex' name='newLength'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDataSetLength'>
<arg type='^{__CFData=}' declared_type='CFMutableDataRef' name='theData'/>
<arg type='l' type64='q' declared_type='CFIndex' name='length'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDateCompare'>
<arg type='^{__CFDate=}' declared_type='CFDateRef' name='theDate'/>
<arg type='^{__CFDate=}' declared_type='CFDateRef' name='otherDate'/>
<arg type='^v' declared_type='void*' name='context'/>
<retval type='l' type64='q' declared_type='CFComparisonResult'/>
</function>
<function name='CFDateCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<retval type='^{__CFDate=}' already_retained='true' declared_type='CFDateRef'/>
</function>
<function name='CFDateFormatterCopyProperty'>
<arg type='^{__CFDateFormatter=}' declared_type='CFDateFormatterRef' name='formatter'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<retval type='@' already_retained='true' declared_type='CFTypeRef'/>
</function>
<function name='CFDateFormatterCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<arg type='l' type64='q' declared_type='CFDateFormatterStyle' name='dateStyle'/>
<arg type='l' type64='q' declared_type='CFDateFormatterStyle' name='timeStyle'/>
<retval type='^{__CFDateFormatter=}' already_retained='true' declared_type='CFDateFormatterRef'/>
</function>
<function name='CFDateFormatterCreateDateFormatFromTemplate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='tmplate'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='options'/>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFDateFormatterCreateDateFromString'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFDateFormatter=}' declared_type='CFDateFormatterRef' name='formatter'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='string'/>
<arg type='^{_CFRange=ii}' type64='^{_CFRange=qq}' declared_type='CFRange*' name='rangep'/>
<retval type='^{__CFDate=}' already_retained='true' declared_type='CFDateRef'/>
</function>
<function name='CFDateFormatterCreateStringWithAbsoluteTime'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFDateFormatter=}' declared_type='CFDateFormatterRef' name='formatter'/>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFDateFormatterCreateStringWithDate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFDateFormatter=}' declared_type='CFDateFormatterRef' name='formatter'/>
<arg type='^{__CFDate=}' declared_type='CFDateRef' name='date'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFDateFormatterGetAbsoluteTimeFromString'>
<arg type='^{__CFDateFormatter=}' declared_type='CFDateFormatterRef' name='formatter'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='string'/>
<arg type='^{_CFRange=ii}' type64='^{_CFRange=qq}' declared_type='CFRange*' name='rangep'/>
<arg type='^d' declared_type='CFAbsoluteTime*' name='atp'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFDateFormatterGetDateStyle'>
<arg type='^{__CFDateFormatter=}' declared_type='CFDateFormatterRef' name='formatter'/>
<retval type='l' type64='q' declared_type='CFDateFormatterStyle'/>
</function>
<function name='CFDateFormatterGetFormat'>
<arg type='^{__CFDateFormatter=}' declared_type='CFDateFormatterRef' name='formatter'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFDateFormatterGetLocale'>
<arg type='^{__CFDateFormatter=}' declared_type='CFDateFormatterRef' name='formatter'/>
<retval type='^{__CFLocale=}' declared_type='CFLocaleRef'/>
</function>
<function name='CFDateFormatterGetTimeStyle'>
<arg type='^{__CFDateFormatter=}' declared_type='CFDateFormatterRef' name='formatter'/>
<retval type='l' type64='q' declared_type='CFDateFormatterStyle'/>
</function>
<function name='CFDateFormatterGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFDateFormatterSetFormat'>
<arg type='^{__CFDateFormatter=}' declared_type='CFDateFormatterRef' name='formatter'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='formatString'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDateFormatterSetProperty'>
<arg type='^{__CFDateFormatter=}' declared_type='CFDateFormatterRef' name='formatter'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='@' declared_type='CFTypeRef' name='value'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDateGetAbsoluteTime'>
<arg type='^{__CFDate=}' declared_type='CFDateRef' name='theDate'/>
<retval type='d' declared_type='CFAbsoluteTime'/>
</function>
<function name='CFDateGetTimeIntervalSinceDate'>
<arg type='^{__CFDate=}' declared_type='CFDateRef' name='theDate'/>
<arg type='^{__CFDate=}' declared_type='CFDateRef' name='otherDate'/>
<retval type='d' declared_type='CFTimeInterval'/>
</function>
<function name='CFDateGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFDictionaryAddValue'>
<arg type='^{__CFDictionary=}' declared_type='CFMutableDictionaryRef' name='theDict'/>
<arg const='true' type='^v' declared_type='void*' name='key'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDictionaryApplyFunction'>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='theDict'/>
<arg function_pointer='true' type='^?' declared_type='CFDictionaryApplierFunction' name='applier'>
<arg const='true' type='^v' declared_type='void*'/>
<arg const='true' type='^v' declared_type='void*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^v' declared_type='void*' name='context'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDictionaryContainsKey'>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='theDict'/>
<arg const='true' type='^v' declared_type='void*' name='key'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFDictionaryContainsValue'>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='theDict'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFDictionaryCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg const='true' type='^^v' declared_type='void**' name='keys'/>
<arg const='true' type='^^v' declared_type='void**' name='values'/>
<arg type='l' type64='q' declared_type='CFIndex' name='numValues'/>
<arg const='true' type='^{_CFDictionaryKeyCallBacks=i^?^?^?^?^?}' type64='^{_CFDictionaryKeyCallBacks=q^?^?^?^?^?}' declared_type='CFDictionaryKeyCallBacks*' name='keyCallBacks'/>
<arg const='true' type='^{_CFDictionaryValueCallBacks=i^?^?^?^?}' type64='^{_CFDictionaryValueCallBacks=q^?^?^?^?}' declared_type='CFDictionaryValueCallBacks*' name='valueCallBacks'/>
<retval type='^{__CFDictionary=}' already_retained='true' declared_type='CFDictionaryRef'/>
</function>
<function name='CFDictionaryCreateCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='theDict'/>
<retval type='^{__CFDictionary=}' already_retained='true' declared_type='CFDictionaryRef'/>
</function>
<function name='CFDictionaryCreateMutable'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' type64='q' declared_type='CFIndex' name='capacity'/>
<arg const='true' type='^{_CFDictionaryKeyCallBacks=i^?^?^?^?^?}' type64='^{_CFDictionaryKeyCallBacks=q^?^?^?^?^?}' declared_type='CFDictionaryKeyCallBacks*' name='keyCallBacks'/>
<arg const='true' type='^{_CFDictionaryValueCallBacks=i^?^?^?^?}' type64='^{_CFDictionaryValueCallBacks=q^?^?^?^?}' declared_type='CFDictionaryValueCallBacks*' name='valueCallBacks'/>
<retval type='^{__CFDictionary=}' already_retained='true' declared_type='CFMutableDictionaryRef'/>
</function>
<function name='CFDictionaryCreateMutableCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' type64='q' declared_type='CFIndex' name='capacity'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='theDict'/>
<retval type='^{__CFDictionary=}' already_retained='true' declared_type='CFMutableDictionaryRef'/>
</function>
<function name='CFDictionaryGetCount'>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='theDict'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFDictionaryGetCountOfKey'>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='theDict'/>
<arg const='true' type='^v' declared_type='void*' name='key'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFDictionaryGetCountOfValue'>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='theDict'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFDictionaryGetKeysAndValues'>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='theDict'/>
<arg const='true' type='^^v' declared_type='void**' name='keys'/>
<arg const='true' type='^^v' declared_type='void**' name='values'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDictionaryGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFDictionaryGetValue'>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='theDict'/>
<arg const='true' type='^v' declared_type='void*' name='key'/>
<retval const='true' type='^v' declared_type='void*'/>
</function>
<function name='CFDictionaryGetValueIfPresent'>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='theDict'/>
<arg const='true' type='^v' declared_type='void*' name='key'/>
<arg const='true' type='^^v' declared_type='void**' name='value'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFDictionaryRemoveAllValues'>
<arg type='^{__CFDictionary=}' declared_type='CFMutableDictionaryRef' name='theDict'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDictionaryRemoveValue'>
<arg type='^{__CFDictionary=}' declared_type='CFMutableDictionaryRef' name='theDict'/>
<arg const='true' type='^v' declared_type='void*' name='key'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDictionaryReplaceValue'>
<arg type='^{__CFDictionary=}' declared_type='CFMutableDictionaryRef' name='theDict'/>
<arg const='true' type='^v' declared_type='void*' name='key'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFDictionarySetValue'>
<arg type='^{__CFDictionary=}' declared_type='CFMutableDictionaryRef' name='theDict'/>
<arg const='true' type='^v' declared_type='void*' name='key'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFEqual'>
<arg type='@' declared_type='CFTypeRef' name='cf1'/>
<arg type='@' declared_type='CFTypeRef' name='cf2'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFErrorCopyDescription'>
<arg type='^{__CFError=}' declared_type='CFErrorRef' name='err'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFErrorCopyFailureReason'>
<arg type='^{__CFError=}' declared_type='CFErrorRef' name='err'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFErrorCopyRecoverySuggestion'>
<arg type='^{__CFError=}' declared_type='CFErrorRef' name='err'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFErrorCopyUserInfo'>
<arg type='^{__CFError=}' declared_type='CFErrorRef' name='err'/>
<retval type='^{__CFDictionary=}' already_retained='true' declared_type='CFDictionaryRef'/>
</function>
<function name='CFErrorCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='domain'/>
<arg type='l' type64='q' declared_type='CFIndex' name='code'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='userInfo'/>
<retval type='^{__CFError=}' already_retained='true' declared_type='CFErrorRef'/>
</function>
<function name='CFErrorCreateWithUserInfoKeysAndValues'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='domain'/>
<arg type='l' type64='q' declared_type='CFIndex' name='code'/>
<arg const='true' type='^^v' declared_type='void **' name='userInfoKeys'/>
<arg const='true' type='^^v' declared_type='void **' name='userInfoValues'/>
<arg type='l' type64='q' declared_type='CFIndex' name='numUserInfoValues'/>
<retval type='^{__CFError=}' already_retained='true' declared_type='CFErrorRef'/>
</function>
<function name='CFErrorGetCode'>
<arg type='^{__CFError=}' declared_type='CFErrorRef' name='err'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFErrorGetDomain'>
<arg type='^{__CFError=}' declared_type='CFErrorRef' name='err'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFErrorGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFFileDescriptorCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='i' declared_type='CFFileDescriptorNativeDescriptor' name='fd'/>
<arg type='B' declared_type='Boolean' name='closeOnInvalidate'/>
<arg function_pointer='true' type='^?' declared_type='CFFileDescriptorCallBack' name='callout'>
<arg type='^{__CFFileDescriptor=}' declared_type='CFFileDescriptorRef'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg const='true' type='^{_CFFileDescriptorContext=i^v^?^?^?}' type64='^{_CFFileDescriptorContext=q^v^?^?^?}' declared_type='CFFileDescriptorContext*' name='context'/>
<retval type='^{__CFFileDescriptor=}' already_retained='true' declared_type='CFFileDescriptorRef'/>
</function>
<function name='CFFileDescriptorCreateRunLoopSource'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFFileDescriptor=}' declared_type='CFFileDescriptorRef' name='f'/>
<arg type='l' type64='q' declared_type='CFIndex' name='order'/>
<retval type='^{__CFRunLoopSource=}' already_retained='true' declared_type='CFRunLoopSourceRef'/>
</function>
<function name='CFFileDescriptorDisableCallBacks'>
<arg type='^{__CFFileDescriptor=}' declared_type='CFFileDescriptorRef' name='f'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='callBackTypes'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFFileDescriptorEnableCallBacks'>
<arg type='^{__CFFileDescriptor=}' declared_type='CFFileDescriptorRef' name='f'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='callBackTypes'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFFileDescriptorGetContext'>
<arg type='^{__CFFileDescriptor=}' declared_type='CFFileDescriptorRef' name='f'/>
<arg type='^{_CFFileDescriptorContext=i^v^?^?^?}' type64='^{_CFFileDescriptorContext=q^v^?^?^?}' declared_type='CFFileDescriptorContext*' name='context'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFFileDescriptorGetNativeDescriptor'>
<arg type='^{__CFFileDescriptor=}' declared_type='CFFileDescriptorRef' name='f'/>
<retval type='i' declared_type='CFFileDescriptorNativeDescriptor'/>
</function>
<function name='CFFileDescriptorGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFFileDescriptorInvalidate'>
<arg type='^{__CFFileDescriptor=}' declared_type='CFFileDescriptorRef' name='f'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFFileDescriptorIsValid'>
<arg type='^{__CFFileDescriptor=}' declared_type='CFFileDescriptorRef' name='f'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecurityClearProperties'>
<arg type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' name='fileSec'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='clearPropertyMask'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecurityCopyAccessControlList'>
<arg type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' name='fileSec'/>
<arg type='^^{_acl}' declared_type='acl_t*' name='accessControlList'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecurityCopyGroupUUID'>
<arg type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' name='fileSec'/>
<arg type='^^{__CFUUID}' declared_type='CFUUIDRef*' name='groupUUID'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecurityCopyOwnerUUID'>
<arg type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' name='fileSec'/>
<arg type='^^{__CFUUID}' declared_type='CFUUIDRef*' name='ownerUUID'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecurityCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<retval type='^{__CFFileSecurity=}' already_retained='true' declared_type='CFFileSecurityRef'/>
</function>
<function name='CFFileSecurityCreateCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' name='fileSec'/>
<retval type='^{__CFFileSecurity=}' already_retained='true' declared_type='CFFileSecurityRef'/>
</function>
<function name='CFFileSecurityGetGroup'>
<arg type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' name='fileSec'/>
<arg type='^I' declared_type='gid_t*' name='group'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecurityGetMode'>
<arg type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' name='fileSec'/>
<arg type='^S' declared_type='mode_t*' name='mode'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecurityGetOwner'>
<arg type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' name='fileSec'/>
<arg type='^I' declared_type='uid_t*' name='owner'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecurityGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFFileSecuritySetAccessControlList'>
<arg type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' name='fileSec'/>
<arg type='^{_acl=}' declared_type='acl_t' name='accessControlList'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecuritySetGroup'>
<arg type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' name='fileSec'/>
<arg type='I' declared_type='gid_t' name='group'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecuritySetGroupUUID'>
<arg type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' name='fileSec'/>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='groupUUID'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecuritySetMode'>
<arg type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' name='fileSec'/>
<arg type='S' declared_type='mode_t' name='mode'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecuritySetOwner'>
<arg type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' name='fileSec'/>
<arg type='I' declared_type='uid_t' name='owner'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFFileSecuritySetOwnerUUID'>
<arg type='^{__CFFileSecurity=}' declared_type='CFFileSecurityRef' name='fileSec'/>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='ownerUUID'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFGetAllocator'>
<arg type='@' declared_type='CFTypeRef' name='cf'/>
<retval type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
</function>
<function name='CFGetRetainCount'>
<arg type='@' declared_type='CFTypeRef' name='cf'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFGetTypeID'>
<arg type='@' declared_type='CFTypeRef' name='cf'/>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFGregorianDateGetAbsoluteTime'>
<arg type='{_CFGregorianDate=iccccd}' declared_type='CFGregorianDate' name='gdate'/>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<retval type='d' declared_type='CFAbsoluteTime'/>
</function>
<function name='CFGregorianDateIsValid'>
<arg type='{_CFGregorianDate=iccccd}' declared_type='CFGregorianDate' name='gdate'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='unitFlags'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFHash'>
<arg type='@' declared_type='CFTypeRef' name='cf'/>
<retval type='L' type64='Q' declared_type='CFHashCode'/>
</function>
<function name='CFLocaleCopyAvailableLocaleIdentifiers'>
<retval type='^{__CFArray=}' already_retained='true' declared_type='CFArrayRef'/>
</function>
<function name='CFLocaleCopyCommonISOCurrencyCodes'>
<retval type='^{__CFArray=}' already_retained='true' declared_type='CFArrayRef'/>
</function>
<function name='CFLocaleCopyCurrent'>
<retval type='^{__CFLocale=}' already_retained='true' declared_type='CFLocaleRef'/>
</function>
<function name='CFLocaleCopyDisplayNameForPropertyValue'>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='displayLocale'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='value'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFLocaleCopyISOCountryCodes'>
<retval type='^{__CFArray=}' already_retained='true' declared_type='CFArrayRef'/>
</function>
<function name='CFLocaleCopyISOCurrencyCodes'>
<retval type='^{__CFArray=}' already_retained='true' declared_type='CFArrayRef'/>
</function>
<function name='CFLocaleCopyISOLanguageCodes'>
<retval type='^{__CFArray=}' already_retained='true' declared_type='CFArrayRef'/>
</function>
<function name='CFLocaleCopyPreferredLanguages'>
<retval type='^{__CFArray=}' already_retained='true' declared_type='CFArrayRef'/>
</function>
<function name='CFLocaleCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='localeIdentifier'/>
<retval type='^{__CFLocale=}' already_retained='true' declared_type='CFLocaleRef'/>
</function>
<function name='CFLocaleCreateCanonicalLanguageIdentifierFromString'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='localeIdentifier'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='s' declared_type='LangCode' name='lcode'/>
<arg type='s' declared_type='RegionCode' name='rcode'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFLocaleCreateCanonicalLocaleIdentifierFromString'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='localeIdentifier'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFLocaleCreateComponentsFromLocaleIdentifier'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='localeID'/>
<retval type='^{__CFDictionary=}' already_retained='true' declared_type='CFDictionaryRef'/>
</function>
<function name='CFLocaleCreateCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<retval type='^{__CFLocale=}' already_retained='true' declared_type='CFLocaleRef'/>
</function>
<function name='CFLocaleCreateLocaleIdentifierFromComponents'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='dictionary'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='I' declared_type='uint32_t' name='lcid'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFLocaleGetIdentifier'>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFLocaleGetLanguageCharacterDirection'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='isoLangCode'/>
<retval type='l' type64='q' declared_type='CFLocaleLanguageDirection'/>
</function>
<function name='CFLocaleGetLanguageLineDirection'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='isoLangCode'/>
<retval type='l' type64='q' declared_type='CFLocaleLanguageDirection'/>
</function>
<function name='CFLocaleGetSystem'>
<retval type='^{__CFLocale=}' declared_type='CFLocaleRef'/>
</function>
<function name='CFLocaleGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFLocaleGetValue'>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<retval type='@' declared_type='CFTypeRef'/>
</function>
<function name='CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='localeIdentifier'/>
<retval type='I' declared_type='uint32_t'/>
</function>
<function name='CFMachPortCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg function_pointer='true' type='^?' declared_type='CFMachPortCallBack' name='callout'>
<arg type='^{__CFMachPort=}' declared_type='CFMachPortRef'/>
<arg type='^v' declared_type='void*'/>
<arg type='l' type64='q' declared_type='CFIndex'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{_CFMachPortContext=i^v^?^?^?}' type64='^{_CFMachPortContext=q^v^?^?^?}' declared_type='CFMachPortContext*' name='context'/>
<arg type='^B' declared_type='Boolean*' name='shouldFreeInfo'/>
<retval type='^{__CFMachPort=}' already_retained='true' declared_type='CFMachPortRef'/>
</function>
<function name='CFMachPortCreateRunLoopSource'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFMachPort=}' declared_type='CFMachPortRef' name='port'/>
<arg type='l' type64='q' declared_type='CFIndex' name='order'/>
<retval type='^{__CFRunLoopSource=}' already_retained='true' declared_type='CFRunLoopSourceRef'/>
</function>
<function name='CFMachPortCreateWithPort'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='I' declared_type='mach_port_t' name='portNum'/>
<arg function_pointer='true' type='^?' declared_type='CFMachPortCallBack' name='callout'>
<arg type='^{__CFMachPort=}' declared_type='CFMachPortRef'/>
<arg type='^v' declared_type='void*'/>
<arg type='l' type64='q' declared_type='CFIndex'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{_CFMachPortContext=i^v^?^?^?}' type64='^{_CFMachPortContext=q^v^?^?^?}' declared_type='CFMachPortContext*' name='context'/>
<arg type='^B' declared_type='Boolean*' name='shouldFreeInfo'/>
<retval type='^{__CFMachPort=}' already_retained='true' declared_type='CFMachPortRef'/>
</function>
<function name='CFMachPortGetContext'>
<arg type='^{__CFMachPort=}' declared_type='CFMachPortRef' name='port'/>
<arg type='^{_CFMachPortContext=i^v^?^?^?}' type64='^{_CFMachPortContext=q^v^?^?^?}' declared_type='CFMachPortContext*' name='context'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFMachPortGetInvalidationCallBack'>
<arg type='^{__CFMachPort=}' declared_type='CFMachPortRef' name='port'/>
<retval function_pointer='true' type='^?' declared_type='CFMachPortInvalidationCallBack'>
<arg type='^{__CFMachPort=}' declared_type='CFMachPortRef'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</retval>
</function>
<function name='CFMachPortGetPort'>
<arg type='^{__CFMachPort=}' declared_type='CFMachPortRef' name='port'/>
<retval type='I' declared_type='mach_port_t'/>
</function>
<function name='CFMachPortGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFMachPortInvalidate'>
<arg type='^{__CFMachPort=}' declared_type='CFMachPortRef' name='port'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFMachPortIsValid'>
<arg type='^{__CFMachPort=}' declared_type='CFMachPortRef' name='port'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFMachPortSetInvalidationCallBack'>
<arg type='^{__CFMachPort=}' declared_type='CFMachPortRef' name='port'/>
<arg function_pointer='true' type='^?' declared_type='CFMachPortInvalidationCallBack' name='callout'>
<arg type='^{__CFMachPort=}' declared_type='CFMachPortRef'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</function>
<function name='CFMakeCollectable'>
<arg type='@' declared_type='CFTypeRef' name='cf'/>
<retval type='@' declared_type='CFTypeRef'/>
</function>
<function name='CFMessagePortCreateLocal'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='name'/>
<arg function_pointer='true' type='^?' declared_type='CFMessagePortCallBack' name='callout'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef'/>
<arg type='l' type64='i' declared_type='SInt32'/>
<arg type='^{__CFData=}' declared_type='CFDataRef'/>
<arg type='^v' declared_type='void*'/>
<retval type='^{__CFData=}' declared_type='CFDataRef'/>
</arg>
<arg type='^{_CFMessagePortContext=i^v^?^?^?}' type64='^{_CFMessagePortContext=q^v^?^?^?}' declared_type='CFMessagePortContext*' name='context'/>
<arg type='^B' declared_type='Boolean*' name='shouldFreeInfo'/>
<retval type='^{__CFMessagePort=}' already_retained='true' declared_type='CFMessagePortRef'/>
</function>
<function name='CFMessagePortCreateRemote'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='name'/>
<retval type='^{__CFMessagePort=}' already_retained='true' declared_type='CFMessagePortRef'/>
</function>
<function name='CFMessagePortCreateRunLoopSource'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef' name='local'/>
<arg type='l' type64='q' declared_type='CFIndex' name='order'/>
<retval type='^{__CFRunLoopSource=}' already_retained='true' declared_type='CFRunLoopSourceRef'/>
</function>
<function name='CFMessagePortGetContext'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef' name='ms'/>
<arg type='^{_CFMessagePortContext=i^v^?^?^?}' type64='^{_CFMessagePortContext=q^v^?^?^?}' declared_type='CFMessagePortContext*' name='context'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFMessagePortGetInvalidationCallBack'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef' name='ms'/>
<retval function_pointer='true' type='^?' declared_type='CFMessagePortInvalidationCallBack'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</retval>
</function>
<function name='CFMessagePortGetName'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef' name='ms'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFMessagePortGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFMessagePortInvalidate'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef' name='ms'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFMessagePortIsRemote'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef' name='ms'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFMessagePortIsValid'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef' name='ms'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFMessagePortSendRequest'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef' name='remote'/>
<arg type='l' type64='i' declared_type='SInt32' name='msgid'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='data'/>
<arg type='d' declared_type='CFTimeInterval' name='sendTimeout'/>
<arg type='d' declared_type='CFTimeInterval' name='rcvTimeout'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='replyMode'/>
<arg type='^^{__CFData}' declared_type='CFDataRef*' name='returnData'/>
<retval type='l' type64='i' declared_type='SInt32'/>
</function>
<function name='CFMessagePortSetDispatchQueue'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef' name='ms'/>
<arg type='@' declared_type='dispatch_queue_t' name='queue'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFMessagePortSetInvalidationCallBack'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef' name='ms'/>
<arg function_pointer='true' type='^?' declared_type='CFMessagePortInvalidationCallBack' name='callout'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</function>
<function name='CFMessagePortSetName'>
<arg type='^{__CFMessagePort=}' declared_type='CFMessagePortRef' name='ms'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='newName'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFNotificationCenterAddObserver'>
<arg type='^{__CFNotificationCenter=}' declared_type='CFNotificationCenterRef' name='center'/>
<arg const='true' type='^v' declared_type='void*' name='observer'/>
<arg function_pointer='true' type='^?' declared_type='CFNotificationCallback' name='callBack'>
<arg type='^{__CFNotificationCenter=}' declared_type='CFNotificationCenterRef'/>
<arg type='^v' declared_type='void*'/>
<arg type='^{__CFString=}' declared_type='CFStringRef'/>
<arg const='true' type='^v' declared_type='void*'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='name'/>
<arg const='true' type='^v' declared_type='void*' name='object'/>
<arg type='l' type64='q' declared_type='CFNotificationSuspensionBehavior' name='suspensionBehavior'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFNotificationCenterGetDarwinNotifyCenter'>
<retval type='^{__CFNotificationCenter=}' declared_type='CFNotificationCenterRef'/>
</function>
<function name='CFNotificationCenterGetDistributedCenter'>
<retval type='^{__CFNotificationCenter=}' declared_type='CFNotificationCenterRef'/>
</function>
<function name='CFNotificationCenterGetLocalCenter'>
<retval type='^{__CFNotificationCenter=}' declared_type='CFNotificationCenterRef'/>
</function>
<function name='CFNotificationCenterGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFNotificationCenterPostNotification'>
<arg type='^{__CFNotificationCenter=}' declared_type='CFNotificationCenterRef' name='center'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='name'/>
<arg const='true' type='^v' declared_type='void*' name='object'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='userInfo'/>
<arg type='B' declared_type='Boolean' name='deliverImmediately'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFNotificationCenterPostNotificationWithOptions'>
<arg type='^{__CFNotificationCenter=}' declared_type='CFNotificationCenterRef' name='center'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='name'/>
<arg const='true' type='^v' declared_type='void*' name='object'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='userInfo'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='options'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFNotificationCenterRemoveEveryObserver'>
<arg type='^{__CFNotificationCenter=}' declared_type='CFNotificationCenterRef' name='center'/>
<arg const='true' type='^v' declared_type='void*' name='observer'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFNotificationCenterRemoveObserver'>
<arg type='^{__CFNotificationCenter=}' declared_type='CFNotificationCenterRef' name='center'/>
<arg const='true' type='^v' declared_type='void*' name='observer'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='name'/>
<arg const='true' type='^v' declared_type='void*' name='object'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFNullGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFNumberCompare'>
<arg type='^{__CFNumber=}' declared_type='CFNumberRef' name='number'/>
<arg type='^{__CFNumber=}' declared_type='CFNumberRef' name='otherNumber'/>
<arg type='^v' declared_type='void*' name='context'/>
<retval type='l' type64='q' declared_type='CFComparisonResult'/>
</function>
<function name='CFNumberCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' type64='q' declared_type='CFNumberType' name='theType'/>
<arg const='true' type='^v' declared_type='void*' name='valuePtr'/>
<retval type='^{__CFNumber=}' already_retained='true' declared_type='CFNumberRef'/>
</function>
<function name='CFNumberFormatterCopyProperty'>
<arg type='^{__CFNumberFormatter=}' declared_type='CFNumberFormatterRef' name='formatter'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<retval type='@' already_retained='true' declared_type='CFTypeRef'/>
</function>
<function name='CFNumberFormatterCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<arg type='l' type64='q' declared_type='CFNumberFormatterStyle' name='style'/>
<retval type='^{__CFNumberFormatter=}' already_retained='true' declared_type='CFNumberFormatterRef'/>
</function>
<function name='CFNumberFormatterCreateNumberFromString'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFNumberFormatter=}' declared_type='CFNumberFormatterRef' name='formatter'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='string'/>
<arg type='^{_CFRange=ii}' type64='^{_CFRange=qq}' declared_type='CFRange*' name='rangep'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='options'/>
<retval type='^{__CFNumber=}' already_retained='true' declared_type='CFNumberRef'/>
</function>
<function name='CFNumberFormatterCreateStringWithNumber'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFNumberFormatter=}' declared_type='CFNumberFormatterRef' name='formatter'/>
<arg type='^{__CFNumber=}' declared_type='CFNumberRef' name='number'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFNumberFormatterCreateStringWithValue'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFNumberFormatter=}' declared_type='CFNumberFormatterRef' name='formatter'/>
<arg type='l' type64='q' declared_type='CFNumberType' name='numberType'/>
<arg const='true' type='^v' declared_type='void*' name='valuePtr'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFNumberFormatterGetDecimalInfoForCurrencyCode'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='currencyCode'/>
<arg type='^i' declared_type='int32_t*' name='defaultFractionDigits'/>
<arg type='^d' declared_type='double*' name='roundingIncrement'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFNumberFormatterGetFormat'>
<arg type='^{__CFNumberFormatter=}' declared_type='CFNumberFormatterRef' name='formatter'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFNumberFormatterGetLocale'>
<arg type='^{__CFNumberFormatter=}' declared_type='CFNumberFormatterRef' name='formatter'/>
<retval type='^{__CFLocale=}' declared_type='CFLocaleRef'/>
</function>
<function name='CFNumberFormatterGetStyle'>
<arg type='^{__CFNumberFormatter=}' declared_type='CFNumberFormatterRef' name='formatter'/>
<retval type='l' type64='q' declared_type='CFNumberFormatterStyle'/>
</function>
<function name='CFNumberFormatterGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFNumberFormatterGetValueFromString'>
<arg type='^{__CFNumberFormatter=}' declared_type='CFNumberFormatterRef' name='formatter'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='string'/>
<arg type='^{_CFRange=ii}' type64='^{_CFRange=qq}' declared_type='CFRange*' name='rangep'/>
<arg type='l' type64='q' declared_type='CFNumberType' name='numberType'/>
<arg type='^v' declared_type='void*' name='valuePtr'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFNumberFormatterSetFormat'>
<arg type='^{__CFNumberFormatter=}' declared_type='CFNumberFormatterRef' name='formatter'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='formatString'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFNumberFormatterSetProperty'>
<arg type='^{__CFNumberFormatter=}' declared_type='CFNumberFormatterRef' name='formatter'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='@' declared_type='CFTypeRef' name='value'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFNumberGetByteSize'>
<arg type='^{__CFNumber=}' declared_type='CFNumberRef' name='number'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFNumberGetType'>
<arg type='^{__CFNumber=}' declared_type='CFNumberRef' name='number'/>
<retval type='l' type64='q' declared_type='CFNumberType'/>
</function>
<function name='CFNumberGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFNumberGetValue'>
<arg type='^{__CFNumber=}' declared_type='CFNumberRef' name='number'/>
<arg type='l' type64='q' declared_type='CFNumberType' name='theType'/>
<arg type='^v' declared_type='void*' name='valuePtr'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFNumberIsFloatType'>
<arg type='^{__CFNumber=}' declared_type='CFNumberRef' name='number'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPlugInAddInstanceForFactory'>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='factoryID'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFPlugInCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='plugInURL'/>
<retval type='^{__CFBundle=}' already_retained='true' declared_type='CFPlugInRef'/>
</function>
<function name='CFPlugInFindFactoriesForPlugInType'>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='typeUUID'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFPlugInFindFactoriesForPlugInTypeInPlugIn'>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='typeUUID'/>
<arg type='^{__CFBundle=}' declared_type='CFPlugInRef' name='plugIn'/>
<retval type='^{__CFArray=}' declared_type='CFArrayRef'/>
</function>
<function name='CFPlugInGetBundle'>
<arg type='^{__CFBundle=}' declared_type='CFPlugInRef' name='plugIn'/>
<retval type='^{__CFBundle=}' declared_type='CFBundleRef'/>
</function>
<function name='CFPlugInGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFPlugInInstanceCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='factoryUUID'/>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='typeUUID'/>
<retval type='^v' declared_type='void*'/>
</function>
<function name='CFPlugInInstanceCreateWithInstanceDataSize'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' type64='q' declared_type='CFIndex' name='instanceDataSize'/>
<arg function_pointer='true' type='^?' declared_type='CFPlugInInstanceDeallocateInstanceDataFunction' name='deallocateInstanceFunction'>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='factoryName'/>
<arg function_pointer='true' type='^?' declared_type='CFPlugInInstanceGetInterfaceFunction' name='getInterfaceFunction'>
<arg type='^{__CFPlugInInstance=}' declared_type='CFPlugInInstanceRef'/>
<arg type='^{__CFString=}' declared_type='CFStringRef'/>
<arg type='^^v' declared_type='void**'/>
<retval type='B' declared_type='Boolean'/>
</arg>
<retval type='^{__CFPlugInInstance=}' already_retained='true' declared_type='CFPlugInInstanceRef'/>
</function>
<function name='CFPlugInInstanceGetFactoryName'>
<arg type='^{__CFPlugInInstance=}' declared_type='CFPlugInInstanceRef' name='instance'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFPlugInInstanceGetInstanceData'>
<arg type='^{__CFPlugInInstance=}' declared_type='CFPlugInInstanceRef' name='instance'/>
<retval type='^v' declared_type='void*'/>
</function>
<function name='CFPlugInInstanceGetInterfaceFunctionTable'>
<arg type='^{__CFPlugInInstance=}' declared_type='CFPlugInInstanceRef' name='instance'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='interfaceName'/>
<arg type='^^v' declared_type='void**' name='ftbl'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPlugInInstanceGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFPlugInIsLoadOnDemand'>
<arg type='^{__CFBundle=}' declared_type='CFPlugInRef' name='plugIn'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPlugInRegisterFactoryFunction'>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='factoryUUID'/>
<arg function_pointer='true' type='^?' declared_type='CFPlugInFactoryFunction' name='func'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef'/>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef'/>
<retval type='^v' declared_type='void*'/>
</arg>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPlugInRegisterFactoryFunctionByName'>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='factoryUUID'/>
<arg type='^{__CFBundle=}' declared_type='CFPlugInRef' name='plugIn'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='functionName'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPlugInRegisterPlugInType'>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='factoryUUID'/>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='typeUUID'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPlugInRemoveInstanceForFactory'>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='factoryID'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFPlugInSetLoadOnDemand'>
<arg type='^{__CFBundle=}' declared_type='CFPlugInRef' name='plugIn'/>
<arg type='B' declared_type='Boolean' name='flag'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFPlugInUnregisterFactory'>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='factoryUUID'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPlugInUnregisterPlugInType'>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='factoryUUID'/>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='typeUUID'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPreferencesAddSuitePreferencesToApp'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='applicationID'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='suiteID'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFPreferencesAppSynchronize'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='applicationID'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPreferencesAppValueIsForced'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='applicationID'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPreferencesCopyAppValue'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='applicationID'/>
<retval type='@' already_retained='true' declared_type='CFPropertyListRef'/>
</function>
<function name='CFPreferencesCopyApplicationList'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='userName'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='hostName'/>
<retval type='^{__CFArray=}' already_retained='true' declared_type='CFArrayRef'/>
</function>
<function name='CFPreferencesCopyKeyList'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='applicationID'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='userName'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='hostName'/>
<retval type='^{__CFArray=}' already_retained='true' declared_type='CFArrayRef'/>
</function>
<function name='CFPreferencesCopyMultiple'>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='keysToFetch'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='applicationID'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='userName'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='hostName'/>
<retval type='^{__CFDictionary=}' already_retained='true' declared_type='CFDictionaryRef'/>
</function>
<function name='CFPreferencesCopyValue'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='applicationID'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='userName'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='hostName'/>
<retval type='@' already_retained='true' declared_type='CFPropertyListRef'/>
</function>
<function name='CFPreferencesGetAppBooleanValue'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='applicationID'/>
<arg type='^B' declared_type='Boolean*' name='keyExistsAndHasValidFormat'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPreferencesGetAppIntegerValue'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='applicationID'/>
<arg type='^B' declared_type='Boolean*' name='keyExistsAndHasValidFormat'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFPreferencesRemoveSuitePreferencesFromApp'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='applicationID'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='suiteID'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFPreferencesSetAppValue'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='@' declared_type='CFPropertyListRef' name='value'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='applicationID'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFPreferencesSetMultiple'>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='keysToSet'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='keysToRemove'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='applicationID'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='userName'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='hostName'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFPreferencesSetValue'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='@' declared_type='CFPropertyListRef' name='value'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='applicationID'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='userName'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='hostName'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFPreferencesSynchronize'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='applicationID'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='userName'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='hostName'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPropertyListCreateData'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='@' declared_type='CFPropertyListRef' name='propertyList'/>
<arg type='l' type64='q' declared_type='CFPropertyListFormat' name='format'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='options'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='^{__CFData=}' already_retained='true' declared_type='CFDataRef'/>
</function>
<function name='CFPropertyListCreateDeepCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='@' declared_type='CFPropertyListRef' name='propertyList'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='mutabilityOption'/>
<retval type='@' already_retained='true' declared_type='CFPropertyListRef'/>
</function>
<function name='CFPropertyListCreateFromStream'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<arg type='l' type64='q' declared_type='CFIndex' name='streamLength'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='mutabilityOption'/>
<arg type='^i' type64='^q' declared_type='CFPropertyListFormat*' name='format'/>
<arg type='^^{__CFString}' declared_type='CFStringRef*' name='errorString'/>
<retval type='@' already_retained='true' declared_type='CFPropertyListRef'/>
</function>
<function name='CFPropertyListCreateFromXMLData'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='xmlData'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='mutabilityOption'/>
<arg type='^^{__CFString}' declared_type='CFStringRef*' name='errorString'/>
<retval type='@' already_retained='true' declared_type='CFPropertyListRef'/>
</function>
<function name='CFPropertyListCreateWithData'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='data'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='options'/>
<arg type='^i' type64='^q' declared_type='CFPropertyListFormat*' name='format'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='@' already_retained='true' declared_type='CFPropertyListRef'/>
</function>
<function name='CFPropertyListCreateWithStream'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<arg type='l' type64='q' declared_type='CFIndex' name='streamLength'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='options'/>
<arg type='^i' type64='^q' declared_type='CFPropertyListFormat*' name='format'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='@' already_retained='true' declared_type='CFPropertyListRef'/>
</function>
<function name='CFPropertyListCreateXMLData'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='@' declared_type='CFPropertyListRef' name='propertyList'/>
<retval type='^{__CFData=}' already_retained='true' declared_type='CFDataRef'/>
</function>
<function name='CFPropertyListIsValid'>
<arg type='@' declared_type='CFPropertyListRef' name='plist'/>
<arg type='l' type64='q' declared_type='CFPropertyListFormat' name='format'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFPropertyListWrite'>
<arg type='@' declared_type='CFPropertyListRef' name='propertyList'/>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' name='stream'/>
<arg type='l' type64='q' declared_type='CFPropertyListFormat' name='format'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='options'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFPropertyListWriteToStream'>
<arg type='@' declared_type='CFPropertyListRef' name='propertyList'/>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' name='stream'/>
<arg type='l' type64='q' declared_type='CFPropertyListFormat' name='format'/>
<arg type='^^{__CFString}' declared_type='CFStringRef*' name='errorString'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function inline='true' name='CFRangeMake'>
<arg type='l' type64='q' declared_type='CFIndex' name='loc'/>
<arg type='l' type64='q' declared_type='CFIndex' name='len'/>
<retval type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange'/>
</function>
<function name='CFReadStreamClose'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFReadStreamCopyError'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<retval type='^{__CFError=}' already_retained='true' declared_type='CFErrorRef'/>
</function>
<function name='CFReadStreamCopyProperty'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='propertyName'/>
<retval type='@' already_retained='true' declared_type='CFTypeRef'/>
</function>
<function name='CFReadStreamCreateWithBytesNoCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg const='true' type='*' declared_type='UInt8*' name='bytes'/>
<arg type='l' type64='q' declared_type='CFIndex' name='length'/>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='bytesDeallocator'/>
<retval type='^{__CFReadStream=}' already_retained='true' declared_type='CFReadStreamRef'/>
</function>
<function name='CFReadStreamCreateWithFile'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='fileURL'/>
<retval type='^{__CFReadStream=}' already_retained='true' declared_type='CFReadStreamRef'/>
</function>
<function name='CFReadStreamGetBuffer'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<arg type='l' type64='q' declared_type='CFIndex' name='maxBytesToRead'/>
<arg type='^i' type64='^q' declared_type='CFIndex*' name='numBytesRead'/>
<retval const='true' type='*' declared_type='UInt8*'/>
</function>
<function name='CFReadStreamGetError'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<retval type='{_CFStreamError=ii}' type64='{_CFStreamError=qi}' declared_type='CFStreamError'/>
</function>
<function name='CFReadStreamGetStatus'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<retval type='l' type64='q' declared_type='CFStreamStatus'/>
</function>
<function name='CFReadStreamGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFReadStreamHasBytesAvailable'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFReadStreamOpen'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFReadStreamRead'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<arg type='*' declared_type='UInt8*' name='buffer'/>
<arg type='l' type64='q' declared_type='CFIndex' name='bufferLength'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFReadStreamScheduleWithRunLoop'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='runLoop'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='runLoopMode'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFReadStreamSetClient'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='streamEvents'/>
<arg function_pointer='true' type='^?' declared_type='CFReadStreamClientCallBack' name='clientCB'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef'/>
<arg type='L' type64='Q' declared_type='CFStreamEventType'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{_CFStreamClientContext=i^v^?^?^?}' type64='^{_CFStreamClientContext=q^v^?^?^?}' declared_type='CFStreamClientContext*' name='clientContext'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFReadStreamSetProperty'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='propertyName'/>
<arg type='@' declared_type='CFTypeRef' name='propertyValue'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFReadStreamUnscheduleFromRunLoop'>
<arg type='^{__CFReadStream=}' declared_type='CFReadStreamRef' name='stream'/>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='runLoop'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='runLoopMode'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRelease'>
<arg type='@' declared_type='CFTypeRef' name='cf'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRetain'>
<arg type='@' declared_type='CFTypeRef' name='cf'/>
<retval type='@' declared_type='CFTypeRef'/>
</function>
<function name='CFRunLoopAddCommonMode'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='mode'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopAddObserver'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<arg type='^{__CFRunLoopObserver=}' declared_type='CFRunLoopObserverRef' name='observer'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='mode'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopAddSource'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<arg type='^{__CFRunLoopSource=}' declared_type='CFRunLoopSourceRef' name='source'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='mode'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopAddTimer'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<arg type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef' name='timer'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='mode'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopContainsObserver'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<arg type='^{__CFRunLoopObserver=}' declared_type='CFRunLoopObserverRef' name='observer'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='mode'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFRunLoopContainsSource'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<arg type='^{__CFRunLoopSource=}' declared_type='CFRunLoopSourceRef' name='source'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='mode'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFRunLoopContainsTimer'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<arg type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef' name='timer'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='mode'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFRunLoopCopyAllModes'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<retval type='^{__CFArray=}' already_retained='true' declared_type='CFArrayRef'/>
</function>
<function name='CFRunLoopCopyCurrentMode'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFRunLoopGetCurrent'>
<retval type='^{__CFRunLoop=}' declared_type='CFRunLoopRef'/>
</function>
<function name='CFRunLoopGetMain'>
<retval type='^{__CFRunLoop=}' declared_type='CFRunLoopRef'/>
</function>
<function name='CFRunLoopGetNextTimerFireDate'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='mode'/>
<retval type='d' declared_type='CFAbsoluteTime'/>
</function>
<function name='CFRunLoopGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFRunLoopIsWaiting'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFRunLoopObserverCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='activities'/>
<arg type='B' declared_type='Boolean' name='repeats'/>
<arg type='l' type64='q' declared_type='CFIndex' name='order'/>
<arg function_pointer='true' type='^?' declared_type='CFRunLoopObserverCallBack' name='callout'>
<arg type='^{__CFRunLoopObserver=}' declared_type='CFRunLoopObserverRef'/>
<arg type='L' type64='Q' declared_type='CFRunLoopActivity'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{_CFRunLoopObserverContext=i^v^?^?^?}' type64='^{_CFRunLoopObserverContext=q^v^?^?^?}' declared_type='CFRunLoopObserverContext*' name='context'/>
<retval type='^{__CFRunLoopObserver=}' already_retained='true' declared_type='CFRunLoopObserverRef'/>
</function>
<function name='CFRunLoopObserverCreateWithHandler'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='activities'/>
<arg type='B' declared_type='Boolean' name='repeats'/>
<arg type='l' type64='q' declared_type='CFIndex' name='order'/>
<arg function_pointer='true' type='@?' declared_type='void (^)(CFRunLoopObserverRef, CFRunLoopActivity)' name='block'>
<arg type='^{__CFRunLoopObserver=}' declared_type='CFRunLoopObserverRef'/>
<arg type='L' type64='Q' declared_type='CFRunLoopActivity'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='^{__CFRunLoopObserver=}' already_retained='true' declared_type='CFRunLoopObserverRef'/>
</function>
<function name='CFRunLoopObserverDoesRepeat'>
<arg type='^{__CFRunLoopObserver=}' declared_type='CFRunLoopObserverRef' name='observer'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFRunLoopObserverGetActivities'>
<arg type='^{__CFRunLoopObserver=}' declared_type='CFRunLoopObserverRef' name='observer'/>
<retval type='L' type64='Q' declared_type='CFOptionFlags'/>
</function>
<function name='CFRunLoopObserverGetContext'>
<arg type='^{__CFRunLoopObserver=}' declared_type='CFRunLoopObserverRef' name='observer'/>
<arg type='^{_CFRunLoopObserverContext=i^v^?^?^?}' type64='^{_CFRunLoopObserverContext=q^v^?^?^?}' declared_type='CFRunLoopObserverContext*' name='context'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopObserverGetOrder'>
<arg type='^{__CFRunLoopObserver=}' declared_type='CFRunLoopObserverRef' name='observer'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFRunLoopObserverGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFRunLoopObserverInvalidate'>
<arg type='^{__CFRunLoopObserver=}' declared_type='CFRunLoopObserverRef' name='observer'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopObserverIsValid'>
<arg type='^{__CFRunLoopObserver=}' declared_type='CFRunLoopObserverRef' name='observer'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFRunLoopPerformBlock'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<arg type='@' declared_type='CFTypeRef' name='mode'/>
<arg function_pointer='true' type='@?' declared_type='void (^)(void)' name='block'>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopRemoveObserver'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<arg type='^{__CFRunLoopObserver=}' declared_type='CFRunLoopObserverRef' name='observer'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='mode'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopRemoveSource'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<arg type='^{__CFRunLoopSource=}' declared_type='CFRunLoopSourceRef' name='source'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='mode'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopRemoveTimer'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<arg type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef' name='timer'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='mode'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopRun'>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopRunInMode'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='mode'/>
<arg type='d' declared_type='CFTimeInterval' name='seconds'/>
<arg type='B' declared_type='Boolean' name='returnAfterSourceHandled'/>
<retval type='l' type64='i' declared_type='SInt32'/>
</function>
<function name='CFRunLoopSourceCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' type64='q' declared_type='CFIndex' name='order'/>
<arg type='^{_CFRunLoopSourceContext=i^v^?^?^?^?^?^?^?^?}' type64='^{_CFRunLoopSourceContext=q^v^?^?^?^?^?^?^?^?}' declared_type='CFRunLoopSourceContext*' name='context'/>
<retval type='^{__CFRunLoopSource=}' already_retained='true' declared_type='CFRunLoopSourceRef'/>
</function>
<function name='CFRunLoopSourceGetContext'>
<arg type='^{__CFRunLoopSource=}' declared_type='CFRunLoopSourceRef' name='source'/>
<arg type='^{_CFRunLoopSourceContext=i^v^?^?^?^?^?^?^?^?}' type64='^{_CFRunLoopSourceContext=q^v^?^?^?^?^?^?^?^?}' declared_type='CFRunLoopSourceContext*' name='context'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopSourceGetOrder'>
<arg type='^{__CFRunLoopSource=}' declared_type='CFRunLoopSourceRef' name='source'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFRunLoopSourceGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFRunLoopSourceInvalidate'>
<arg type='^{__CFRunLoopSource=}' declared_type='CFRunLoopSourceRef' name='source'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopSourceIsValid'>
<arg type='^{__CFRunLoopSource=}' declared_type='CFRunLoopSourceRef' name='source'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFRunLoopSourceSignal'>
<arg type='^{__CFRunLoopSource=}' declared_type='CFRunLoopSourceRef' name='source'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopStop'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopTimerCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='d' declared_type='CFAbsoluteTime' name='fireDate'/>
<arg type='d' declared_type='CFTimeInterval' name='interval'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='flags'/>
<arg type='l' type64='q' declared_type='CFIndex' name='order'/>
<arg function_pointer='true' type='^?' declared_type='CFRunLoopTimerCallBack' name='callout'>
<arg type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{_CFRunLoopTimerContext=i^v^?^?^?}' type64='^{_CFRunLoopTimerContext=q^v^?^?^?}' declared_type='CFRunLoopTimerContext*' name='context'/>
<retval type='^{__CFRunLoopTimer=}' already_retained='true' declared_type='CFRunLoopTimerRef'/>
</function>
<function name='CFRunLoopTimerCreateWithHandler'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='d' declared_type='CFAbsoluteTime' name='fireDate'/>
<arg type='d' declared_type='CFTimeInterval' name='interval'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='flags'/>
<arg type='l' type64='q' declared_type='CFIndex' name='order'/>
<arg function_pointer='true' type='@?' declared_type='void (^)(CFRunLoopTimerRef)' name='block'>
<arg type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='^{__CFRunLoopTimer=}' already_retained='true' declared_type='CFRunLoopTimerRef'/>
</function>
<function name='CFRunLoopTimerDoesRepeat'>
<arg type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef' name='timer'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFRunLoopTimerGetContext'>
<arg type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef' name='timer'/>
<arg type='^{_CFRunLoopTimerContext=i^v^?^?^?}' type64='^{_CFRunLoopTimerContext=q^v^?^?^?}' declared_type='CFRunLoopTimerContext*' name='context'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopTimerGetInterval'>
<arg type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef' name='timer'/>
<retval type='d' declared_type='CFTimeInterval'/>
</function>
<function name='CFRunLoopTimerGetNextFireDate'>
<arg type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef' name='timer'/>
<retval type='d' declared_type='CFAbsoluteTime'/>
</function>
<function name='CFRunLoopTimerGetOrder'>
<arg type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef' name='timer'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFRunLoopTimerGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFRunLoopTimerInvalidate'>
<arg type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef' name='timer'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopTimerIsValid'>
<arg type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef' name='timer'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFRunLoopTimerSetNextFireDate'>
<arg type='^{__CFRunLoopTimer=}' declared_type='CFRunLoopTimerRef' name='timer'/>
<arg type='d' declared_type='CFAbsoluteTime' name='fireDate'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFRunLoopWakeUp'>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='rl'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSetAddValue'>
<arg type='^{__CFSet=}' declared_type='CFMutableSetRef' name='theSet'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSetApplyFunction'>
<arg type='^{__CFSet=}' declared_type='CFSetRef' name='theSet'/>
<arg function_pointer='true' type='^?' declared_type='CFSetApplierFunction' name='applier'>
<arg const='true' type='^v' declared_type='void*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^v' declared_type='void*' name='context'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSetContainsValue'>
<arg type='^{__CFSet=}' declared_type='CFSetRef' name='theSet'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFSetCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg const='true' type='^^v' declared_type='void**' name='values'/>
<arg type='l' type64='q' declared_type='CFIndex' name='numValues'/>
<arg const='true' type='^{_CFSetCallBacks=i^?^?^?^?^?}' type64='^{_CFSetCallBacks=q^?^?^?^?^?}' declared_type='CFSetCallBacks*' name='callBacks'/>
<retval type='^{__CFSet=}' already_retained='true' declared_type='CFSetRef'/>
</function>
<function name='CFSetCreateCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFSet=}' declared_type='CFSetRef' name='theSet'/>
<retval type='^{__CFSet=}' already_retained='true' declared_type='CFSetRef'/>
</function>
<function name='CFSetCreateMutable'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' type64='q' declared_type='CFIndex' name='capacity'/>
<arg const='true' type='^{_CFSetCallBacks=i^?^?^?^?^?}' type64='^{_CFSetCallBacks=q^?^?^?^?^?}' declared_type='CFSetCallBacks*' name='callBacks'/>
<retval type='^{__CFSet=}' already_retained='true' declared_type='CFMutableSetRef'/>
</function>
<function name='CFSetCreateMutableCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' type64='q' declared_type='CFIndex' name='capacity'/>
<arg type='^{__CFSet=}' declared_type='CFSetRef' name='theSet'/>
<retval type='^{__CFSet=}' already_retained='true' declared_type='CFMutableSetRef'/>
</function>
<function name='CFSetGetCount'>
<arg type='^{__CFSet=}' declared_type='CFSetRef' name='theSet'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFSetGetCountOfValue'>
<arg type='^{__CFSet=}' declared_type='CFSetRef' name='theSet'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFSetGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFSetGetValue'>
<arg type='^{__CFSet=}' declared_type='CFSetRef' name='theSet'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval const='true' type='^v' declared_type='void*'/>
</function>
<function name='CFSetGetValueIfPresent'>
<arg type='^{__CFSet=}' declared_type='CFSetRef' name='theSet'/>
<arg const='true' type='^v' declared_type='void*' name='candidate'/>
<arg const='true' type='^^v' declared_type='void**' name='value'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFSetGetValues'>
<arg type='^{__CFSet=}' declared_type='CFSetRef' name='theSet'/>
<arg const='true' type='^^v' declared_type='void**' name='values'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSetRemoveAllValues'>
<arg type='^{__CFSet=}' declared_type='CFMutableSetRef' name='theSet'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSetRemoveValue'>
<arg type='^{__CFSet=}' declared_type='CFMutableSetRef' name='theSet'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSetReplaceValue'>
<arg type='^{__CFSet=}' declared_type='CFMutableSetRef' name='theSet'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSetSetValue'>
<arg type='^{__CFSet=}' declared_type='CFMutableSetRef' name='theSet'/>
<arg const='true' type='^v' declared_type='void*' name='value'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFShow'>
<arg type='@' declared_type='CFTypeRef' name='obj'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFShowStr'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='str'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSocketConnectToAddress'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef' name='s'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='address'/>
<arg type='d' declared_type='CFTimeInterval' name='timeout'/>
<retval type='l' type64='q' declared_type='CFSocketError'/>
</function>
<function name='CFSocketCopyAddress'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef' name='s'/>
<retval type='^{__CFData=}' already_retained='true' declared_type='CFDataRef'/>
</function>
<function name='CFSocketCopyPeerAddress'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef' name='s'/>
<retval type='^{__CFData=}' already_retained='true' declared_type='CFDataRef'/>
</function>
<function name='CFSocketCopyRegisteredSocketSignature'>
<arg const='true' type='^{_CFSocketSignature=iii^{__CFData}}' declared_type='CFSocketSignature*' name='nameServerSignature'/>
<arg type='d' declared_type='CFTimeInterval' name='timeout'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='name'/>
<arg type='^{_CFSocketSignature=iii^{__CFData}}' declared_type='CFSocketSignature*' name='signature'/>
<arg type='^^{__CFData}' declared_type='CFDataRef*' name='nameServerAddress'/>
<retval type='l' type64='q' declared_type='CFSocketError'/>
</function>
<function name='CFSocketCopyRegisteredValue'>
<arg const='true' type='^{_CFSocketSignature=iii^{__CFData}}' declared_type='CFSocketSignature*' name='nameServerSignature'/>
<arg type='d' declared_type='CFTimeInterval' name='timeout'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='name'/>
<arg type='^^v' declared_type='CFPropertyListRef*' name='value'/>
<arg type='^^{__CFData}' declared_type='CFDataRef*' name='nameServerAddress'/>
<retval type='l' type64='q' declared_type='CFSocketError'/>
</function>
<function name='CFSocketCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='l' type64='i' declared_type='SInt32' name='protocolFamily'/>
<arg type='l' type64='i' declared_type='SInt32' name='socketType'/>
<arg type='l' type64='i' declared_type='SInt32' name='protocol'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='callBackTypes'/>
<arg function_pointer='true' type='^?' declared_type='CFSocketCallBack' name='callout'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef'/>
<arg type='L' type64='Q' declared_type='CFSocketCallBackType'/>
<arg type='^{__CFData=}' declared_type='CFDataRef'/>
<arg const='true' type='^v' declared_type='void*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg const='true' type='^{_CFSocketContext=i^v^?^?^?}' type64='^{_CFSocketContext=q^v^?^?^?}' declared_type='CFSocketContext*' name='context'/>
<retval type='^{__CFSocket=}' already_retained='true' declared_type='CFSocketRef'/>
</function>
<function name='CFSocketCreateConnectedToSocketSignature'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg const='true' type='^{_CFSocketSignature=iii^{__CFData}}' declared_type='CFSocketSignature*' name='signature'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='callBackTypes'/>
<arg function_pointer='true' type='^?' declared_type='CFSocketCallBack' name='callout'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef'/>
<arg type='L' type64='Q' declared_type='CFSocketCallBackType'/>
<arg type='^{__CFData=}' declared_type='CFDataRef'/>
<arg const='true' type='^v' declared_type='void*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg const='true' type='^{_CFSocketContext=i^v^?^?^?}' type64='^{_CFSocketContext=q^v^?^?^?}' declared_type='CFSocketContext*' name='context'/>
<arg type='d' declared_type='CFTimeInterval' name='timeout'/>
<retval type='^{__CFSocket=}' already_retained='true' declared_type='CFSocketRef'/>
</function>
<function name='CFSocketCreateRunLoopSource'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef' name='s'/>
<arg type='l' type64='q' declared_type='CFIndex' name='order'/>
<retval type='^{__CFRunLoopSource=}' already_retained='true' declared_type='CFRunLoopSourceRef'/>
</function>
<function name='CFSocketCreateWithNative'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='i' declared_type='CFSocketNativeHandle' name='sock'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='callBackTypes'/>
<arg function_pointer='true' type='^?' declared_type='CFSocketCallBack' name='callout'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef'/>
<arg type='L' type64='Q' declared_type='CFSocketCallBackType'/>
<arg type='^{__CFData=}' declared_type='CFDataRef'/>
<arg const='true' type='^v' declared_type='void*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg const='true' type='^{_CFSocketContext=i^v^?^?^?}' type64='^{_CFSocketContext=q^v^?^?^?}' declared_type='CFSocketContext*' name='context'/>
<retval type='^{__CFSocket=}' already_retained='true' declared_type='CFSocketRef'/>
</function>
<function name='CFSocketCreateWithSocketSignature'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg const='true' type='^{_CFSocketSignature=iii^{__CFData}}' declared_type='CFSocketSignature*' name='signature'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='callBackTypes'/>
<arg function_pointer='true' type='^?' declared_type='CFSocketCallBack' name='callout'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef'/>
<arg type='L' type64='Q' declared_type='CFSocketCallBackType'/>
<arg type='^{__CFData=}' declared_type='CFDataRef'/>
<arg const='true' type='^v' declared_type='void*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg const='true' type='^{_CFSocketContext=i^v^?^?^?}' type64='^{_CFSocketContext=q^v^?^?^?}' declared_type='CFSocketContext*' name='context'/>
<retval type='^{__CFSocket=}' already_retained='true' declared_type='CFSocketRef'/>
</function>
<function name='CFSocketDisableCallBacks'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef' name='s'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='callBackTypes'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSocketEnableCallBacks'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef' name='s'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='callBackTypes'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSocketGetContext'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef' name='s'/>
<arg type='^{_CFSocketContext=i^v^?^?^?}' type64='^{_CFSocketContext=q^v^?^?^?}' declared_type='CFSocketContext*' name='context'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSocketGetDefaultNameRegistryPortNumber'>
<retval type='S' declared_type='UInt16'/>
</function>
<function name='CFSocketGetNative'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef' name='s'/>
<retval type='i' declared_type='CFSocketNativeHandle'/>
</function>
<function name='CFSocketGetSocketFlags'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef' name='s'/>
<retval type='L' type64='Q' declared_type='CFOptionFlags'/>
</function>
<function name='CFSocketGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFSocketInvalidate'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef' name='s'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSocketIsValid'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef' name='s'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFSocketRegisterSocketSignature'>
<arg const='true' type='^{_CFSocketSignature=iii^{__CFData}}' declared_type='CFSocketSignature*' name='nameServerSignature'/>
<arg type='d' declared_type='CFTimeInterval' name='timeout'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='name'/>
<arg const='true' type='^{_CFSocketSignature=iii^{__CFData}}' declared_type='CFSocketSignature*' name='signature'/>
<retval type='l' type64='q' declared_type='CFSocketError'/>
</function>
<function name='CFSocketRegisterValue'>
<arg const='true' type='^{_CFSocketSignature=iii^{__CFData}}' declared_type='CFSocketSignature*' name='nameServerSignature'/>
<arg type='d' declared_type='CFTimeInterval' name='timeout'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='name'/>
<arg type='@' declared_type='CFPropertyListRef' name='value'/>
<retval type='l' type64='q' declared_type='CFSocketError'/>
</function>
<function name='CFSocketSendData'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef' name='s'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='address'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='data'/>
<arg type='d' declared_type='CFTimeInterval' name='timeout'/>
<retval type='l' type64='q' declared_type='CFSocketError'/>
</function>
<function name='CFSocketSetAddress'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef' name='s'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='address'/>
<retval type='l' type64='q' declared_type='CFSocketError'/>
</function>
<function name='CFSocketSetDefaultNameRegistryPortNumber'>
<arg type='S' declared_type='UInt16' name='port'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSocketSetSocketFlags'>
<arg type='^{__CFSocket=}' declared_type='CFSocketRef' name='s'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='flags'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFSocketUnregister'>
<arg const='true' type='^{_CFSocketSignature=iii^{__CFData}}' declared_type='CFSocketSignature*' name='nameServerSignature'/>
<arg type='d' declared_type='CFTimeInterval' name='timeout'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='name'/>
<retval type='l' type64='q' declared_type='CFSocketError'/>
</function>
<function name='CFStreamCreateBoundPair'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^^{__CFReadStream}' declared_type='CFReadStreamRef*' name='readStream'/>
<arg type='^^{__CFWriteStream}' declared_type='CFWriteStreamRef*' name='writeStream'/>
<arg type='l' type64='q' declared_type='CFIndex' name='transferBufferSize'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStreamCreatePairWithPeerSocketSignature'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg const='true' type='^{_CFSocketSignature=iii^{__CFData}}' declared_type='CFSocketSignature*' name='signature'/>
<arg type='^^{__CFReadStream}' declared_type='CFReadStreamRef*' name='readStream'/>
<arg type='^^{__CFWriteStream}' declared_type='CFWriteStreamRef*' name='writeStream'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStreamCreatePairWithSocket'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='i' declared_type='CFSocketNativeHandle' name='sock'/>
<arg type='^^{__CFReadStream}' declared_type='CFReadStreamRef*' name='readStream'/>
<arg type='^^{__CFWriteStream}' declared_type='CFWriteStreamRef*' name='writeStream'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStreamCreatePairWithSocketToHost'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='host'/>
<arg type='L' type64='I' declared_type='UInt32' name='port'/>
<arg type='^^{__CFReadStream}' declared_type='CFReadStreamRef*' name='readStream'/>
<arg type='^^{__CFWriteStream}' declared_type='CFWriteStreamRef*' name='writeStream'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringAppend'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='appendedString'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringAppendCString'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg const='true' type='*' declared_type='char*' name='cStr'/>
<arg type='L' type64='I' declared_type='CFStringEncoding' name='encoding'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringAppendCharacters'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg const='true' type='^S' declared_type='UniChar*' name='chars'/>
<arg type='l' type64='q' declared_type='CFIndex' name='numChars'/>
<retval type='v' declared_type='void'/>
</function>
<function variadic='true' name='CFStringAppendFormat'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='formatOptions'/>
<arg type='^{__CFString=}' printf_format='true' declared_type='CFStringRef' name='format'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringAppendFormatAndArguments'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='formatOptions'/>
<arg type='^{__CFString=}' printf_format='true' declared_type='CFStringRef' name='format'/>
<arg type='*' declared_type64='__va_list_tag*' type64='^{__va_list_tag=II^v^v}' declared_type='va_list' name='arguments'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringAppendPascalString'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='*' declared_type='ConstStr255Param' name='pStr'/>
<arg type='L' type64='I' declared_type='CFStringEncoding' name='encoding'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringCapitalize'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringCompare'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString1'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString2'/>
<arg type='L' type64='Q' declared_type='CFStringCompareFlags' name='compareOptions'/>
<retval type='l' type64='q' declared_type='CFComparisonResult'/>
</function>
<function name='CFStringCompareWithOptions'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString1'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString2'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='rangeToCompare'/>
<arg type='L' type64='Q' declared_type='CFStringCompareFlags' name='compareOptions'/>
<retval type='l' type64='q' declared_type='CFComparisonResult'/>
</function>
<function name='CFStringCompareWithOptionsAndLocale'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString1'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString2'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='rangeToCompare'/>
<arg type='L' type64='Q' declared_type='CFStringCompareFlags' name='compareOptions'/>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<retval type='l' type64='q' declared_type='CFComparisonResult'/>
</function>
<function name='CFStringConvertEncodingToIANACharSetName'>
<arg type='L' type64='I' declared_type='CFStringEncoding' name='encoding'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFStringConvertEncodingToNSStringEncoding'>
<arg type='L' type64='I' declared_type='CFStringEncoding' name='encoding'/>
<retval type='L' type64='Q' declared_type='unsigned long'/>
</function>
<function name='CFStringConvertEncodingToWindowsCodepage'>
<arg type='L' type64='I' declared_type='CFStringEncoding' name='encoding'/>
<retval type='L' type64='I' declared_type='UInt32'/>
</function>
<function name='CFStringConvertIANACharSetNameToEncoding'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<retval type='L' type64='I' declared_type='CFStringEncoding'/>
</function>
<function name='CFStringConvertNSStringEncodingToEncoding'>
<arg type='L' type64='Q' declared_type='unsigned long' name='encoding'/>
<retval type='L' type64='I' declared_type='CFStringEncoding'/>
</function>
<function name='CFStringConvertWindowsCodepageToEncoding'>
<arg type='L' type64='I' declared_type='UInt32' name='codepage'/>
<retval type='L' type64='I' declared_type='CFStringEncoding'/>
</function>
<function name='CFStringCreateArrayBySeparatingStrings'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='separatorString'/>
<retval type='^{__CFArray=}' already_retained='true' declared_type='CFArrayRef'/>
</function>
<function name='CFStringCreateArrayWithFindResults'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='stringToFind'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='rangeToSearch'/>
<arg type='L' type64='Q' declared_type='CFStringCompareFlags' name='compareOptions'/>
<retval type='^{__CFArray=}' already_retained='true' declared_type='CFArrayRef'/>
</function>
<function name='CFStringCreateByCombiningStrings'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='theArray'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='separatorString'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFStringCreateCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFStringCreateExternalRepresentation'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='L' type64='I' declared_type='CFStringEncoding' name='encoding'/>
<arg type='C' declared_type='UInt8' name='lossByte'/>
<retval type='^{__CFData=}' already_retained='true' declared_type='CFDataRef'/>
</function>
<function name='CFStringCreateFromExternalRepresentation'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='data'/>
<arg type='L' type64='I' declared_type='CFStringEncoding' name='encoding'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFStringCreateMutable'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='l' type64='q' declared_type='CFIndex' name='maxLength'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFMutableStringRef'/>
</function>
<function name='CFStringCreateMutableCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='l' type64='q' declared_type='CFIndex' name='maxLength'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFMutableStringRef'/>
</function>
<function name='CFStringCreateMutableWithExternalCharactersNoCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^S' declared_type='UniChar*' name='chars'/>
<arg type='l' type64='q' declared_type='CFIndex' name='numChars'/>
<arg type='l' type64='q' declared_type='CFIndex' name='capacity'/>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='externalCharactersAllocator'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFMutableStringRef'/>
</function>
<function name='CFStringCreateWithBytes'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg const='true' type='*' declared_type='UInt8*' name='bytes'/>
<arg type='l' type64='q' declared_type='CFIndex' name='numBytes'/>
<arg type='L' type64='I' declared_type='CFStringEncoding' name='encoding'/>
<arg type='B' declared_type='Boolean' name='isExternalRepresentation'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFStringCreateWithBytesNoCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg const='true' type='*' declared_type='UInt8*' name='bytes'/>
<arg type='l' type64='q' declared_type='CFIndex' name='numBytes'/>
<arg type='L' type64='I' declared_type='CFStringEncoding' name='encoding'/>
<arg type='B' declared_type='Boolean' name='isExternalRepresentation'/>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='contentsDeallocator'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFStringCreateWithCString'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg const='true' type='*' declared_type='char*' name='cStr'/>
<arg type='L' type64='I' declared_type='CFStringEncoding' name='encoding'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFStringCreateWithCStringNoCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg const='true' type='*' declared_type='char*' name='cStr'/>
<arg type='L' type64='I' declared_type='CFStringEncoding' name='encoding'/>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='contentsDeallocator'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFStringCreateWithCharacters'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg const='true' type='^S' declared_type='UniChar*' name='chars'/>
<arg type='l' type64='q' declared_type='CFIndex' name='numChars'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFStringCreateWithCharactersNoCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg const='true' type='^S' declared_type='UniChar*' name='chars'/>
<arg type='l' type64='q' declared_type='CFIndex' name='numChars'/>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='contentsDeallocator'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFStringCreateWithFileSystemRepresentation'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg const='true' type='*' declared_type='char*' name='buffer'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function variadic='true' name='CFStringCreateWithFormat'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='formatOptions'/>
<arg type='^{__CFString=}' printf_format='true' declared_type='CFStringRef' name='format'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFStringCreateWithFormatAndArguments'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='formatOptions'/>
<arg type='^{__CFString=}' printf_format='true' declared_type='CFStringRef' name='format'/>
<arg type='*' declared_type64='__va_list_tag*' type64='^{__va_list_tag=II^v^v}' declared_type='va_list' name='arguments'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFStringCreateWithPascalString'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='*' declared_type='ConstStr255Param' name='pStr'/>
<arg type='L' type64='I' declared_type='CFStringEncoding' name='encoding'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFStringCreateWithPascalStringNoCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='*' declared_type='ConstStr255Param' name='pStr'/>
<arg type='L' type64='I' declared_type='CFStringEncoding' name='encoding'/>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='contentsDeallocator'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFStringCreateWithSubstring'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='str'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFStringDelete'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringFind'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='stringToFind'/>
<arg type='L' type64='Q' declared_type='CFStringCompareFlags' name='compareOptions'/>
<retval type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange'/>
</function>
<function name='CFStringFindAndReplace'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='stringToFind'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='replacementString'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='rangeToSearch'/>
<arg type='L' type64='Q' declared_type='CFStringCompareFlags' name='compareOptions'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFStringFindCharacterFromSet'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='^{__CFCharacterSet=}' declared_type='CFCharacterSetRef' name='theSet'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='rangeToSearch'/>
<arg type='L' type64='Q' declared_type='CFStringCompareFlags' name='searchOptions'/>
<arg type='^{_CFRange=ii}' type64='^{_CFRange=qq}' declared_type='CFRange*' name='result'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringFindWithOptions'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='stringToFind'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='rangeToSearch'/>
<arg type='L' type64='Q' declared_type='CFStringCompareFlags' name='searchOptions'/>
<arg type='^{_CFRange=ii}' type64='^{_CFRange=qq}' declared_type='CFRange*' name='result'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringFindWithOptionsAndLocale'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='stringToFind'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='rangeToSearch'/>
<arg type='L' type64='Q' declared_type='CFStringCompareFlags' name='searchOptions'/>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<arg type='^{_CFRange=ii}' type64='^{_CFRange=qq}' declared_type='CFRange*' name='result'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringFold'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='theFlags'/>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='theLocale'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringGetBytes'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<arg type='L' type64='I' declared_type='CFStringEncoding' name='encoding'/>
<arg type='C' declared_type='UInt8' name='lossByte'/>
<arg type='B' declared_type='Boolean' name='isExternalRepresentation'/>
<arg type='*' declared_type='UInt8*' name='buffer'/>
<arg type='l' type64='q' declared_type='CFIndex' name='maxBufLen'/>
<arg type='^i' type64='^q' declared_type='CFIndex*' name='usedBufLen'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFStringGetCString'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='*' declared_type='char*' name='buffer'/>
<arg type='l' type64='q' declared_type='CFIndex' name='bufferSize'/>
<arg type='L' type64='I' declared_type='CFStringEncoding' name='encoding'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringGetCStringPtr'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='L' type64='I' declared_type='CFStringEncoding' name='encoding'/>
<retval const='true' type='*' declared_type='char*'/>
</function>
<function name='CFStringGetCharacterAtIndex'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='l' type64='q' declared_type='CFIndex' name='idx'/>
<retval type='S' declared_type='UniChar'/>
</function>
<function inline='true' name='CFStringGetCharacterFromInlineBuffer'>
<arg type='^{_CFStringInlineBuffer=[64S]^{__CFString}^S{_CFRange=ii}ii}' type64='^{_CFStringInlineBuffer=[64S]^{__CFString}^S{_CFRange=qq}qq}' declared_type='CFStringInlineBuffer*' name='buf'/>
<arg type='l' type64='q' declared_type='CFIndex' name='idx'/>
<retval type='S' declared_type='UniChar'/>
</function>
<function name='CFStringGetCharacters'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<arg type='^S' declared_type='UniChar*' name='buffer'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringGetCharactersPtr'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<retval const='true' type='^S' declared_type='UniChar*'/>
</function>
<function name='CFStringGetDoubleValue'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='str'/>
<retval type='d' declared_type='double'/>
</function>
<function name='CFStringGetFastestEncoding'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<retval type='L' type64='I' declared_type='CFStringEncoding'/>
</function>
<function name='CFStringGetFileSystemRepresentation'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='string'/>
<arg type='*' declared_type='char*' name='buffer'/>
<arg type='l' type64='q' declared_type='CFIndex' name='maxBufLen'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringGetHyphenationLocationBeforeIndex'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='string'/>
<arg type='l' type64='q' declared_type='CFIndex' name='location'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='limitRange'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='options'/>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<arg type='^I' declared_type='UTF32Char*' name='character'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFStringGetIntValue'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='str'/>
<retval type='l' type64='i' declared_type='SInt32'/>
</function>
<function name='CFStringGetLength'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFStringGetLineBounds'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<arg type='^i' type64='^q' declared_type='CFIndex*' name='lineBeginIndex'/>
<arg type='^i' type64='^q' declared_type='CFIndex*' name='lineEndIndex'/>
<arg type='^i' type64='^q' declared_type='CFIndex*' name='contentsEndIndex'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringGetListOfAvailableEncodings'>
<retval const='true' type='^I' declared_type='CFStringEncoding*'/>
</function>
<function inline='true' name='CFStringGetLongCharacterForSurrogatePair'>
<arg type='S' declared_type='UniChar' name='surrogateHigh'/>
<arg type='S' declared_type='UniChar' name='surrogateLow'/>
<retval type='L' type64='I' declared_type='UTF32Char'/>
</function>
<function name='CFStringGetMaximumSizeForEncoding'>
<arg type='l' type64='q' declared_type='CFIndex' name='length'/>
<arg type='L' type64='I' declared_type='CFStringEncoding' name='encoding'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFStringGetMaximumSizeOfFileSystemRepresentation'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='string'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFStringGetMostCompatibleMacStringEncoding'>
<arg type='L' type64='I' declared_type='CFStringEncoding' name='encoding'/>
<retval type='L' type64='I' declared_type='CFStringEncoding'/>
</function>
<function name='CFStringGetNameOfEncoding'>
<arg type='L' type64='I' declared_type='CFStringEncoding' name='encoding'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFStringGetParagraphBounds'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='string'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<arg type='^i' type64='^q' declared_type='CFIndex*' name='parBeginIndex'/>
<arg type='^i' type64='^q' declared_type='CFIndex*' name='parEndIndex'/>
<arg type='^i' type64='^q' declared_type='CFIndex*' name='contentsEndIndex'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringGetPascalString'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='*' declared_type='StringPtr' name='buffer'/>
<arg type='l' type64='q' declared_type='CFIndex' name='bufferSize'/>
<arg type='L' type64='I' declared_type='CFStringEncoding' name='encoding'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringGetPascalStringPtr'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='L' type64='I' declared_type='CFStringEncoding' name='encoding'/>
<retval type='*' declared_type='ConstStringPtr'/>
</function>
<function name='CFStringGetRangeOfComposedCharactersAtIndex'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='l' type64='q' declared_type='CFIndex' name='theIndex'/>
<retval type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange'/>
</function>
<function name='CFStringGetSmallestEncoding'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<retval type='L' type64='I' declared_type='CFStringEncoding'/>
</function>
<function inline='true' name='CFStringGetSurrogatePairForLongCharacter'>
<arg type='L' type64='I' declared_type='UTF32Char' name='character'/>
<arg type='^S' declared_type='UniChar*' name='surrogates'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringGetSystemEncoding'>
<retval type='L' type64='I' declared_type='CFStringEncoding'/>
</function>
<function name='CFStringGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFStringHasPrefix'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='prefix'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringHasSuffix'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='theString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='suffix'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function inline='true' name='CFStringInitInlineBuffer'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='str'/>
<arg type='^{_CFStringInlineBuffer=[64S]^{__CFString}^S{_CFRange=ii}ii}' type64='^{_CFStringInlineBuffer=[64S]^{__CFString}^S{_CFRange=qq}qq}' declared_type='CFStringInlineBuffer*' name='buf'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringInsert'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='str'/>
<arg type='l' type64='q' declared_type='CFIndex' name='idx'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='insertedStr'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringIsEncodingAvailable'>
<arg type='L' type64='I' declared_type='CFStringEncoding' name='encoding'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringIsHyphenationAvailableForLocale'>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function inline='true' name='CFStringIsSurrogateHighCharacter'>
<arg type='S' declared_type='UniChar' name='character'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function inline='true' name='CFStringIsSurrogateLowCharacter'>
<arg type='S' declared_type='UniChar' name='character'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringLowercase'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringNormalize'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='l' type64='q' declared_type='CFStringNormalizationForm' name='theForm'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringPad'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='padString'/>
<arg type='l' type64='q' declared_type='CFIndex' name='length'/>
<arg type='l' type64='q' declared_type='CFIndex' name='indexIntoPad'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringReplace'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='replacement'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringReplaceAll'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='replacement'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringSetExternalCharactersNoCopy'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='^S' declared_type='UniChar*' name='chars'/>
<arg type='l' type64='q' declared_type='CFIndex' name='length'/>
<arg type='l' type64='q' declared_type='CFIndex' name='capacity'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringTokenizerAdvanceToNextToken'>
<arg type='^{__CFStringTokenizer=}' declared_type='CFStringTokenizerRef' name='tokenizer'/>
<retval type='L' type64='Q' declared_type='CFStringTokenizerTokenType'/>
</function>
<function name='CFStringTokenizerCopyBestStringLanguage'>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='string'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFStringTokenizerCopyCurrentTokenAttribute'>
<arg type='^{__CFStringTokenizer=}' declared_type='CFStringTokenizerRef' name='tokenizer'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='attribute'/>
<retval type='@' already_retained='true' declared_type='CFTypeRef'/>
</function>
<function name='CFStringTokenizerCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='string'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='options'/>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<retval type='^{__CFStringTokenizer=}' already_retained='true' declared_type='CFStringTokenizerRef'/>
</function>
<function name='CFStringTokenizerGetCurrentSubTokens'>
<arg type='^{__CFStringTokenizer=}' declared_type='CFStringTokenizerRef' name='tokenizer'/>
<arg type='^{_CFRange=ii}' type64='^{_CFRange=qq}' declared_type='CFRange*' name='ranges'/>
<arg type='l' type64='q' declared_type='CFIndex' name='maxRangeLength'/>
<arg type='^{__CFArray=}' declared_type='CFMutableArrayRef' name='derivedSubTokens'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFStringTokenizerGetCurrentTokenRange'>
<arg type='^{__CFStringTokenizer=}' declared_type='CFStringTokenizerRef' name='tokenizer'/>
<retval type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange'/>
</function>
<function name='CFStringTokenizerGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFStringTokenizerGoToTokenAtIndex'>
<arg type='^{__CFStringTokenizer=}' declared_type='CFStringTokenizerRef' name='tokenizer'/>
<arg type='l' type64='q' declared_type='CFIndex' name='index'/>
<retval type='L' type64='Q' declared_type='CFStringTokenizerTokenType'/>
</function>
<function name='CFStringTokenizerSetString'>
<arg type='^{__CFStringTokenizer=}' declared_type='CFStringTokenizerRef' name='tokenizer'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='string'/>
<arg type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange' name='range'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringTransform'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='string'/>
<arg type='^{_CFRange=ii}' type64='^{_CFRange=qq}' declared_type='CFRange*' name='range'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='transform'/>
<arg type='B' declared_type='Boolean' name='reverse'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFStringTrim'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='trimString'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringTrimWhitespace'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFStringUppercase'>
<arg type='^{__CFString=}' declared_type='CFMutableStringRef' name='theString'/>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<retval type='v' declared_type='void'/>
</function>
<function inline='true' name='CFSwapInt16'>
<arg type='S' declared_type='uint16_t' name='arg'/>
<retval type='S' declared_type='uint16_t'/>
</function>
<function inline='true' name='CFSwapInt16BigToHost'>
<arg type='S' declared_type='uint16_t' name='arg'/>
<retval type='S' declared_type='uint16_t'/>
</function>
<function inline='true' name='CFSwapInt16HostToBig'>
<arg type='S' declared_type='uint16_t' name='arg'/>
<retval type='S' declared_type='uint16_t'/>
</function>
<function inline='true' name='CFSwapInt16HostToLittle'>
<arg type='S' declared_type='uint16_t' name='arg'/>
<retval type='S' declared_type='uint16_t'/>
</function>
<function inline='true' name='CFSwapInt16LittleToHost'>
<arg type='S' declared_type='uint16_t' name='arg'/>
<retval type='S' declared_type='uint16_t'/>
</function>
<function inline='true' name='CFSwapInt32'>
<arg type='I' declared_type='uint32_t' name='arg'/>
<retval type='I' declared_type='uint32_t'/>
</function>
<function inline='true' name='CFSwapInt32BigToHost'>
<arg type='I' declared_type='uint32_t' name='arg'/>
<retval type='I' declared_type='uint32_t'/>
</function>
<function inline='true' name='CFSwapInt32HostToBig'>
<arg type='I' declared_type='uint32_t' name='arg'/>
<retval type='I' declared_type='uint32_t'/>
</function>
<function inline='true' name='CFSwapInt32HostToLittle'>
<arg type='I' declared_type='uint32_t' name='arg'/>
<retval type='I' declared_type='uint32_t'/>
</function>
<function inline='true' name='CFSwapInt32LittleToHost'>
<arg type='I' declared_type='uint32_t' name='arg'/>
<retval type='I' declared_type='uint32_t'/>
</function>
<function inline='true' name='CFSwapInt64'>
<arg type='Q' declared_type='uint64_t' name='arg'/>
<retval type='Q' declared_type='uint64_t'/>
</function>
<function inline='true' name='CFSwapInt64BigToHost'>
<arg type='Q' declared_type='uint64_t' name='arg'/>
<retval type='Q' declared_type='uint64_t'/>
</function>
<function inline='true' name='CFSwapInt64HostToBig'>
<arg type='Q' declared_type='uint64_t' name='arg'/>
<retval type='Q' declared_type='uint64_t'/>
</function>
<function inline='true' name='CFSwapInt64HostToLittle'>
<arg type='Q' declared_type='uint64_t' name='arg'/>
<retval type='Q' declared_type='uint64_t'/>
</function>
<function inline='true' name='CFSwapInt64LittleToHost'>
<arg type='Q' declared_type='uint64_t' name='arg'/>
<retval type='Q' declared_type='uint64_t'/>
</function>
<function name='CFTimeZoneCopyAbbreviation'>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFTimeZoneCopyAbbreviationDictionary'>
<retval type='^{__CFDictionary=}' already_retained='true' declared_type='CFDictionaryRef'/>
</function>
<function name='CFTimeZoneCopyDefault'>
<retval type='^{__CFTimeZone=}' already_retained='true' declared_type='CFTimeZoneRef'/>
</function>
<function name='CFTimeZoneCopyKnownNames'>
<retval type='^{__CFArray=}' already_retained='true' declared_type='CFArrayRef'/>
</function>
<function name='CFTimeZoneCopyLocalizedName'>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<arg type='l' type64='q' declared_type='CFTimeZoneNameStyle' name='style'/>
<arg type='^{__CFLocale=}' declared_type='CFLocaleRef' name='locale'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFTimeZoneCopySystem'>
<retval type='^{__CFTimeZone=}' already_retained='true' declared_type='CFTimeZoneRef'/>
</function>
<function name='CFTimeZoneCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='name'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='data'/>
<retval type='^{__CFTimeZone=}' already_retained='true' declared_type='CFTimeZoneRef'/>
</function>
<function name='CFTimeZoneCreateWithName'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='name'/>
<arg type='B' declared_type='Boolean' name='tryAbbrev'/>
<retval type='^{__CFTimeZone=}' already_retained='true' declared_type='CFTimeZoneRef'/>
</function>
<function name='CFTimeZoneCreateWithTimeIntervalFromGMT'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='d' declared_type='CFTimeInterval' name='ti'/>
<retval type='^{__CFTimeZone=}' already_retained='true' declared_type='CFTimeZoneRef'/>
</function>
<function name='CFTimeZoneGetData'>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<retval type='^{__CFData=}' declared_type='CFDataRef'/>
</function>
<function name='CFTimeZoneGetDaylightSavingTimeOffset'>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<retval type='d' declared_type='CFTimeInterval'/>
</function>
<function name='CFTimeZoneGetName'>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFTimeZoneGetNextDaylightSavingTimeTransition'>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<retval type='d' declared_type='CFAbsoluteTime'/>
</function>
<function name='CFTimeZoneGetSecondsFromGMT'>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<retval type='d' declared_type='CFTimeInterval'/>
</function>
<function name='CFTimeZoneGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFTimeZoneIsDaylightSavingTime'>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<arg type='d' declared_type='CFAbsoluteTime' name='at'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFTimeZoneResetSystem'>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTimeZoneSetAbbreviationDictionary'>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='dict'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTimeZoneSetDefault'>
<arg type='^{__CFTimeZone=}' declared_type='CFTimeZoneRef' name='tz'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreeAppendChild'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='newChild'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreeApplyFunctionToChildren'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<arg function_pointer='true' type='^?' declared_type='CFTreeApplierFunction' name='applier'>
<arg const='true' type='^v' declared_type='void*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^v' declared_type='void*' name='context'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreeCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg const='true' type='^{_CFTreeContext=i^v^?^?^?}' type64='^{_CFTreeContext=q^v^?^?^?}' declared_type='CFTreeContext*' name='context'/>
<retval type='^{__CFTree=}' already_retained='true' declared_type='CFTreeRef'/>
</function>
<function name='CFTreeFindRoot'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<retval type='^{__CFTree=}' declared_type='CFTreeRef'/>
</function>
<function name='CFTreeGetChildAtIndex'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<arg type='l' type64='q' declared_type='CFIndex' name='idx'/>
<retval type='^{__CFTree=}' declared_type='CFTreeRef'/>
</function>
<function name='CFTreeGetChildCount'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFTreeGetChildren'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<arg type='^^{__CFTree}' declared_type='CFTreeRef*' name='children'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreeGetContext'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<arg type='^{_CFTreeContext=i^v^?^?^?}' type64='^{_CFTreeContext=q^v^?^?^?}' declared_type='CFTreeContext*' name='context'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreeGetFirstChild'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<retval type='^{__CFTree=}' declared_type='CFTreeRef'/>
</function>
<function name='CFTreeGetNextSibling'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<retval type='^{__CFTree=}' declared_type='CFTreeRef'/>
</function>
<function name='CFTreeGetParent'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<retval type='^{__CFTree=}' declared_type='CFTreeRef'/>
</function>
<function name='CFTreeGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFTreeInsertSibling'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='newSibling'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreePrependChild'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='newChild'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreeRemove'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreeRemoveAllChildren'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreeSetContext'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<arg const='true' type='^{_CFTreeContext=i^v^?^?^?}' type64='^{_CFTreeContext=q^v^?^?^?}' declared_type='CFTreeContext*' name='context'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFTreeSortChildren'>
<arg type='^{__CFTree=}' declared_type='CFTreeRef' name='tree'/>
<arg function_pointer='true' type='^?' declared_type='CFComparatorFunction' name='comparator'>
<arg const='true' type='^v' declared_type='void*'/>
<arg const='true' type='^v' declared_type='void*'/>
<arg type='^v' declared_type='void*'/>
<retval type='l' type64='q' declared_type='CFComparisonResult'/>
</arg>
<arg type='^v' declared_type='void*' name='context'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFURLCanBeDecomposed'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLClearResourcePropertyCache'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFURLClearResourcePropertyCacheForKey'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFURLCopyAbsoluteURL'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='relativeURL'/>
<retval type='^{__CFURL=}' already_retained='true' declared_type='CFURLRef'/>
</function>
<function name='CFURLCopyFileSystemPath'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<arg type='l' type64='q' declared_type='CFURLPathStyle' name='pathStyle'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFURLCopyFragment'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='charactersToLeaveEscaped'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFURLCopyHostName'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFURLCopyLastPathComponent'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFURLCopyNetLocation'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFURLCopyParameterString'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='charactersToLeaveEscaped'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFURLCopyPassword'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFURLCopyPath'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFURLCopyPathExtension'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFURLCopyQueryString'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='charactersToLeaveEscaped'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFURLCopyResourcePropertiesForKeys'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='keys'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='^{__CFDictionary=}' already_retained='true' declared_type='CFDictionaryRef'/>
</function>
<function name='CFURLCopyResourcePropertyForKey'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='^v' declared_type='void*' name='propertyValueTypeRefPtr'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLCopyResourceSpecifier'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFURLCopyScheme'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFURLCopyStrictPath'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<arg type='^B' declared_type='Boolean*' name='isAbsolute'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFURLCopyUserName'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFURLCreateAbsoluteURLWithBytes'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg const='true' type='*' declared_type='UInt8*' name='relativeURLBytes'/>
<arg type='l' type64='q' declared_type='CFIndex' name='length'/>
<arg type='L' type64='I' declared_type='CFStringEncoding' name='encoding'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='baseURL'/>
<arg type='B' declared_type='Boolean' name='useCompatibilityMode'/>
<retval type='^{__CFURL=}' already_retained='true' declared_type='CFURLRef'/>
</function>
<function name='CFURLCreateBookmarkData'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='L' type64='Q' declared_type='CFURLBookmarkCreationOptions' name='options'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='resourcePropertiesToInclude'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='relativeToURL'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='^{__CFData=}' already_retained='true' declared_type='CFDataRef'/>
</function>
<function name='CFURLCreateBookmarkDataFromAliasRecord'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocatorRef'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='aliasRecordDataRef'/>
<retval type='^{__CFData=}' already_retained='true' declared_type='CFDataRef'/>
</function>
<function name='CFURLCreateBookmarkDataFromFile'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='fileURL'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='errorRef'/>
<retval type='^{__CFData=}' already_retained='true' declared_type='CFDataRef'/>
</function>
<function name='CFURLCreateByResolvingBookmarkData'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='bookmark'/>
<arg type='L' type64='Q' declared_type='CFURLBookmarkResolutionOptions' name='options'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='relativeToURL'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='resourcePropertiesToInclude'/>
<arg type='^B' declared_type='Boolean*' name='isStale'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='^{__CFURL=}' already_retained='true' declared_type='CFURLRef'/>
</function>
<function name='CFURLCreateCopyAppendingPathComponent'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='pathComponent'/>
<arg type='B' declared_type='Boolean' name='isDirectory'/>
<retval type='^{__CFURL=}' already_retained='true' declared_type='CFURLRef'/>
</function>
<function name='CFURLCreateCopyAppendingPathExtension'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='extension'/>
<retval type='^{__CFURL=}' already_retained='true' declared_type='CFURLRef'/>
</function>
<function name='CFURLCreateCopyDeletingLastPathComponent'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<retval type='^{__CFURL=}' already_retained='true' declared_type='CFURLRef'/>
</function>
<function name='CFURLCreateCopyDeletingPathExtension'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<retval type='^{__CFURL=}' already_retained='true' declared_type='CFURLRef'/>
</function>
<function name='CFURLCreateData'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='L' type64='I' declared_type='CFStringEncoding' name='encoding'/>
<arg type='B' declared_type='Boolean' name='escapeWhitespace'/>
<retval type='^{__CFData=}' already_retained='true' declared_type='CFDataRef'/>
</function>
<function name='CFURLCreateDataAndPropertiesFromResource'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^^{__CFData}' declared_type='CFDataRef*' name='resourceData'/>
<arg type='^^{__CFDictionary}' declared_type='CFDictionaryRef*' name='properties'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='desiredProperties'/>
<arg type='^i' declared_type='SInt32*' name='errorCode'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLCreateFilePathURL'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='^{__CFURL=}' already_retained='true' declared_type='CFURLRef'/>
</function>
<function name='CFURLCreateFileReferenceURL'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='^{__CFURL=}' already_retained='true' declared_type='CFURLRef'/>
</function>
<function name='CFURLCreateFromFSRef'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg const='true' type='^{FSRef=[80C]}' declared_type='struct FSRef*' name='fsRef'/>
<retval type='^{__CFURL=}' already_retained='true' declared_type='CFURLRef'/>
</function>
<function name='CFURLCreateFromFileSystemRepresentation'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg const='true' type='*' declared_type='UInt8*' name='buffer'/>
<arg type='l' type64='q' declared_type='CFIndex' name='bufLen'/>
<arg type='B' declared_type='Boolean' name='isDirectory'/>
<retval type='^{__CFURL=}' already_retained='true' declared_type='CFURLRef'/>
</function>
<function name='CFURLCreateFromFileSystemRepresentationRelativeToBase'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg const='true' type='*' declared_type='UInt8*' name='buffer'/>
<arg type='l' type64='q' declared_type='CFIndex' name='bufLen'/>
<arg type='B' declared_type='Boolean' name='isDirectory'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='baseURL'/>
<retval type='^{__CFURL=}' already_retained='true' declared_type='CFURLRef'/>
</function>
<function name='CFURLCreatePropertyFromResource'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='property'/>
<arg type='^i' declared_type='SInt32*' name='errorCode'/>
<retval type='@' already_retained='true' declared_type='CFTypeRef'/>
</function>
<function name='CFURLCreateResourcePropertiesForKeysFromBookmarkData'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='resourcePropertiesToReturn'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='bookmark'/>
<retval type='^{__CFDictionary=}' already_retained='true' declared_type='CFDictionaryRef'/>
</function>
<function name='CFURLCreateResourcePropertyForKeyFromBookmarkData'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='resourcePropertyKey'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='bookmark'/>
<retval type='@' already_retained='true' declared_type='CFTypeRef'/>
</function>
<function name='CFURLCreateStringByAddingPercentEscapes'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='originalString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='charactersToLeaveUnescaped'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='legalURLCharactersToBeEscaped'/>
<arg type='L' type64='I' declared_type='CFStringEncoding' name='encoding'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFURLCreateStringByReplacingPercentEscapes'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='originalString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='charactersToLeaveEscaped'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFURLCreateStringByReplacingPercentEscapesUsingEncoding'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='origString'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='charsToLeaveEscaped'/>
<arg type='L' type64='I' declared_type='CFStringEncoding' name='encoding'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFURLCreateWithBytes'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg const='true' type='*' declared_type='UInt8*' name='URLBytes'/>
<arg type='l' type64='q' declared_type='CFIndex' name='length'/>
<arg type='L' type64='I' declared_type='CFStringEncoding' name='encoding'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='baseURL'/>
<retval type='^{__CFURL=}' already_retained='true' declared_type='CFURLRef'/>
</function>
<function name='CFURLCreateWithFileSystemPath'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='filePath'/>
<arg type='l' type64='q' declared_type='CFURLPathStyle' name='pathStyle'/>
<arg type='B' declared_type='Boolean' name='isDirectory'/>
<retval type='^{__CFURL=}' already_retained='true' declared_type='CFURLRef'/>
</function>
<function name='CFURLCreateWithFileSystemPathRelativeToBase'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='filePath'/>
<arg type='l' type64='q' declared_type='CFURLPathStyle' name='pathStyle'/>
<arg type='B' declared_type='Boolean' name='isDirectory'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='baseURL'/>
<retval type='^{__CFURL=}' already_retained='true' declared_type='CFURLRef'/>
</function>
<function name='CFURLCreateWithString'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='URLString'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='baseURL'/>
<retval type='^{__CFURL=}' already_retained='true' declared_type='CFURLRef'/>
</function>
<function name='CFURLDestroyResource'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^i' declared_type='SInt32*' name='errorCode'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLEnumeratorCreateForDirectoryURL'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='directoryURL'/>
<arg type='L' type64='Q' declared_type='CFURLEnumeratorOptions' name='option'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='propertyKeys'/>
<retval type='^{__CFURLEnumerator=}' already_retained='true' declared_type='CFURLEnumeratorRef'/>
</function>
<function name='CFURLEnumeratorCreateForMountedVolumes'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='L' type64='Q' declared_type='CFURLEnumeratorOptions' name='option'/>
<arg type='^{__CFArray=}' declared_type='CFArrayRef' name='propertyKeys'/>
<retval type='^{__CFURLEnumerator=}' already_retained='true' declared_type='CFURLEnumeratorRef'/>
</function>
<function name='CFURLEnumeratorGetDescendentLevel'>
<arg type='^{__CFURLEnumerator=}' declared_type='CFURLEnumeratorRef' name='enumerator'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFURLEnumeratorGetNextURL'>
<arg type='^{__CFURLEnumerator=}' declared_type='CFURLEnumeratorRef' name='enumerator'/>
<arg type='^^{__CFURL}' declared_type='CFURLRef*' name='url'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='l' type64='q' declared_type='CFURLEnumeratorResult'/>
</function>
<function name='CFURLEnumeratorGetSourceDidChange'>
<arg type='^{__CFURLEnumerator=}' declared_type='CFURLEnumeratorRef' name='enumerator'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLEnumeratorGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFURLEnumeratorSkipDescendents'>
<arg type='^{__CFURLEnumerator=}' declared_type='CFURLEnumeratorRef' name='enumerator'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFURLGetBaseURL'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFURLGetByteRangeForComponent'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='l' type64='q' declared_type='CFURLComponentType' name='component'/>
<arg type='^{_CFRange=ii}' type64='^{_CFRange=qq}' declared_type='CFRange*' name='rangeIncludingSeparators'/>
<retval type='{_CFRange=ii}' type64='{_CFRange=qq}' declared_type='CFRange'/>
</function>
<function name='CFURLGetBytes'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='*' declared_type='UInt8*' name='buffer'/>
<arg type='l' type64='q' declared_type='CFIndex' name='bufferLength'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFURLGetFSRef'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^{FSRef=[80C]}' declared_type='struct FSRef*' name='fsRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLGetFileSystemRepresentation'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='B' declared_type='Boolean' name='resolveAgainstBase'/>
<arg type='*' declared_type='UInt8*' name='buffer'/>
<arg type='l' type64='q' declared_type='CFIndex' name='maxBufLen'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLGetPortNumber'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<retval type='l' type64='i' declared_type='SInt32'/>
</function>
<function name='CFURLGetString'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFURLGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFURLHasDirectoryPath'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='anURL'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLResourceIsReachable'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLSetResourcePropertiesForKeys'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='keyedPropertyValues'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLSetResourcePropertyForKey'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='@' declared_type='CFTypeRef' name='propertyValue'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='error'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLSetTemporaryResourcePropertyForKey'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='@' declared_type='CFTypeRef' name='propertyValue'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFURLStartAccessingSecurityScopedResource'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLStopAccessingSecurityScopedResource'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFURLWriteBookmarkDataToFile'>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='bookmarkRef'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='fileURL'/>
<arg type='L' type64='Q' declared_type='CFURLBookmarkFileCreationOptions' name='options'/>
<arg type='^^{__CFError}' declared_type='CFErrorRef*' name='errorRef'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFURLWriteDataAndPropertiesToResource'>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='url'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='dataToWrite'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='propertiesToWrite'/>
<arg type='^i' declared_type='SInt32*' name='errorCode'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFUUIDCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<retval type='^{__CFUUID=}' already_retained='true' declared_type='CFUUIDRef'/>
</function>
<function name='CFUUIDCreateFromString'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='uuidStr'/>
<retval type='^{__CFUUID=}' already_retained='true' declared_type='CFUUIDRef'/>
</function>
<function name='CFUUIDCreateFromUUIDBytes'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='{_CFUUIDBytes=CCCCCCCCCCCCCCCC}' declared_type='CFUUIDBytes' name='bytes'/>
<retval type='^{__CFUUID=}' already_retained='true' declared_type='CFUUIDRef'/>
</function>
<function name='CFUUIDCreateString'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='uuid'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFUUIDCreateWithBytes'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='C' declared_type='UInt8' name='byte0'/>
<arg type='C' declared_type='UInt8' name='byte1'/>
<arg type='C' declared_type='UInt8' name='byte2'/>
<arg type='C' declared_type='UInt8' name='byte3'/>
<arg type='C' declared_type='UInt8' name='byte4'/>
<arg type='C' declared_type='UInt8' name='byte5'/>
<arg type='C' declared_type='UInt8' name='byte6'/>
<arg type='C' declared_type='UInt8' name='byte7'/>
<arg type='C' declared_type='UInt8' name='byte8'/>
<arg type='C' declared_type='UInt8' name='byte9'/>
<arg type='C' declared_type='UInt8' name='byte10'/>
<arg type='C' declared_type='UInt8' name='byte11'/>
<arg type='C' declared_type='UInt8' name='byte12'/>
<arg type='C' declared_type='UInt8' name='byte13'/>
<arg type='C' declared_type='UInt8' name='byte14'/>
<arg type='C' declared_type='UInt8' name='byte15'/>
<retval type='^{__CFUUID=}' already_retained='true' declared_type='CFUUIDRef'/>
</function>
<function name='CFUUIDGetConstantUUIDWithBytes'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='C' declared_type='UInt8' name='byte0'/>
<arg type='C' declared_type='UInt8' name='byte1'/>
<arg type='C' declared_type='UInt8' name='byte2'/>
<arg type='C' declared_type='UInt8' name='byte3'/>
<arg type='C' declared_type='UInt8' name='byte4'/>
<arg type='C' declared_type='UInt8' name='byte5'/>
<arg type='C' declared_type='UInt8' name='byte6'/>
<arg type='C' declared_type='UInt8' name='byte7'/>
<arg type='C' declared_type='UInt8' name='byte8'/>
<arg type='C' declared_type='UInt8' name='byte9'/>
<arg type='C' declared_type='UInt8' name='byte10'/>
<arg type='C' declared_type='UInt8' name='byte11'/>
<arg type='C' declared_type='UInt8' name='byte12'/>
<arg type='C' declared_type='UInt8' name='byte13'/>
<arg type='C' declared_type='UInt8' name='byte14'/>
<arg type='C' declared_type='UInt8' name='byte15'/>
<retval type='^{__CFUUID=}' declared_type='CFUUIDRef'/>
</function>
<function name='CFUUIDGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFUUIDGetUUIDBytes'>
<arg type='^{__CFUUID=}' declared_type='CFUUIDRef' name='uuid'/>
<retval type='{_CFUUIDBytes=CCCCCCCCCCCCCCCC}' declared_type='CFUUIDBytes'/>
</function>
<function name='CFUserNotificationCancel'>
<arg type='^{__CFUserNotification=}' declared_type='CFUserNotificationRef' name='userNotification'/>
<retval type='l' type64='i' declared_type='SInt32'/>
</function>
<function inline='true' name='CFUserNotificationCheckBoxChecked'>
<arg type='l' type64='q' declared_type='CFIndex' name='i'/>
<retval type='L' type64='Q' declared_type='CFOptionFlags'/>
</function>
<function name='CFUserNotificationCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='d' declared_type='CFTimeInterval' name='timeout'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='flags'/>
<arg type='^i' declared_type='SInt32*' name='error'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='dictionary'/>
<retval type='^{__CFUserNotification=}' already_retained='true' declared_type='CFUserNotificationRef'/>
</function>
<function name='CFUserNotificationCreateRunLoopSource'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFUserNotification=}' declared_type='CFUserNotificationRef' name='userNotification'/>
<arg function_pointer='true' type='^?' declared_type='CFUserNotificationCallBack' name='callout'>
<arg type='^{__CFUserNotification=}' declared_type='CFUserNotificationRef'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='l' type64='q' declared_type='CFIndex' name='order'/>
<retval type='^{__CFRunLoopSource=}' already_retained='true' declared_type='CFRunLoopSourceRef'/>
</function>
<function name='CFUserNotificationDisplayAlert'>
<arg type='d' declared_type='CFTimeInterval' name='timeout'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='flags'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='iconURL'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='soundURL'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='localizationURL'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='alertHeader'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='alertMessage'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='defaultButtonTitle'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='alternateButtonTitle'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='otherButtonTitle'/>
<arg type='^I' type64='^Q' declared_type='CFOptionFlags*' name='responseFlags'/>
<retval type='l' type64='i' declared_type='SInt32'/>
</function>
<function name='CFUserNotificationDisplayNotice'>
<arg type='d' declared_type='CFTimeInterval' name='timeout'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='flags'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='iconURL'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='soundURL'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='localizationURL'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='alertHeader'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='alertMessage'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='defaultButtonTitle'/>
<retval type='l' type64='i' declared_type='SInt32'/>
</function>
<function name='CFUserNotificationGetResponseDictionary'>
<arg type='^{__CFUserNotification=}' declared_type='CFUserNotificationRef' name='userNotification'/>
<retval type='^{__CFDictionary=}' declared_type='CFDictionaryRef'/>
</function>
<function name='CFUserNotificationGetResponseValue'>
<arg type='^{__CFUserNotification=}' declared_type='CFUserNotificationRef' name='userNotification'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='key'/>
<arg type='l' type64='q' declared_type='CFIndex' name='idx'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFUserNotificationGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function inline='true' name='CFUserNotificationPopUpSelection'>
<arg type='l' type64='q' declared_type='CFIndex' name='n'/>
<retval type='L' type64='Q' declared_type='CFOptionFlags'/>
</function>
<function name='CFUserNotificationReceiveResponse'>
<arg type='^{__CFUserNotification=}' declared_type='CFUserNotificationRef' name='userNotification'/>
<arg type='d' declared_type='CFTimeInterval' name='timeout'/>
<arg type='^I' type64='^Q' declared_type='CFOptionFlags*' name='responseFlags'/>
<retval type='l' type64='i' declared_type='SInt32'/>
</function>
<function inline='true' name='CFUserNotificationSecureTextField'>
<arg type='l' type64='q' declared_type='CFIndex' name='i'/>
<retval type='L' type64='Q' declared_type='CFOptionFlags'/>
</function>
<function name='CFUserNotificationUpdate'>
<arg type='^{__CFUserNotification=}' declared_type='CFUserNotificationRef' name='userNotification'/>
<arg type='d' declared_type='CFTimeInterval' name='timeout'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='flags'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='dictionary'/>
<retval type='l' type64='i' declared_type='SInt32'/>
</function>
<function name='CFWriteStreamCanAcceptBytes'>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' name='stream'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFWriteStreamClose'>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' name='stream'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFWriteStreamCopyError'>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' name='stream'/>
<retval type='^{__CFError=}' already_retained='true' declared_type='CFErrorRef'/>
</function>
<function name='CFWriteStreamCopyProperty'>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' name='stream'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='propertyName'/>
<retval type='@' already_retained='true' declared_type='CFTypeRef'/>
</function>
<function name='CFWriteStreamCreateWithAllocatedBuffers'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='bufferAllocator'/>
<retval type='^{__CFWriteStream=}' already_retained='true' declared_type='CFWriteStreamRef'/>
</function>
<function name='CFWriteStreamCreateWithBuffer'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='*' declared_type='UInt8*' name='buffer'/>
<arg type='l' type64='q' declared_type='CFIndex' name='bufferCapacity'/>
<retval type='^{__CFWriteStream=}' already_retained='true' declared_type='CFWriteStreamRef'/>
</function>
<function name='CFWriteStreamCreateWithFile'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='fileURL'/>
<retval type='^{__CFWriteStream=}' already_retained='true' declared_type='CFWriteStreamRef'/>
</function>
<function name='CFWriteStreamGetError'>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' name='stream'/>
<retval type='{_CFStreamError=ii}' type64='{_CFStreamError=qi}' declared_type='CFStreamError'/>
</function>
<function name='CFWriteStreamGetStatus'>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' name='stream'/>
<retval type='l' type64='q' declared_type='CFStreamStatus'/>
</function>
<function name='CFWriteStreamGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFWriteStreamOpen'>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' name='stream'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFWriteStreamScheduleWithRunLoop'>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' name='stream'/>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='runLoop'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='runLoopMode'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFWriteStreamSetClient'>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' name='stream'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='streamEvents'/>
<arg function_pointer='true' type='^?' declared_type='CFWriteStreamClientCallBack' name='clientCB'>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef'/>
<arg type='L' type64='Q' declared_type='CFStreamEventType'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</arg>
<arg type='^{_CFStreamClientContext=i^v^?^?^?}' type64='^{_CFStreamClientContext=q^v^?^?^?}' declared_type='CFStreamClientContext*' name='clientContext'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFWriteStreamSetProperty'>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' name='stream'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='propertyName'/>
<arg type='@' declared_type='CFTypeRef' name='propertyValue'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFWriteStreamUnscheduleFromRunLoop'>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' name='stream'/>
<arg type='^{__CFRunLoop=}' declared_type='CFRunLoopRef' name='runLoop'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='runLoopMode'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFWriteStreamWrite'>
<arg type='^{__CFWriteStream=}' declared_type='CFWriteStreamRef' name='stream'/>
<arg const='true' type='*' declared_type='UInt8*' name='buffer'/>
<arg type='l' type64='q' declared_type='CFIndex' name='bufferLength'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFXMLCreateStringByEscapingEntities'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='string'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='entitiesDictionary'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFXMLCreateStringByUnescapingEntities'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='string'/>
<arg type='^{__CFDictionary=}' declared_type='CFDictionaryRef' name='entitiesDictionary'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFXMLNodeCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='l' type64='q' declared_type='CFXMLNodeTypeCode' name='xmlType'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='dataString'/>
<arg const='true' type='^v' declared_type='void*' name='additionalInfoPtr'/>
<arg type='l' type64='q' declared_type='CFIndex' name='version'/>
<retval type='^{__CFXMLNode=}' already_retained='true' declared_type='CFXMLNodeRef'/>
</function>
<function name='CFXMLNodeCreateCopy'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='alloc'/>
<arg type='^{__CFXMLNode=}' declared_type='CFXMLNodeRef' name='origNode'/>
<retval type='^{__CFXMLNode=}' already_retained='true' declared_type='CFXMLNodeRef'/>
</function>
<function name='CFXMLNodeGetInfoPtr'>
<arg type='^{__CFXMLNode=}' declared_type='CFXMLNodeRef' name='node'/>
<retval const='true' type='^v' declared_type='void*'/>
</function>
<function name='CFXMLNodeGetString'>
<arg type='^{__CFXMLNode=}' declared_type='CFXMLNodeRef' name='node'/>
<retval type='^{__CFString=}' declared_type='CFStringRef'/>
</function>
<function name='CFXMLNodeGetTypeCode'>
<arg type='^{__CFXMLNode=}' declared_type='CFXMLNodeRef' name='node'/>
<retval type='l' type64='q' declared_type='CFXMLNodeTypeCode'/>
</function>
<function name='CFXMLNodeGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFXMLNodeGetVersion'>
<arg type='^{__CFXMLNode=}' declared_type='CFXMLNodeRef' name='node'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFXMLParserAbort'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef' name='parser'/>
<arg type='l' type64='q' declared_type='CFXMLParserStatusCode' name='errorCode'/>
<arg type='^{__CFString=}' declared_type='CFStringRef' name='errorDescription'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFXMLParserCopyErrorDescription'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef' name='parser'/>
<retval type='^{__CFString=}' already_retained='true' declared_type='CFStringRef'/>
</function>
<function name='CFXMLParserCreate'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='xmlData'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='dataSource'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='parseOptions'/>
<arg type='l' type64='q' declared_type='CFIndex' name='versionOfNodes'/>
<arg type='^{_CFXMLParserCallBacks=i^?^?^?^?^?}' type64='^{_CFXMLParserCallBacks=q^?^?^?^?^?}' declared_type='CFXMLParserCallBacks*' name='callBacks'/>
<arg type='^{_CFXMLParserContext=i^v^?^?^?}' type64='^{_CFXMLParserContext=q^v^?^?^?}' declared_type='CFXMLParserContext*' name='context'/>
<retval type='^{__CFXMLParser=}' already_retained='true' declared_type='CFXMLParserRef'/>
</function>
<function name='CFXMLParserCreateWithDataFromURL'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='dataSource'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='parseOptions'/>
<arg type='l' type64='q' declared_type='CFIndex' name='versionOfNodes'/>
<arg type='^{_CFXMLParserCallBacks=i^?^?^?^?^?}' type64='^{_CFXMLParserCallBacks=q^?^?^?^?^?}' declared_type='CFXMLParserCallBacks*' name='callBacks'/>
<arg type='^{_CFXMLParserContext=i^v^?^?^?}' type64='^{_CFXMLParserContext=q^v^?^?^?}' declared_type='CFXMLParserContext*' name='context'/>
<retval type='^{__CFXMLParser=}' already_retained='true' declared_type='CFXMLParserRef'/>
</function>
<function name='CFXMLParserGetCallBacks'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef' name='parser'/>
<arg type='^{_CFXMLParserCallBacks=i^?^?^?^?^?}' type64='^{_CFXMLParserCallBacks=q^?^?^?^?^?}' declared_type='CFXMLParserCallBacks*' name='callBacks'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFXMLParserGetContext'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef' name='parser'/>
<arg type='^{_CFXMLParserContext=i^v^?^?^?}' type64='^{_CFXMLParserContext=q^v^?^?^?}' declared_type='CFXMLParserContext*' name='context'/>
<retval type='v' declared_type='void'/>
</function>
<function name='CFXMLParserGetDocument'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef' name='parser'/>
<retval type='^v' declared_type='void*'/>
</function>
<function name='CFXMLParserGetLineNumber'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef' name='parser'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFXMLParserGetLocation'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef' name='parser'/>
<retval type='l' type64='q' declared_type='CFIndex'/>
</function>
<function name='CFXMLParserGetSourceURL'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef' name='parser'/>
<retval type='^{__CFURL=}' declared_type='CFURLRef'/>
</function>
<function name='CFXMLParserGetStatusCode'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef' name='parser'/>
<retval type='l' type64='q' declared_type='CFXMLParserStatusCode'/>
</function>
<function name='CFXMLParserGetTypeID'>
<retval type='L' type64='Q' declared_type='CFTypeID'/>
</function>
<function name='CFXMLParserParse'>
<arg type='^{__CFXMLParser=}' declared_type='CFXMLParserRef' name='parser'/>
<retval type='B' declared_type='Boolean'/>
</function>
<function name='CFXMLTreeCreateFromData'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='xmlData'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='dataSource'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='parseOptions'/>
<arg type='l' type64='q' declared_type='CFIndex' name='versionOfNodes'/>
<retval type='^{__CFTree=}' declared_type='CFXMLTreeRef'/>
</function>
<function name='CFXMLTreeCreateFromDataWithError'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFData=}' declared_type='CFDataRef' name='xmlData'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='dataSource'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='parseOptions'/>
<arg type='l' type64='q' declared_type='CFIndex' name='versionOfNodes'/>
<arg type='^^{__CFDictionary}' declared_type='CFDictionaryRef*' name='errorDict'/>
<retval type='^{__CFTree=}' declared_type='CFXMLTreeRef'/>
</function>
<function name='CFXMLTreeCreateWithDataFromURL'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFURL=}' declared_type='CFURLRef' name='dataSource'/>
<arg type='L' type64='Q' declared_type='CFOptionFlags' name='parseOptions'/>
<arg type='l' type64='q' declared_type='CFIndex' name='versionOfNodes'/>
<retval type='^{__CFTree=}' declared_type='CFXMLTreeRef'/>
</function>
<function name='CFXMLTreeCreateWithNode'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFXMLNode=}' declared_type='CFXMLNodeRef' name='node'/>
<retval type='^{__CFTree=}' declared_type='CFXMLTreeRef'/>
</function>
<function name='CFXMLTreeCreateXMLData'>
<arg type='^{__CFAllocator=}' declared_type='CFAllocatorRef' name='allocator'/>
<arg type='^{__CFTree=}' declared_type='CFXMLTreeRef' name='xmlTree'/>
<retval type='^{__CFData=}' already_retained='true' declared_type='CFDataRef'/>
</function>
<function name='CFXMLTreeGetNode'>
<arg type='^{__CFTree=}' declared_type='CFXMLTreeRef' name='xmlTree'/>
<retval type='^{__CFXMLNode=}' declared_type='CFXMLNodeRef'/>
</function>
</signatures>
